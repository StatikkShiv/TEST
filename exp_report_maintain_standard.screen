<?xml version="1.0" encoding="UTF-8"?>
<a:screen xmlns:c="aurora.application.action" xmlns:p="uncertain.proc" xmlns:a="http://www.aurora-framework.org/application" tag="exp_report" trace="true">
    <a:init-procedure>
        <a:model-query autoCount="false" fetchAll="true" model="expm.exp_report_head_show" rootPath="head_data"/>
        <a:model-query autoCount="false" fetchAll="true" model="expm.query_default_exp_type_object" rootPath="def_type_obj"/>
        <a:model-query defaultWhereClause="expense_report_type_id=nvl(${/parameter/@expense_report_type_id},(select hh.exp_report_type_id from exp_report_headers hh where hh.exp_report_header_id=${/parameter/@exp_report_header_id}))" fetchAll="true" model="exp.exp_expense_report_types_vl" rootPath="budget_control"/>
        <a:model-query autoCount="false" defaultWhereClause="currency_code=${/model/head_data/record/@exp_report_currency_code}" fetchAll="true" model="gld.gld_currency_vl" rootPath="precision"/>
        <a:model-query autocount="false" fetchall="true" model="csh.csh_payment_methods_list" rootpath="payment_method_list"/>
        <a:model-query autocount="false" defaultwhereclause="exists (select 1 from exp_employee_assigns eea         where eea.position_id=op.position_id    and eea.enabled_flag = &apos;Y&apos;   and   eea.employee_id= nvl(${/parameter/@employee_id},${/model/head_data/record/@employee_id}))  and company_id = ${/session/@company_id}" fetchall="true" model="exp.exp_org_position" rootpath="position_list"/>
        <a:model-query autocount="false" fetchall="true" model="fnd.fnd_companies_set_of_books" rootpath="fnd_company_bm"/>
        <a:model-query autocount="false" fetchall="true" model="expm.exp_report_head_dimension" rootpath="head_dimension"/>
        <a:model-query autocount="false" fetchall="true" model="expm.exp_report_head_object" rootpath="head_object"/>
        <a:model-query autocount="false" fetchall="true" model="expm.exp_report_line_dimension" rootpath="line_dimension"/>
        <a:model-query autocount="false" fetchall="true" model="expm.exp_report_line_object" rootpath="line_object"/>
        <a:model-query fetchAll="true" model="expm.expm_get_policy_enabled" rootpath="policy_enabled"/>
        <a:model-query autoCount="false" fetchAll="true" model="expm.exp_requisition_exchange_type_init" rootPath="exchange_type"/>
        <a:model-query autoCount="true" model="expm.exp_report_get_check_log_count" rootPath="check_log_count"/>
        <a:model-query fetchAll="true" model="exp.EXP1330.exp_ygz_usage_types_lov" rootPath="usage_type"/>
        <a:model-query fetchAll="true" model="exp.EXP1340.exp_ygz_invoice_types_lov" rootPath="invoice_type"/>
        <a:model-query fetchAll="true" model="cux.get_rpc_client_url" rootPath="url_ds"/>
        <a:model-query autocount="false" fetchall="true" model="expm.exp_line_back_account_id2" rootpath="line_dimension2"/>
        <a:model-query autoCount="false" fetchall="true" model="expm.get_image_shadow_upload_url" rootPath="cux_exp_image"/>
        <a:model-query autoCount="false" defaultwhereclause="enabled_flag=&apos;Y&apos; and CURRENCY_CODE!=&apos;OTHER&apos;" fetchAll="true" model="gld.line_gld_currency" rootPath="currency_list"/>
        <a:model-query fetchAll="true" model="gld.cux_object_query" rootPath="object_col"/>
        <a:model-query fetchAll="true" model="gld.cux_pay_name_query2" rootPath="pay_name"/>
        <!--获取缴纳个人所得税对应的付款方式和付款用途-->
        <a:model-query fetchAll="true" model="gld.pay_query1" rootPath="pay_method_used"/>
        <!--获取单据类型对应的部门-->
        <a:model-query fetchAll="true" model="exp.get_unit_id" rootPath="unit_id_defined"/>
        <!--获取岗位对应的部门-->
        <!-- <a:model-query fetchAll="true" model="exp.get_unit_id_by_position" rootPath="unit_id_by_position"/> -->
        <!--获取当前账套对应的币种-->
        <a:model-query autoCount="false" fetchAll="true" model="exp.get_currency_code" rootPath="currency_code_path"/>
        <!--当前账套是否是HGI账套-->
        <a:model-query autoCount="false" fetchAll="true" model="expm.account_set_judgment" rootPath="account_set"/>
        <a:model-query model="csh.CSH5010.query_period_name" rootpath="period_name_ds"/>
        <!-- 报销单类型 -->
        <a:model-query autoCount="false" fetchAll="true" model="expm.report_type_code" rootPath="report_type_code"/>
        <!--当前登录人是否为HGI的财务人员-->
        <a:model-query autoCount="false" fetchAll="true" model="expm.hgi_account_employee_judgment" rootPath="hgi_account_employee"/>
    </a:init-procedure>
    <a:view>
        <a:link id="uploadFile_link_10" url="${/request/@context_path}/uploadFile.screen"/>
        <a:link id="exp_report_pmtplan_schedules_link_4" url="${/request/@context_path}/modules/expm/public/exp_report_pmtplan_schedules.screen"/>
        <a:link id="exp_report_query_history_link_6" url="${/request/@context_path}/modules/exp/public/exp_report_query_history.screen"/>
        <a:link id="exp_budget_check_log_link_9" url="${/request/@context_path}/modules/expm/public/exp_budget_check_log.screen"/>
        <a:link id="exp_report_line_assign_link" url="${/request/@context_path}/modules/expm/public/exp_report_line_assign.screen"/>
        <a:link id="exp_report_fromreq_link" url="${/request/@context_path}/modules/expm/public/exp_report_fromreq.screen"/>
        <a:link id="exp_report_yt_link" url="${/request/@context_path}/modules/expm/public/exp_report_fromyt.screen"/>
        <a:link id="exp_report_maintain_query_link_3" url="${/request/@context_path}/modules/expm/public/hgi_account_exp_report_query.screen"/>
        <a:link id="exp_report_maintain_query_link_2" url="${/request/@context_path}/modules/expm/public/exp_report_maintain_query.screen"/>
        <a:link id="exp_report_maintain_query_link_1" url="${/request/@context_path}/modules/wfl/WFL5010/workflowpersonalactivelist.screen"/>
        <a:link id="exp_report_query_link" url="${/request/@context_path}/modules/expm/public/exp_report_query.screen"/>
        <a:link id="exp_report_submit_link" url="${/request/@context_path}/modules/expm/public/exp_report_submit_control.svc"/>
        <a:link id="exp_report_bgt_check_link" model="db.bgt_check_pkg.report_bgt_check" modelaction="execute"/>
        <a:link id="exp_report_bgt_check_with_cache_link" model="db.bgt_check_with_cache_pkg.report_bgt_check" modelaction="execute"/>
        <a:link id="exp_report_pmt_check_link" model="db.exp_report_pkg.report_pmt_check" modelaction="execute"/>
        <a:link id="get_exchange_rate_link_16" model="expm.get_exchange_rate" modelaction="query"/>
        <a:link id="get_exchange_rate_by_quotation_link" model="expm.get_exchange_rate_by_quotation" modelaction="query"/>
        <a:link id="exp_report_type_choice_link_1" url="${/request/@context_path}/modules/expm/public/exp_report_type_choice.screen"/>
        <a:link id="exp_report_delete_link_1" url="${/request/@context_path}/modules/expm/public/exp_report_delete.svc"/>
        <a:link id="exp_report_maintain_link_3" url="${/request/@context_path}/modules/expm/public/exp_report_maintain.screen"/>
        <a:link id="exp_expense_policy_infoinit_link" model="expm.exp_expense_policy_infoinit" modelaction="update"/>
        <a:link id="exp_expense_policy_infoinit_link2" model="expm.exp_expense_policy_infoinit2" modelaction="update"/>
        <a:link id="exp_report_pmt_schedule_report_link" model="expm.exp_report_pmt_schedule_report" modelaction="execute"/>
        <a:link id="sys_fun_get_period_name_link_5" model="csh.sys_fun_get_period_name" modelaction="query"/>
        <a:link id="sys_fun_get_period_name_link_6" model="csh.sys_fun_get_bgt_period_name" modelaction="query"/>
        <a:link id="sys_fun_get_payment_date_link" model="db.exp_report_pkg.get_payment_schedule_date" modelaction="execute"/>
        <a:link id="exp_report_check_invoice_link" model="expm.exp_report_check_invoice" modelaction="execute"/>
        <a:link id="cux_invoice_check_link" url="${/request/@context_path}/modules/expm/public/cux_invoice_query.svc"/>
        <a:link id="get_exp_report_invoice_dist_info_link" modelaction="query" url="${/request/@context_path}/autocrud/expm.exp_report_invoice_dist_info/query?_fetchall=true"/>
        <a:link id="exp_prepayment_post_readonly_link" url="${/request/@context_path}/modules/expm/exp_prepayment_post_readonly.screen"/>
        <a:link id="exp_prepayment_post_link_2" url="${/request/@context_path}/modules/expm/public/exp_prepayment_post.screen"/>
        <a:link id="exp_document_req_policy_query_link" url="${/request/@context_path}/modules/expm/public/exp_document_policy_query.screen"/>
        <a:link id="exp_report_maintain_get_exp_report_number_link" model="exp.exp_report_maintain_get_exp_report_number" modelaction="query"/>
        <a:link id="exp_bank_assign_link" url="${/request/@context_path}/modules/exp/EXP1050/exp_bank_assign_pmt_schedule_readonly.screen"/>
        <a:link id="exp_ygz_check_einvoice_used_link" model="expm.exp_ygz_check_einvoice_used" modelaction="query"/>
        <a:link id="exp_report_oa_sign_link" url="${/request/@context_path}/modules/expm/public/exp_report_oa_sign.screen"/>
        <!-- 影像查看 -->
        <!-- <a:link id="exp_image_upload_link" model="db.cux_ws_request_pkg.image_upload" modelaction="execute"/> -->
        <a:link id="image_submit_link" model="db.cux_ws_request_pkg.image_upload1" modelaction="execute"/>
        <a:link id="image_query_link" model="db.cux_ws_request_pkg.image_upload2" modelaction="query"/>
        <a:link id="exp_image_upload_link" url="${/request/@context_path}/modules/img/get_upload_view_url.svc"/>
        <a:link id="cux_institution_document_query_link" url="${/request/@context_path}/modules/cux/CUX1010/cux_institution_document_query.screen"/>
        <!--oss上传-->
        <a:link id="oss_download_link" url="${/request/@context_path}/modules/cux/get_oss_download_info.svc"/>
        <a:link id="oss_upload_link" url="${/request/@context_path}/modules/cux/get_oss_upload_info.svc"/>
        <a:link id="exp_report_maintain_read_only_link2" url="${/request/@context_path}/modules/expm/public/exp_report_maintain_read_only.screen"/>
        <a:link id="exp_report_invoice_info_link" url="${/request/@context_path}/modules/expm/public/exp_report_invoice_info.screen"/>
        <a:link id="exp_report_accep_document_link" url="${/request/@context_path}/modules/expm/public/exp_report_accep_document.screen"/>
        <a:link id="exp_report_header_postscript_link" url="${/request/@context_path}/modules/expm/public/exp_report_header_postscript.screen"/>
        <a:link id="exp_implementation_rate_link" model="db.exp_report_pkg.exp_implementation_rate" modelaction="execute"/>
        <!--报销单行上自主选择币种-->
        <a:link id="rate_query_link" model="gld.line_gld_currency_rate" modelaction="query"/>
        <!--是否搭配客户查询-->
        <a:link id="get_customer_check_link" model="gld.custome_query" modelaction="query"/>
        <!--勾选的费用项目是否可验证-->
        <a:link id="acceptance_flag_query_link" model="gld.line_expense_item_acceptance_flag" modelaction="query"/>
        <!--提交前校验是否有影像或附件-->
        <a:link id="image_check_query_link" url="${/request/@context_path}/modules/expm/public/image_check_query.svc"/>
        <a:link id="image_check2" model="gld.document_image_query" modelaction="query"/>
        <a:link id="exp_report_benefit_info_link" url="${/request/@context_path}/modules/expm/public/exp_report_benefit_info.screen"/>
        <a:link id="exp_report_create_benefit_link" model="expm.exp_report_create_benefit" modelaction="execute"/>
        <!--校验费用项目是否为补助，取编码-->
        <a:link id="get_item_check_link" model="gld.lunch_item_query" modelaction="query"/>
        <!--获取费用对象的动态列-->
        <a:link id="get_object_check_link" model="gld.cux_object_query" modelaction="query"/>
        <!--将单据编号加密-->
        <a:link id="encrypt_check_query_link" url="${/request/@context_path}/modules/expm/public/document_check_encrypt.svc"/>
        <!--从申请单创建招待类型的报销单-->
        <a:link id="get_req_object_values_link" model="gld.req_object_values_query" modelaction="query"/>
        <a:link id="get_unit_id_by_position" model="exp.get_unit_id_by_position" modelaction="query"/>
        <a:link id="get_pmtplan_record_amount" model="exp.get_pmtplan_record_amount" modelaction="query"/>
        <!--获取发票不含税金额总额-->
        <a:link id="get_sum_sale_amount" model="exp.get_sum_sale_amount" modelaction="query"/>
        <!--获取摊销金额-->
        <a:link id="get_amortization_amount" model="exp.get_amortization_amount" modelaction="query"/>
        <!--获取摊销标识-->
        <a:link id="get_amortization_flag" model="exp.get_amortization_flag" modelaction="query"/>
        <a:link id="get_budget_unit_validate_link" model="expm.cux_budget_unit_validate" modelaction="query"/>
        <!-- 年结校验 -->
        <a:link id="exp_annual_knots_check" model="expm.exp_annual_knots_check" modelaction="query"/>
        <a:link id="check_amortization_data_link" model="exp.check_amortization_data" modelaction="query"/>
        <!-- 预算提示 -->
        <a:link id="get_bgt_check_logs" model="expm.cux_get_bgt_check_logs" modelaction="query"/>
        <!--从申请单创建对应的借款信息-->
        <a:link id="get_csh_pay_link" model="gld.exp_csh_query" modelaction="query"/>
        <!--判断该单的发票类型是否可以让他勾选预提标志-->
        <a:link id="exp_preview_link" model="gld.preview_invoice_check_flag" modelaction="query"/>
        <!--校验费用项目为手机费的时候报销月份是否重复-->
        <a:link id="get_iPhone_check_link" model="gld.mobil_req_item_query" modelaction="query"/>
        <!--重置报销单预算状态-->
        <a:link id="bgt_reset_link" model="gld.exp_save_bgt_resert" modelaction="execute"/>
        <!--客户-->
        <a:link id="exp_report_customer_info_link" url="${/request/@context_path}/modules/expm/public/exp_report_customer_info.screen"/>
        <!--是否搭配费用对象版的客户查询-->
        <a:link id="get_customer_check_link1" model="gld.custome_query1" modelaction="query"/>
        <!--费用对象-->
        <a:link id="get_object_check_link1" model="gld.cux_object_query1" modelaction="query"/>
        <a:link id="exp_requisition_ref_report_link" url="${/request/@context_path}/modules/expm/public/exp_requisition_ref_report.screen"/>
        <!-- 手机费工作餐，费用项目含有工作餐的，额度限制校验 -->
        <a:link id="get_item_type_link" model="gld.get_item_type_link" modelaction="query"/>
        <!--HGI账套更新财务标志-->
        <a:link id="exp_hgi_account_check_link" model="expm.exp_report_account_hgicheck" modelaction="update"/>
        <!--判断该单据该报销单行是否关联有客户-->
        <a:link id="customer_employee_judgment_link" model="expm.customer_employee_judgment" modelaction="query"/>
        <!--判断该报销人对应的银行账户是否有勾AE标识的，有则带出-->
        <a:link id="ae_employee_link" model="expm.ae_employee_judgment" modelaction="query"/>
        <!-- 根据持卡人找到预算中心 成本中心  -->
        <a:link id="get_ae_employee_unit_responseibility_link" model="expm.get_ae_employee_unit_responseibility" modelaction="query"/>
        <style><![CDATA[
            .accordion-box td{
                vertical-align:top;
            }
            #seehelpBtn{
               float: right !important;
            }
            #postScriptBtn{
               float: right !important;
            }
            #createytbtn{
                float: right !important;
            }
            #deletereportBtn{
                float: right !important;
            }
        ]]></style>
        <script><![CDATA[
            var lineNum = 0;
            var submitFlag = 0;
            var saveFlag = true; //保存标志(用在动态列)，默认当加载页面后是true（及保存状态）。当对页面上的东西进行改动后，保存标志变为false。此时必须要保存后才能提交。
            var initFlag = 1;
            var pmt_schedule_due_date;
            var index = 1;
            var initLineIndex = 0;
            var exp_report_header_id_bak = '${/parameter/@exp_report_header_id}';
            var canSave;
            //add by HJ
            var impFlag = 0;

            var removeFlag = false;

            function sumRenderer(records, name) {
                var sum = 0;
                for (var i = 0;i < records.length;i++) {
                    var r = records[i].get(name);
                    var n = parseFloat(r);
                    if (!isNaN(n)) {
                        sum += n;
                    }
                }
                sum = Math.round(sum * 100) / 100; /*var total = (typeof(sum) == 'undefined' ? '' : parseFloat(sum).toFixed(Precision));*/
                return '<font>${l:PUR_ORDER_LINES.SUM_AMOUNT}：<label style="color:red">' + sum + '</label></font>';
            }

            function pmtGridcellclick(grid, row, name, record) {

                var metadata = record.getMeta();
                if (name == 'payee_partner_name') {
                    var f1 = metadata.getField('payee_partner_name');
                    var payee_category = record.get('payee_type_value');
                    if (payee_category == null || payee_category == undefined || payee_category == '') {
                        f1.setLovService('');
                    } else if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('csh.csh_pay_req_emp_lov');
                        // f1.setLovService('expm.exp_req_employee_lov');
					    //add by lyt 2019.09.05 Corporate Card类型报销单计划付款行（员工收款对象）银行账户显示AE标识的，BBB我是TEST2修改BBB
					    //add by lyt 2019.09.05 Corporate Card类型报销单计划付款行（员工收款对象）银行账户显示AE标识的，当前是DEV分支
                        doc_type_code3='${/model/report_type_code/record/@exp_type_code}';
                        if(doc_type_code3=='HGIBX0100'){
                            record.getMeta().getField('payee_partner_name').setLovPara('doc_type_code', doc_type_code3);
                        }else{
                            record.getMeta().getField('payee_partner_name').setLovPara('doc_type_code', 'XXXX');
                        }                        
                    } else if (payee_category == 'VENDER') {
                        // f1.setLovService('fnd.pur_system_venders');
                        if('${/model/account_set/record/@account_set}'!=1){
                        	f1.setLovService('csh.csh_pay_req_ven_lov');
                        }else{
                            f1.setLovService('csh.csh_pay_req_ven_lov_for_HGI');
                        }
                    } else {
                        // f1.setLovService('fnd.ord_system_customers');
                        f1.setLovService('csh.csh_pay_req_cus_lov');
                    }
                }
                if (name == 'line_number') {
                    var meta = record.getMeta();
                    var field = meta.getField('line_number');
                    if (!record.get('contract_header_id') || record.get('contract_header_id') == '') {
                        field.setLovService('');
                    } else {
                        field.setLovService('csh.csh_payment_schedule_lov');
                        field.setLovPara('contract_header_id', record.get('contract_header_id') || '');
                        field.setLovPara('currency_code', record.get('currency'));
                        field.setLovPara('partner_id', record.get('payee_id') || '');
                        field.setLovPara('partner_category1', record.get('payee_type_value') || '');
                    }
                }
                if (name == 'contract_number') {
                    var contractfield = record.getMeta().getField('contract_number');
                    contractfield.setLovPara('currency_code', record.get('currency'));
                    contractfield.setLovPara('partner_category', record.get('payee_type_value') || '');
                    contractfield.setLovPara('partner_id', record.get('payee_id') || '');
                    contractfield.setLovPara('company_id', record.get('company_id') || '');
                }
                if (name == 'account_number_hide') {

                    var r = record.getMeta();
                    var f1 = r.getField('account_number_hide');
                    var payee_category = record.get('payee_type_value');
                    if (payee_category == null || payee_category == undefined || payee_category == '') {
                        f1.setLovService('');
                    } else if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_accounts');
                        record.getMeta().getField('account_number_hide').setLovPara('employee_id', record.get('payee_id'));
                        //add by lyt 2019.09.05 Corporate Card类型报销单计划付款行（员工收款对象）银行账户显示AE标识的，其他类型单据显示非AE标识
                        doc_type_code3='${/model/report_type_code/record/@exp_type_code}';
                        if(doc_type_code3=='HGIBX0100'){
                            record.getMeta().getField('account_number_hide').setLovPara('doc_type_code', doc_type_code3);
                        }else{
                            record.getMeta().getField('account_number_hide').setLovPara('doc_type_code', 'XXXX');
                        }
                        
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.pur_vender_accounts');
                        record.getMeta().getField('account_number_hide').setLovPara('vender_id', record.get('payee_id'));
                    } else {
                        //客户的银行账户
                        f1.setLovService('expm.ord_customer_accounts');
                        record.getMeta().getField('account_number_hide').setLovPara('customer_id', record.get('payee_id'));
                        //record.getMeta().getField('account_number').setLovPara('id', record.get('partner_id'));
                    }
                }
            }

            function gridcellclick(grid, row, name, record) {
                var metadata = record.getMeta();
                // if(name=="payee_category_name"){
                // }
                if (name == 'expense_type_name') {
                    $('exp_expense_type_ds').setQueryParameter('company_id', record.get('company_id'));
                    //判断公司是否和头表一致
                    var header_company_id = $('exp_report_head').getAt(0).get('company_id');
                    if(header_company_id != record.get('company_id')) {
                        $('exp_expense_type_ds').setQueryUrl('${/request/@context_path}/autocrud/expm.exp_expense_type_flag_filter/query?expense_report_type_id=${/parameter/@expense_report_type_id}&exp_report_header_id=${/parameter/@exp_report_header_id}&company_report_flag=Y&employee_id=${/parameter/@employee_id}');
                    }else{
                        $('exp_expense_type_ds').setQueryUrl('${/request/@context_path}/autocrud/expm.exp_expense_type_flag_filter/query?expense_report_type_id=${/parameter/@expense_report_type_id}&exp_report_header_id=${/parameter/@exp_report_header_id}&report_flag=Y&employee_id=${/parameter/@employee_id}');
                    }
                    $('exp_expense_type_ds').query();
                    
                }
                if (name == 'exp_req_item_name') {
                    $('exp_expense_item_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('exp_expense_item_ds').setQueryParameter('expense_type_id', record.get('expense_type_id'));
                    $('exp_expense_item_ds').setQueryParameter('exp_report_type_id', '${/model/head_data/record/@exp_report_type_id}');
                    $('exp_expense_item_ds').query();
                }
                if (name == 'unit_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('unit_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                }
                if (name == 'responsibility_center_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('responsibility_center_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                    f1.setLovPara('unit_id', record.get('unit_id'));
                }
                if (name == 'employee_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('employee_name');
                    var ds = $('exp_report_head');
                    var rd = ds.getAt(0);
                    f1.setLovPara('company_id', record.get('company_id'));
                    f1.setLovPara('employee_id', rd.get('employee_id'));
                }
                if (name == 'position_name') {
                    $('position_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('position_ds').setQueryParameter('employee_id', record.get('employee_id'));
                    $('position_ds').query();
                }
                if (name == 'payment_schedule_line_code') {
                    var meta = record.getMeta();
                    var field = meta.getField('payment_schedule_line_code');
                    if (!record.get('contract_header_id') || record.get('contract_header_id') == '') {
                        field.setLovService('');
                    } else {
                        field.setLovService('csh.csh_payment_schedule_lov');
                        field.setLovPara('contract_header_id', record.get('contract_header_id') || '');
                        field.setLovPara('currency_code', $('exp_report_head').getAt(0).get('exp_report_currency_code'));
                        field.setLovPara('partner_category', record.get('payee_category') || '');
                    }
                }
                if (name == 'contract_header_code') {
                    var meta = record.getMeta();
                    var field = meta.getField('contract_header_code');
                    field.setLovPara('currency_code', $('exp_report_head').getAt(0).get('exp_report_currency_code'));
                    field.setLovPara('partner_category', record.get('payee_category') || '');
                    field.setLovPara('partner_id', record.get('payee_id') || '');
                    field.setLovPara('company_id', record.get('company_id') || '');
                }
                if (name == 'period_name') {
                    var meta = record.getMeta();
                    var field = meta.getField('period_name');
                    if ('${/model/budget_control/record/@budget_control_enabled}' == 'N') {
                        field.setLovService('bgt.bgt_periods_detail_lov');
                    } else {
                        field.setLovService('expm.bgt_periods_detail_lov');
                    }
                }
                //add by Qu yuanyuan 2015-11-25 预算中心维度
/*                 if (name == 'd5') {
                    record.getMeta().getField('d5').setLovService('exp.EXP1010.fnd_unit_assign_bgt_centers_lov');
                    record.getMeta().getField('d5').setLovPara('unit_id', record.get('unit_id'));
                } */
                //end by Qu yuanyuan
                else {
                    record.getMeta().getField('d1').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d2').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d3').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d4').setLovPara('company_id', record.get('company_id'));
                    //record.getMeta().getField('d5').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d6').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d7').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d8').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d9').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d10').setLovPara('company_id', record.get('company_id'));
                    record.getMeta().getField('d11').setLovPara('company_id', record.get('company_id'));

                }
                // added by HM @2016-06-01 税率与进项结构明细的联动
                // if (name == 'input_tax_struc_detail_desc') {
                // if (record.get('special_invoice') == 'Y') {
                // $('vat_input_tax_structure_detail_ds').setQueryParameter('tax_rate', Number(record.get('tax_rate')));
                // $('vat_input_tax_structure_detail_ds').query();
                // }
                // }
                if(name == 'line_vender_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('line_vender_name');
                    f1.setLovPara('exp_report_type_code', $('exp_report_head').getAt(0).get('exp_report_type_code'));
                }
            }

            function headcommitpayee(lov, r1, r2) {

                var payee_category = r1.get('exp_report_payee_category')
                if (payee_category == null || payee_category == undefined || payee_category == '') {
                    return;
                } else if (payee_category == 'EMPLOYEE') {
                    r1.set('exp_report_payee_id', r2.get('employee_id'));
                } else if (payee_category == 'VENDER') {
                    r1.set('exp_report_payee_id', r2.get('vender_id'));
                } else {
                    r1.set('exp_report_payee_id', r2.get('customer_id'));
                }
            }

            function lineremove(dataset, record, index) {

                var exp_report_header_id = record.get("exp_report_header_id");
                Aurora.request({
                    url: /*${/request/@context_path}/autocrud/expm.exp_report_pmt_schedule_report/execute*/
                    $('exp_report_pmt_schedule_report_link').getUrl(),
                    para: {
                        'exp_report_header_id': exp_report_header_id
                    },
                    success: function(res) {},
                    scope: this
                });
            }

            function pmtlineupdate(dataSet, record, name, value, oldvalue) {
                save = false;
               // if (name == 'payee_type') {
                 if (name=='payee_type_value'){
                    //add by lq 若选择了收款类型为员工，则先自动带出该员工本人
                    //var payee_type_value=record.get('payee_type_value');
                    if (value=='EMPLOYEE'){
                    record.set('payee_partner_name', '${/model/pay_name/record/@description}');
                    record.set('payee_id', '${/model/pay_name/record/@id}');
                    record.set('account_number', '${/model/pay_name/record/@account_number}');
                    record.set('account_number_hide', '${/model/pay_name/record/@account_number_hide}');
                    record.set('account_name', '${/model/pay_name/record/@account_name}');
                    record.set('bank_code', '${/model/pay_name/record/@bank_code}');
                    record.set('bank_name', '${/model/pay_name/record/@bank_name}');
                    record.set('bank_location_code', '${/model/pay_name/record/@bank_location_code}');
                    record.set('bank_location_name', '${/model/pay_name/record/@bank_location_name}');
                    record.set('province_code', '${/model/pay_name/record/@province_code}');
                    record.set('province_name', '${/model/pay_name/record/@province_name}');
                    record.set('city_code', '${/model/pay_name/record/@city_code}');
                    record.set('city_name', '${/model/pay_name/record/@city_name}');
                    }else{
		              //end add
                    record.set('payee_partner_name', '');
                    record.set('payee_id', '');
                    record.set('account_number', '');
                    record.set('account_number_hide', '');
                    record.set('account_name', '');
                    record.set('bank_code', '');
                    record.set('bank_name', '');
                    record.set('bank_location_code', '');
                    record.set('bank_location_name', '');
                    record.set('province_code', '');
                    record.set('province_name', '');
                    record.set('city_code', '');
                    record.set('city_name', '');
                    }
                }else if (name == 'payee_partner_name') {
                    if (value == '') {
                        record.set('payee_id', '');
                    }else if(value=='代扣代缴个人所得税'){
                        //付款方式为委托收款
                        record.set('payment_method_code','30');
                        record.set('usedes','80');
                        //pay_method_used
                        record.set('payment_method','${/model/pay_method_used/record/@pay_method_desc}');
                        record.set('payment_type_id','${/model/pay_method_used/record/@payment_type_id}');
                        record.set('cash_flow_item_id','${/model/pay_method_used/record/@cash_flow_item_id}');
                        record.set('usedes_name','${/model/pay_method_used/record/@usedes_name}');
                    }
                    
                    //add by lyt 2018.12.17 收款方为S类型的供应商时，银行附言为必输。HGI账套不使用银行附言    
                    if(record.get('vender_type_code')=='S' && '${/model/account_set/record/@account_set}'!=1){
                     record.getField('bank_statement').setRequired(true);
                    }else{
                     record.getField('bank_statement').setRequired(false);   
                    }
                    
                }
                if (name == 'contract_header_id' || name == 'payee_type' || name == 'payee_partner_name') {
                    if (name == 'payee_type' || name == 'payee_partner_name') {
                        record.set('contract_number', '');
                        record.set('contract_header_id', '');
                    }
                    record.set('payment_sch_line_id', '');
                    record.set('line_number', '');
                }

                if (name == 'schedule_due_date') {
                    // var expDate = $('exp_report_head').getAt(0).get('exp_report_data');
                    // var scheduleDueDate = $('pmtplan_schedules_ds').getCurrentRecord().get('schedule_due_date');
                    // var scd = new Date(scheduleDueDate);
                    // var scdF = scd.format('yyyy-mm-dd');
                    // if(expDate > scdF){
                    // canSave = false;
                    // }
                    // if(expDate <= scdF){
                    // canSave = true;
                    // }
                }
            }

            function rendererPrimPosition(value, record, name) {
                if (record.get('position_primary') == null) {
                    return value;
                } else {
                    record.set('position_name', record.get('position_primary'));
                    record.set('position_id', record.get('position_id'));
                    return value;
                }


            }
            
            function operationFrozenColumn() {
                var count = 0;
                var count1 =0;
               /*  debugger; */
                var lineData = $('exp_report_lines').getAll();
                for(var i = 0;i < lineData.length;i++) {
                    //add by lq 20180921 判断行上是否存在手机费费用项目
                    // var exp_req_item_id=lineData[i].get('exp_req_item_id');
                    // Aurora.request({
                            // url: $('get_item_check_link').getUrl(),
                            // para: {
                                // exp_req_item_id: exp_req_item_id
                            // },
                            // success: function(res) {
                                // if(res.result.record.expense_item_code=='666666'){
                                    // count1++;
                                 // if (count1>0){
                                     // $('grid').showColumn('month_quantity');
                                 // }else{
                                // $('grid').hideColumn('month_quantity');
                                 // }
                                // }else{
                                // $('grid').hideColumn('month_quantity');     
                                 // }
                            // },
                            // scope: this
                        // });
                    //end add
                    if(lineData[i].get('rush_flag') == 'Y') {
                        count++;
                    }
                }
                if(count > 0) {
                    var pmtData = $('pmtplan_schedules_ds').getAll();
                    for(var i = 0;i < pmtData.length;i++) {
                        pmtData[i].set('frozen_flag','N');
                    }
                    $('pmt_grid').hideColumn('frozen_flag');
                }else{
                    $('pmt_grid').showColumn('frozen_flag');
                }
            }

            function lineupdate(dataSet, record, name, value, oldvalue) {
                save = false;
                //add by HJ
                var rd = $('exp_report_head').getAt(0);
                var vat_special_invoice_include = rd.get('vat_special_invoice_include');
                var special_invoice = record.get('special_invoice');
                var einvoice_flag = record.get('einvoice_flag');
                var exp_report_currency_code = rd.get('exp_report_currency_code');
                //add by lq 20180914 资产采购类报销单选择费用项目，费用项目为可验收类费用项目的时候，才显现尾款行
                var exp_report_type_code=rd.get('exp_report_type_code');
                var exp_req_item_id=record.get('exp_req_item_id');
                var exp_req_item_name=record.get('exp_req_item_name');
                //add by wxj 20180918 根据费用项目的急速标识隐藏付款行的分期付款
                operationFrozenColumn();
                if(name=='exp_req_item_id'||name=='month_quantity'){
                     Aurora.request({
                            url: $('get_item_check_link').getUrl(),
                            para: {
                                exp_req_item_id: exp_req_item_id
                            },
                            success: function(res) {
                                if(res.result.record.expense_item_code=='666666'){
                                     $('grid').showColumn('month_quantity');
                                     record.getField('month_quantity').setRequired(true);
                                }else if(res.result.record.expense_item_code=='106001'){
                                    $('grid').showColumn('month_quantity');
                                     record.getField('month_quantity').setRequired(true);
                                }else{
                                 $('grid').hideColumn('month_quantity'); 
                                 record.getField('month_quantity').setRequired(false);
                                }
                            },
                            scope: this
                        });
                }
                //add by lyt2019.8.28持卡人变化时，带出预算中心和成本中心
                if(name=='hgi_employee_id'){
                     Aurora.request({
                            url: $('get_ae_employee_unit_responseibility_link').getUrl(),
                            sync:true,
                            para: {
                                company_id:rd.get('company_id'),
                                employee_id:record.get('hgi_employee_id')
                            },
                            success: function(res) {
                                var result2=res.result.record;
                                if(typeof result2!='undefined'){
                               record.set('responsibility_center_id', res.result.record.responsibility_center_id);
                               record.set('responsibility_center_name', res.result.record.responsibility_center_name);
                               record.set('unit_id', res.result.record.unit_id);
                               record.set('unit_name', res.result.record.responsibility_center_name);
                                }
                            },
                            scope: this
                        });                    
                }
                //end add
                //add by lq 20190530 HGI Corporate Card报销单 AE编号和AE员工必输
                if(exp_report_type_code=='HGIBX0100'){
                    record.getField('ae_number').setRequired(true);
                    record.getField('ae_number_hide').setRequired(true);
                    record.getField('ae_employee').setReadOnly(true);
                    record.getField('hgi_employee').setRequired(true);
                }
                //end add
                //add by lq 20180920 招待费用报销单：根据费用项目判断数据是取客户人数+接待人数还是只取客户人数
                if(exp_report_type_code=='BX0020'){
                    record.getField('receptionist_desc').setReadOnly(true);
                    record.getField('receptionist_date').setRequired(true);
                    //设置我方最高级别接待人 默认为报销人，不可修改
                    var headrecord = $('exp_report_head').getAt(0);
                    var employee_id = headrecord.get('employee_id');
                    var employee_name = headrecord.get('name');
                    record.set('receptionist_desc', employee_name)
                    record.set('receptionist', employee_id);
                    var cust='${/model/object_col/record/@cus_id}';
                    var accept='${/model/object_col/record/@accept_id}';
                    if(name == cust || name == accept||name=='exp_req_item_id'||name=='receptionist'||name=='report_amount'){
                     if(exp_req_item_id){
                       //add 取费用对象动态列的列名
                       var cust_number=Number(record.get(cust));//客户人数
                       var accep_number=Number(record.get(accept));//接待人数
                       cust_number = cust_number ? cust_number : 0;
                       accep_number = accep_number ? accep_number : 0;
                       Aurora.request({
                            url: $('get_item_check_link').getUrl(),
                            para: {
                                exp_req_item_id: exp_req_item_id
                            },
                            success: function(res) {
                                // alert(res.result.record.expense_item_code);
                                if(res.result.record.expense_item_code=='130101' || res.result.record.expense_item_code=='151001' || res.result.record.expense_item_code=='130103'){
                                    var c_number=isNaN(cust_number+accep_number)? '' : (cust_number+accep_number);//餐饮类=客户人数FY0090+接待人数FY0092
                                    record.set('primary_quantity', c_number);
                                    lineInfoInit(record);
                                }else if(res.result.record.expense_item_code=='130102'|| res.result.record.expense_item_code=='151002'|| res.result.record.expense_item_code=='130303'|| res.result.record.expense_item_code=='150703'){
                                    var c_number=cust_number;//礼品=客户人数FY0090
                                    record.set('primary_quantity', c_number);
                                    lineInfoInit(record);
                                }else if(res.result.record.expense_item_code=='130199'||res.result.record.expense_item_code=='151099'){
                                    var c_number=cust_number;//其它商务活动=客户人数FY0090
                                    record.set('primary_quantity', c_number);
                                    lineInfoInit(record);
                                }
                                
                            },
                            scope: this
                        });
                       //end add
                     }
                 }
                 if(name == 'expense_type_id') {
                    var teamBuildFlag = 'N';
                    var cus_id='${/model/object_col/record/@cus_id}';
                    var expTypeCode = $('exp_expense_type_ds').getAll();
                    for(var i = 0;i < expTypeCode.length;i++) {
                        if (expTypeCode[i].get('expense_type_code') == '1610' && expTypeCode[i].get('expense_type_id') == value) {
                            teamBuildFlag = 'Y';
                        }
                    }
                    if (teamBuildFlag == 'Y') {
                    	record.getField(cus_id).setRequired(false);
                    	//先选日常业务招待的让后在选团队建设会将数量设置为undefined，这里直接置1
                        record.set('primary_quantity',1);
                    }else{
                        record.getField(cus_id).setRequired(true);
                    }
                }
                }else{
                    record.getField('receptionist_desc').setRequired(false);
                    record.getField('receptionist_date').setRequired(false);
                }
                //end add
                
                //ADD BY LQ 20180925
                if(exp_report_type_code=='BX9007'){
                    $('grid').showColumn('abroad_flag');
                }else{
                    $('grid').hideColumn('abroad_flag');
                }
                if(exp_report_type_code == 'BX0050') {
                    record.getField('line_vender_name').setRequired(true);//wxj
                }
                //end add
                //if(exp_report_type_code=='BX0050'){
                    if(exp_req_item_id){
                       Aurora.request({
		           url: $('acceptance_flag_query_link').getUrl(),
		           para: {
		                  exp_req_item_id: exp_req_item_id
		                  },
		           success: function(resp,options){
		               var acceptance_flag=resp.result.record.acceptance_flag;
		               if(acceptance_flag=='Y'){
		                    $('grid').showColumn('financial_pay_amount');
		                    $('grid').showColumn('acceptance_doc');
		               }
		               else{
		                   $('grid').hideColumn('financial_pay_amount');
		                   $('grid').hideColumn('acceptance_doc');
		               }
		               
		            },
		          scope: this
		         });  
                    }
               // }
                else{
                    $('grid').hideColumn('financial_pay_amount');
		            $('grid').hideColumn('acceptance_doc');
                }
                //end add
                //add by lq 20180831 选择币种带出汇率，汇率类型，标价方式等
                if(exp_report_currency_code=='OTHER'){
                  record.getField('currency_name').setRequired(true);
                if(name=='currency_code'){
                  // var head_currency=re.get('currency_code');
                    var currency_code=record.get('currency_code');
                    var fun_currency='${/model/currency_code_path/record/@functional_currency_code}';
                    Aurora.request({
		           url: $('rate_query_link').getUrl(),
		           para: {
		                  to_currency: currency_code,
		                  fun_currency:fun_currency
		                  },
		           success: function(resp,options){
		               if (resp.result.record != undefined) {
		               var from_currency=resp.result.record.from_currency;
		               var to_currency=resp.result.record.to_currency;
		               var exchange_rate_type=resp.result.record.currency_type_code;
		               var conversion_rate=resp.result.record.conversion_rate;
		               var currency_volume=resp.result.record.currency_volume;
		               var exchange_rate_quotation=resp.result.record.exchange_rate_quotation;
		               var conversion_date=resp.result.record.conversion_date;
		               var period_name=resp.result.record.period_name;
		               getExchangeRateByQuo1(from_currency,to_currency,conversion_date,period_name,exchange_rate_type,exchange_rate_quotation,record)
		               }else{
		                   //没有维护汇率，置空 add by wxj 20190108
		                   record.set('exchange_rate','');
		               }
		            },
		          scope: this
		         });
                }}
                //en add
                if (vat_special_invoice_include == 'N') {
                    record.getField('invoice_type_desc').setRequired(false);
                    record.getField('invoice_number').setRequired(false);
                    record.getField('invoice_status_desc').setRequired(false);
                    record.getField('invoice_code').setRequired(false);
                    record.getField('invoice_date').setRequired(false);
                    record.getField('tax_amount').setRequired(false);
                    record.getField('tax_rate').setRequired(false);

                }
                if (name == 'company_name') {
                    record.set('unit_id', '');
                    record.set('unit_name', '');
                    record.set('responsibility_center_id', '');
                    record.set('responsibility_center_name', '');
                    record.set('position_id', '');
                    record.set('position_name', '');
                    record.set('employee_id', '');
                    record.set('employee_name', '');
                    record.set('exp_req_item_id', '');
                    record.set('exp_req_item_name', '');
                    record.set('expense_type_name', '');
                    record.set('expense_type_id', '');
                    if (record.get('flag') == 1) {
                        record.set('d1', '');
                        record.set('d2', '');
                        record.set('d3', '');
                        record.set('d4', '');
                        record.set('d5', '');
                        record.set('d6', '');
                        record.set('d7', '');
                        record.set('d8', '');
                        record.set('d9', '');
                        record.set('d10', '');
                        record.set('d11', '');
                    }
                    record.set('flag', 1);
                    return;
                } else if (name == 'expense_type_name') {
                    record.set('exp_req_item_name', '');
                    record.set('exp_req_item_id', '');
                } else if (name == 'employee_name' || name == 'employee_id') {
                    record.set('position_id', '');
                    record.set('position_name', '');
                    return;
                } else if (name == 'primary_quantity' || name == 'report_amount') {
                    var quotation = $('exp_report_head').getAt(0).get('exp_report_rate_quotation');


                    var a = record.get('report_amount');
                    var b = record.get('primary_quantity');
                    if (quotation == 'DIRECT QUOTATION') {
                        record.set('price', isNaN(a / b) ? '' : (a / b).toFixed('${/model/precision/record/@precision}'));
                        //add by HJ
                        record.set('report_functional_amount', a);

                    } else {
                        record.set('price', isNaN(a / b) ? '' : (a / b).toFixed('${/model/precision/record/@precision}'));
                        //add by HJ
                        record.set('report_functional_amount', a);

                    }
                    //不含税金额
                    var report_amount = record.get('report_amount');
                    var tax_amount = record.get('tax_amount');
                    var special_invoice = record.get('special_invoice');
                    if (special_invoice == 'Y') {
                        record.set('sale_amount', isNaN((Number(report_amount) - Number(tax_amount)).toFixed('${/model/precision/record/@precision}')) ? '' : (Number(report_amount) - Number(tax_amount)).toFixed('${/model/precision/record/@precision}'));
                    } else {
                        record.set('sale_amount', report_amount);
                    }
                    //清空税额
                    record.set('tax_amount', null);
                    //算税率
                    // var sale_amount = record.get('sale_amount');
                    // if (sale_amount == 0 || Aurora.isEmpty(sale_amount)) {
                    // record.set('tax_rate', null);
                    // } else {
                    // record.set('tax_rate', isNaN(tax_amount / sale_amount) ? '' : (tax_amount / sale_amount).toFixed('${/model/precision/record/@precision}'));
                    // }

                    // headAmountChanged();
                    // return;

                } else if (name == "tax_rate") {
                    record.set('input_tax_struc_detail_desc', null);
                    var report_amount = record.get('report_amount');
                    var invoice_type = record.get('invoice_type');
                    record.set('tax_amount', isNaN(Number(report_amount).toFixed(2)) ? '' : (Number(report_amount) / (1 + Number(value) / 100) * Number(value) / 100).toFixed(2));
                    var tax_amount = record.get('tax_amount');
                    if (invoice_type != '20' && !Aurora.isEmpty(invoice_type)) {
                        record.set('sale_amount', isNaN((Number(report_amount) - (Number(report_amount) / (1 + Number(value) / 100) * Number(value) / 100).toFixed(2)).toFixed('${/model/precision/record/@precision}')) ? '' : (Number(report_amount) - (Number(report_amount) / (1 + Number(value) / 100) * Number(value) / 100).toFixed(2)).toFixed('${/model/precision/record/@precision}'));
                    } else {
                        record.set('sale_amount', report_amount);
                    }
                    /* var sale_amount = record.get('sale_amount');
                     record.set('tax_rate', Math.round(Number(value) * 100 / Number(sale_amount))); */
                    $('vat_input_tax_structure_detail_ds').setQueryParameter('tax_rate', value);
                    $('vat_input_tax_structure_detail_ds').query();
                } else if (name == "tax_amount") {
                    var report_amount = record.get('report_amount');
                    var special_invoice = record.get('special_invoice');
                    if (special_invoice == 'Y') {
                        record.set('sale_amount', isNaN((Number(report_amount) - Number(value)).toFixed('${/model/precision/record/@precision}')) ? '' : (Number(report_amount) - Number(value)).toFixed('${/model/precision/record/@precision}'));
                    } else {
                        record.set('sale_amount', report_amount);
                    }
                    // var sale_amount = record.get('sale_amount');
                    // if (sale_amount == 0 || Aurora.isEmpty(sale_amount)) {
                    // record.set('tax_rate', null);
                    // } else {
                    // record.set('tax_rate', isNaN(value / sale_amount) ? '' : (value / sale_amount).toFixed('${/model/precision/record/@precision}'));
                    // }
                } else if (name == 'date_from' || name == 'date_to') {
                    record.validate((name == 'date_from') ? 'date_to' : 'date_from');
                }
                //add by Qu yuanyuan 根据部门带出成本中心和预算中心
                else if (name == 'unit_id') {

                    var unit_id = record.get('unit_id');
                    if (unit_id) {
                        /* record.getMeta().getField('d5').setLovService('exp.EXP1010.fnd_unit_assign_bgt_centers_lov');
                        record.getMeta().getField('d5').setLovPara('unit_id', unit_id); */
                        Aurora.request({
                            url: "${/request/@context_path}/autocrud/exp.EXP1010.fnd_unit_assign_bgt_centers_lov/execute",
                            scope: this,
                            para: {
                                unit_id: unit_id
                            },
                            success: function(ret) {
                                if (ret.result.dimension_value_id) {
                                    record.set('d5', ret.result.description);
                                    record.set('e5', ret.result.dimension_value_id);

                                } else {
                                    record.set('d5', '');
                                    record.set('e5', '');;
                                }
                            }
                        });
                    }
                }
                //end by Qu yuanyuan
                if (name == 'contract_header_id' || name == 'payee_category_name' || name == 'payee_name') {
                    if (name == 'payee_category_name' || name == 'payee_name') {
                        record.set('contract_header_code', '');
                        record.set('contract_header_id', '');
                    }
                    record.set('payment_schedule_line_id', '');
                    record.set('payment_schedule_line_code', '');
                }

                if (name == 'city' || name == 'place_type_id' || name == 'place_id' || name == 'exp_req_item_id' || name == 'position_id'||name =='receptionist'||name=='primary_quantity') {
                    lineInfoInit(record);
                }
                if (name == "invoice_type") {
                    //add by HJ
                    //record.set('report_amount', null);
                    record.set('tax_amount', null);
                    record.set('usage_type', null);
                    record.set('tax_rate', null);
                    //record.set('sale_amount', null);
                    record.set('invoice_date', null);
                    record.set('invoice_code', null);
                    record.set('invoice_number', null);
                    if (einvoice_flag == 'Y' && special_invoice == 'N') {
                        record.getField('invoice_number').setRequired(true);
                        record.getField('invoice_number').setReadOnly(false);
                        record.getField('invoice_code').setRequired(true);
                        record.getField('invoice_code').setReadOnly(false);
                        record.getField('invoice_date').setRequired(false);
                        //add by HJ
                        record.getField('invoice_date').setReadOnly(true);
                        record.getField('tax_rate').setReadOnly(true);
                        record.getField('tax_rate').setRequired(false);
                        record.getField('tax_amount').setReadOnly(true);
                        record.getField('tax_amount').setRequired(false);
                    }
                    if (einvoice_flag == 'N' && special_invoice == 'Y') {
                        var invoice_number_length_limit = record.get('invoice_number_digit');
                        var invoice_code_length_limit = record.get('invoice_code_digit');
                        if (undefined != invoice_code_length_limit && invoice_code_length_limit != '0') {
                            record.getField('invoice_code').setRequired(true);
                            record.getField('invoice_code').setReadOnly(false);
                        }
                        if (undefined == invoice_code_length_limit) {
                            record.getField('invoice_code').setRequired(true);
                            record.getField('invoice_code').setReadOnly(false);
                        }
                        if (invoice_code_length_limit == 0) {
                            record.getField('invoice_code').setRequired(false);
                            record.getField('invoice_code').setReadOnly(true);
                            record.getField('invoice_number').setRequired(true);
                            record.getField('invoice_number').setReadOnly(false);
                        }
                        if (undefined != invoice_number_length_limit && invoice_number_length_limit != '0') {
                            record.getField('invoice_number').setRequired(true);
                            record.getField('invoice_number').setReadOnly(false);
                        }
                        if (invoice_number_length_limit == 0) {
                            record.getField('invoice_number').setRequired(false);
                            record.getField('invoice_number').setReadOnly(true);
                        }
                        record.getField('invoice_date').setRequired(true);
                        record.getField('invoice_date').setReadOnly(false);
                        record.getField('tax_rate').setReadOnly(false);
                        record.getField('tax_rate').setRequired(true);
                        record.getField('tax_amount').setReadOnly(false);
                        record.getField('tax_amount').setRequired(true);
                    }
                    if (einvoice_flag == 'N' && special_invoice == 'N') {
                        record.getField('invoice_number').setRequired(false);
                        record.getField('invoice_number').setReadOnly(true);
                        record.getField('invoice_code').setRequired(false);
                        record.getField('invoice_code').setReadOnly(true);
                        record.getField('invoice_date').setRequired(false);
                        record.getField('invoice_date').setReadOnly(true);
                        record.getField('tax_rate').setReadOnly(true);
                        record.getField('tax_rate').setRequired(false);
                        record.getField('tax_amount').setReadOnly(true);
                        record.getField('tax_amount').setRequired(false);
                    }
                } else if (name == 'usage_type') {
                    // 红票金额为负
                    if (value == 'YT999') {
                        if (record.get('report_amount') > 0) {
                            record.set('report_amount', -record.get('report_amount'))
                        }
                        if (record.get('tax') > 0) {
                            record.set('tax', -record.get('tax'))
                        }
                        if (record.get('sale_amount') > 0) {
                            record.set('sale_amount', -record.get('sale_amount'))
                        }
                    } else {
                        if (record.get('report_amount') < 0) {
                            record.set('report_amount', -record.get('report_amount'))
                        }
                        if (record.get('tax') < 0) {
                            record.set('tax', -record.get('tax'))
                        }
                        if (record.get('sale_amount') < 0) {
                            record.set('sale_amount', -record.get('sale_amount'))
                        }
                    }
                }
                // added by HM @2016-06-01 税率变动时清空进项结构明细
                else if (name == 'tax_rate') {
                    record.set('input_tax_structure_detail', null);
                    //record.set('input_tax_struc_detail_desc', null);
                }
                   //更新发票号码代码后，重置发票状态  20180718
                if (name == 'invoice_code' || name == 'invoice_number') {
                    if (record.get('invoice_type') == '01') {
                        record.set('invoice_status_desc', '待认证');
                        record.set('invoice_status', '20');
                        record.set('authentication_time', '');
                    }
                }
                
                //add by HJ
                //add  by lq 20190613 根据部门范围判断费用对象配置的客户段是否隐藏
var headrecord1 = $('exp_report_head').getCurrentRecord();
 var exp_report_type_code=headrecord1.get('exp_report_type_code');
                    var unit_id=headrecord1.get('unit_id');
                    var company_id=headrecord1.get('company_id');

                 Aurora.request({
                    url: $('get_customer_check_link1').getUrl(),
                    para: {
                        exp_report_type_code: exp_report_type_code,
                        unit_id:unit_id,
                        company_id:company_id
                    },
                    success: function(res) {
                                if(res.result.record.counta>0){
                                    //add 取费用对象动态列的列名
                        Aurora.request({
                            url: $('get_object_check_link1').getUrl(),
                            para: {
                                customer_code: 'FY0080'
                            },
                            sync: true,
                            success: function(res) {
                                var customer_id=res.result.record.customer_id;
                               record.getField(res.result.record.customer_id).setRequired(false);
                            },
                            scope: this
                        });
                                    
                                }
                        }
                    
                });
                //end add
                setfunctionamount(record);
                headAmountChanged();
                
                /* var head_record=$('exp_report_head').getAt(0);
                var pmtplan_record=$('pmtplan_schedules_ds').getAt(0);
                
                var exp_report_number=head_record.get('exp_report_number');
                var exp_report_header_id=head_record.get('exp_report_header_id');
                
                Aurora.request({
                            url: $('get_pmtplan_record_amount').getUrl(),
                            para: {
                                exp_report_header_id: exp_report_header_id
                            },
                            sync: true,
                            success: function(res) {
                                //alert(res.result.record.amount);
                                if (pmtplan_record) {
                                	pmtplan_record.set('due_amount', res.result.record.amount);
                                }
                            },
                            scope: this
                        });	 */
            }

            function headAmountChanged() {
                var records = $('exp_report_lines').getAll();
                var lineAmount = 0;
                for (var i = 0;i < records.length;i++) {
                    // commented by HM @2016-06-06 不再赋予默认值
                    // if (isNaN(records[i].get('report_amount'))) {
                    // records[i].set('report_amount', '0');
                    // }
                    //var req_amount = parseFloat(records[i].get('report_amount'));
                    var req_amount = parseFloat(records[i].get('report_functional_amount'));
                    lineAmount += req_amount;
                }
                $('exp_report_head').getAt(0).set('sum_amount', lineAmount);

            }

            function removeLine() {
                headAmountChanged();
                index = index - 1;
                // initLineIndex = 0;
                // alert('删除一行后initLineIndex:' + initLineIndex);
                
                //更新linenumber by wxj 20180911
                updateLineNumber($('exp_report_lines').getAll());
            }

            function lineInfoInit(record) {
                //add by lyt 2019.4.26 业务招待类报销单个别员工对应不同费用政策
                var type_code=$('exp_report_head').getAt(0).get('exp_report_type_code');
                var info_url=$('exp_expense_policy_infoinit_link').getUrl();
                if(type_code=='BX0020'){
                    info_url=$('exp_expense_policy_infoinit_link2').getUrl();
                }
                
                if (record.get('employee_id')) {
                    record.set('p_rep_date', $('exp_report_head').getAt(0).get('exp_report_data'), true);
                    record.set('expense_item_id', record.get('exp_req_item_id'), true);
                    Aurora.request({
                        url: info_url,
                        para: record.data,
                        success: function(res) {
                            var lineinfo = res.result;
                            record.set('p_upper_limit', lineinfo['p_upper_limit'], true);
                            record.set('p_lower_limit', lineinfo['p_lower_limit'], true);
                            if (lineinfo['p_count'] == 1) {
                                record.set('p_event_name', lineinfo['p_event_name'], true);
                                record.set('p_commit_flag', lineinfo['p_commit_flag'], true);
                                record.set('p_changeable_flag', lineinfo['p_changeable_flag'], true);
                                record.set('p_id', lineinfo['p_id'], true);
                                if (lineinfo['p_default_flag'] == 'Y' && record.isNew) {
                                    //record.set('price', lineinfo['p_expense_standard'], true)
                                }
                            } else {
                                record.set('p_changeable_flag', lineinfo['p_changeable_flag'], true);
                            }
                            if (record.get('p_changeable_flag') && record.get('p_changeable_flag') == 'N') {
                                record.getMeta().getField('price').setReadOnly(true);
                            } else {
                                record.getMeta().getField('price').setReadOnly(false);
                            }
                        },
                        scope: this
                    });
                }
            }

            function createLineRecord() {
                $('grid').hideColumn('benefit_editor'); //add by wanghongyue 加载时隐藏字段              
                //add by zhaofan 头上专票不勾选，新增行，点保存提示必输Start
                var header = $('exp_report_head').getAt(0);
                var vat_special_invoice_include = header.get('vat_special_invoice_include');
                //add by zhaofan 头上专票不勾选，新增行，点保存提示必输End
                var ds = $('exp_report_lines');
                var linerecord = ds.getSelected();
                var lineIndex = index + initLineIndex;
                // alert('新增一行时lineIndex: ' + lineIndex + '--index: ' + index + '--initLineIndex: ' + initLineIndex);
                if (linerecord.length == 0) {
                    ds.create();

                    var records = ds.getAll();

                    for (i = 0;i < records.length - 1;i++) {
                        records[i].set('flag', 1);
                    }
                    var lrecord = ds.getAt(lineIndex - 1);

                    setinitdata(ds, lrecord, lineIndex);
                } else {
                    for (i = 0;i < linerecord.length;i++) {
                        var data = linerecord[i].data;
                        var newdata = {};
                        var len = ds.getAll().length;
                        for (var name in data) {
                            newdata[name] = data[name];
                        }
                        var record = new Aurora.Record(newdata);
                        record.isNew = 'true';
                        record.dirty = 'false';
                        var reportAmount = record.data['report_amount'];
                        // record.data['report_amount'] = 0;	commented by HM @2016-06-06 不再赋予默认值
                        ds.add(record);
                        record.set('report_amount', reportAmount);
                        lineNum = (index + initLineIndex) * 1;
                        var lineRecord = ds.getAt(len);
                        lineRecord.set('line_number', lineNum);
                        lineRecord.set('exp_report_line_id', '');
                        index = index + 1;
                        //add by zhaofan 头上专票不勾选，新增行，点保存提示必输Start
                        if (vat_special_invoice_include == 'N') {
                            record.getField('invoice_type_desc').setRequired(false);
                            record.getField('invoice_number').setRequired(false);
                            record.getField('invoice_status_desc').setRequired(false);
                            record.getField('invoice_code').setRequired(false);
                            record.getField('invoice_date').setRequired(false);
                            record.getField('tax_amount').setRequired(false);
                            record.getField('tax_rate').setRequired(false);
                            //record.getField('usage_type_desc').setRequired(false);
                            //record.getField('usage_type_desc').setReadOnly(true);
                            //record.getField('input_tax_struc_detail_desc').setRequired(false);
                            //record.getField('input_tax_struc_detail_desc').setReadOnly(true);
                            record.set('invoice_date', null);
                            record.set('invoice_code', null);
                            record.set('usage_type', null);
                            //record.set('usage_type_desc', null);
                            record.set('invoice_status', null);
                            record.set('invoice_status_desc', null);
                            record.set('input_tax_structure_detail', null);
                            //record.set('input_tax_struc_detail_desc', null);
                            record.set('tax_amount', null);
                            //record.set('sale_amount', null);
                            record.set('tax_rate', null);
                            // lineRecord.getField('invoice_type_desc').setRequired(false);
                            // lineRecord.getField('invoice_number').setRequired(false);
                            // lineRecord.getField('invoice_status_desc').setRequired(false);
                            // lineRecord.getField('invoice_code').setRequired(false);
                            lineRecord.getField('invoice_date').setRequired(false);
                            // lineRecord.getField('tax_amount').setRequired(false);
                            // //lineRecord.getField('usage_type_desc').setRequired(false);
                            // //lineRecord.getField('input_tax_struc_detail_desc').setRequired(false);
                            // //lineRecord.getField('input_tax_struc_detail_desc').setReadOnly(true);
                        }
                        //add by HJ
                        if (vat_special_invoice_include == 'Y') {
                            var special_invoice = record.get('special_invoice');
                            var einvoice_flag = record.get('einvoice_flag');
                            if (einvoice_flag == 'Y' && special_invoice == 'N') {
                                record.getField('invoice_number').setRequired(true);
                                record.getField('invoice_number').setReadOnly(false);
                                record.getField('invoice_code').setRequired(true);
                                record.getField('invoice_code').setReadOnly(false);
                                record.getField('tax_rate').setReadOnly(true);
                                record.getField('tax_rate').setRequired(false);
                                record.getField('tax_amount').setReadOnly(true);
                                record.getField('tax_amount').setRequired(false);
                            }
                            if (einvoice_flag == 'N' && special_invoice == 'Y') {
                                var invoice_number_length_limit = record.get('invoice_number_digit');
                                var invoice_code_length_limit = record.get('invoice_code_digit');
                                if (undefined != invoice_code_length_limit && invoice_code_length_limit != '0') {
                                    record.getField('invoice_code').setRequired(true);
                                    record.getField('invoice_code').setReadOnly(false);
                                }
                                if (undefined == invoice_code_length_limit) {
                                    record.getField('invoice_code').setRequired(true);
                                    record.getField('invoice_code').setReadOnly(false);
                                }
                                if (invoice_code_length_limit == 0) {
                                    record.getField('invoice_code').setRequired(false);
                                    record.getField('invoice_code').setReadOnly(true);
                                    record.getField('invoice_number').setRequired(true);
                                    record.getField('invoice_number').setReadOnly(false);
                                }
                                if (undefined != invoice_number_length_limit && invoice_number_length_limit != '0') {
                                    record.getField('invoice_number').setRequired(true);
                                    record.getField('invoice_number').setReadOnly(false);
                                }
                                if (invoice_number_length_limit == 0) {
                                    record.getField('invoice_number').setRequired(false);
                                    record.getField('invoice_number').setReadOnly(true);
                                }
                                record.getField('invoice_date').setRequired(true);
                                record.getField('invoice_date').setReadOnly(false);
                                record.getField('tax_rate').setReadOnly(false);
                                record.getField('tax_rate').setRequired(true);
                                record.getField('tax_amount').setReadOnly(false);
                                record.getField('tax_amount').setRequired(true);
                            }
                            if (einvoice_flag == 'N' && special_invoice == 'N') {
                                record.getField('invoice_number').setRequired(false);
                                record.getField('invoice_number').setReadOnly(true);
                                record.getField('invoice_code').setRequired(false);
                                record.getField('invoice_code').setReadOnly(true);
                                record.getField('tax_rate').setReadOnly(true);
                                record.getField('tax_rate').setRequired(false);
                                record.getField('tax_amount').setReadOnly(true);
                                record.getField('tax_amount').setRequired(false);
                            }
                        }
                        //add by zhaofan 头上专票不勾选，新增行，点保存提示必输End
                    }
                }
                headAmountChanged();
            }

            function setpmtinitdata(ds, record, index) {
                //alert(1);
                var header = $('exp_report_head').getAt(0);
                var payee_category = header.get('exp_report_payee_category');
                //add by HJ
                var bank_record = $('exp_report_lines').getAt(0);
                if (payee_category == 'EMPLOYEE') {
                    records = $('exp_employee_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('exp_employee_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                } else if (payee_category == 'VENDER') {
                    records = $('pur_vender_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('pur_vender_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                } else {
                    records = $('ord_customer_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('ord_customer_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                }
                record.set('currency', header.get('exp_report_currency_code'));
                record.set('schedule_start_date', header.get('exp_report_data'));
                record.set('schedule_due_date', pmt_schedule_due_date);
                record.set('currency_name', header.get('exp_report_currency_name'));
                record.set('exp_report_header_id', header.get('exp_report_header_id'));
                record.set('usedes', header.get('usedes'));
                record.set('usedes_name', header.get('usedes_name'));
                
                //record.set('due_amount', header.get('due_amount'));
                
                record.set('payee_type', header.get('exp_report_payee_category_name'));
                record.set('payee_type_value', header.get('exp_report_payee_category'));
                /* record.set('payee_partner_name', header.get('exp_report_payee_name'));
                record.set('payee_id', header.get('exp_report_payee_id')); */
                //add by HJ
                /* record.set('account_number', bank_record.get('account_number'));
                record.set('account_name', bank_record.get('account_name')); */
                record.set('bank_code', bank_record.get('bank_code'));
                record.set('bank_name', bank_record.get('bank_name'));
                record.set('bank_location_code', bank_record.get('bank_location_code'));
                record.set('bank_location_name', bank_record.get('bank_location'));
                record.set('province_code', bank_record.get('province_code'));
                record.set('province_name', bank_record.get('province_name'));
                record.set('city_code', bank_record.get('city_code'));
                record.set('city_name', bank_record.get('city_name'));

                record.set('payment_method', header.get('exp_report_payment_method'));
                record.set('payment_type_id', header.get('payment_method_id'));

                //add by Qu yuanyuan 20151202
                var gather_flag_records = $('gather_flag_ds').getAll();
                for (var i = 0;i < gather_flag_records.length;i++) {
                    if (gather_flag_records[i].get('code_value') == '1') {
                        record.set('gather_flag', gather_flag_records[i].get('code_value'));
                        record.set('gather_flag_desc', gather_flag_records[i].get('code_value_name'));
                        break;
                    }
                }
                //end by Qu yuanyuan
                 //payment_method add by lq 20180925 若单据头币种非人民币和混合币种的时候，不允许修改付款方式,且付款方式默认外币支付
                var head_record=$('exp_report_head').getAt(0);
                var functional_currency_code='${/model/currency_code_path/record/@functional_currency_code}';
                var head_currency_code=head_record.get('exp_report_currency_code');
                //add by lq 20190820 香港除外
                var hgi_count='${/model/account_set/record/@account_set}';
                     if (head_currency_code==functional_currency_code||head_currency_code=='OTHER'||hgi_count!=0){
                    record.getField('payment_method').setReadOnly(false);
                    
                }else{
                    record.getField('payment_method').setReadOnly(true);
                    record.set('payment_method', '外币支付');
                    record.set('payment_method_code', 'OTHER_CURRENCY');
                     }
                //end add
            }

            function setinitdata(dataSet, record, lineIndex) {

                if (initFlag == 2) return;
                var header = $('exp_report_head').getAt(0);
                var selectedLines = $('exp_report_lines').getSelected();

                var payee_category = header.get('exp_report_payee_category');
                var vat_special_invoice_include = header.get('vat_special_invoice_include');
                if (vat_special_invoice_include == 'Y') {
                    record.getField('invoice_type_desc').setRequired(true);
                    record.getField('invoice_number').setRequired(true);
                    record.getField('invoice_status_desc').setRequired(true);
                    record.getField('invoice_code').setRequired(true);
                    record.getField('invoice_date').setRequired(true);
                    record.getField('tax_amount').setRequired(true);
                    record.getField('tax_amount').setReadOnly(false);
                    //record.getField('usage_type_desc').setRequired(true);
                    //record.getField('usage_type_desc').setReadOnly(false);
                    //record.getField('input_tax_struc_detail_desc').setRequired(true);
                    //record.getField('input_tax_struc_detail_desc').setReadOnly(false);
                    /*  record.set('tax_amount', 0);
                     record.getField('tax_amount').setReadOnly(false);  */
                }
                if (vat_special_invoice_include == 'N') {
                    record.getField('invoice_type_desc').setRequired(false);
                    record.getField('invoice_number').setRequired(false);
                    record.getField('invoice_status_desc').setRequired(false);
                    record.getField('invoice_code').setRequired(false);
                    record.getField('invoice_date').setRequired(false);
                    record.getField('tax_amount').setRequired(false);
                    //record.getField('usage_type_desc').setRequired(false);
                    //record.getField('usage_type_desc').setReadOnly(true);
                    //record.getField('input_tax_struc_detail_desc').setRequired(false);
                    //record.getField('input_tax_struc_detail_desc').setReadOnly(true);
                    record.set('invoice_date', null);
                    record.set('invoice_code', null);
                    record.set('usage_type', null);
                    //record.set('usage_type_desc', null);
                    record.set('invoice_status', null);
                    record.set('invoice_status_desc', null);
                    record.set('input_tax_structure_detail', null);
                    //record.set('input_tax_struc_detail_desc', null);
                    record.set('tax_amount', null);
                    //record.set('sale_amount', null);
                    record.set('tax_rate', null);
                }
                var records = $('exp_report_head').getAll();

                if ($('exp_report_lines').getAll().length != 0) {
                    // lineNum = lineNum + 1;
                    lineNum = lineIndex * 1;
                    record.set('line_number', lineNum);
                    index = index + 1;
                }
                // record.set('primary_quantity', 1);  commented by HM @2016-06-06 不再赋予默认值
                //alert(header.get('company_id'));
                
                
                record.set('company_id', header.get('company_id'));
                record.set('company_name', header.get('company_name'));
                //add by lq 20190821 判断如果Corporate Card Claims报销单则费用行自动带出AENO
                if(header.get('exp_report_type_code')=='HGIBX0100'){
                    var employee_id=$('exp_report_head').getAt(0).get('employee_id');
                    var employee_name=$('exp_report_head').getAt(0).get('employee_name');
                    record.set('hgi_employee_id', employee_id);
                    record.set('hgi_employee', employee_name);
                     Aurora.request({
                            url: $('ae_employee_link').getUrl(),
                            para: {
                                employee_id: employee_id
                            },
                            success: function(res) {
                                var account_number=res.result.record.account_number;
                                var account_name=res.result.record.account_name;
                                var account_number_hide=res.result.record.account_number_hide;
                                record.set('ae_number', res.result.record.account_number);
                                record.set('ae_number_hide', res.result.record.account_number_hide);
                                record.set('ae_employee_id', res.result.record.employee_id);
                                record.set('ae_employee', res.result.record.account_name);

                            },
                            scope: this
                        });
                // record.set('ae_number_hide', header.get('unit_id'));
                }
                //end add
                //add by lyt 2019.4.4 如果是信息科技类报销单 不自动带出预算中心 
                if(header.get('exp_report_type_code')!='BX0110'){
                record.set('unit_id', header.get('unit_id'));
                record.set('unit_name', header.get('unit_name'));
                }
				//XXX
				//获取头 单据类型，部门信息
				//alert(exp_report_type_name);
				var unit_name = header.get('unit_name');
				//alert(unit_name);
				var unit_id = header.get('unit_id');
				var unit_id_defined = '${/model/unit_id_defined/record/@unit_id}';
				//alert(unit_id);
				//alert(unit_id_defined);
				
				if (unit_id_defined){
				    var position_id = header.get('position_id');
				    Aurora.request({
                            url: $('get_unit_id_by_position').getUrl(),
                            para: {
                                position_id: position_id
                            },
                            success: function(res) {
                                record.set('responsibility_center_id', res.result.record.responsibility_center_id);
                                record.set('responsibility_center_name', res.result.record.responsibility_center_name);

                            },
                            scope: this
                        });
				    record.set('unit_id', '${/model/unit_id_defined/record/@unit_id}');
	                record.set('unit_name', '${/model/unit_id_defined/record/@unit_name}');
				}else{
					//原有逻辑
	                record.set('responsibility_center_name', header.get('responsibility_center_name'));
	                record.set('responsibility_center_id', header.get('responsibility_center_id'));
	                }
	                
				
				var saveFlag = true;
                //add by HJ
                var bank_record = $('exp_report_lines').getAt(0);;
                if (payee_category == 'EMPLOYEE') {
                    records = $('exp_employee_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('exp_employee_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                } else if (payee_category == 'VENDER') {
                    records = $('pur_vender_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('pur_vender_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                } else {
                    records = $('ord_customer_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('ord_customer_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                }
                //end by Qu yuanyuan 2015-11-25
                record.set('employee_id', header.get('employee_id'));
                record.set('employee_name', header.get('employee_name'));
                record.set('position_id', header.get('position_id'));
                record.set('position_name', header.get('position_name'));
                // record.set('responsibility_center_name', header.get('responsibility_center_name'));
                // record.set('responsibility_center_id', header.get('responsibility_center_id'));
                record.set('payee_category_name', header.get('exp_report_payee_category_name'));
                record.set('payee_category', header.get('exp_report_payee_category'));
                record.set('payee_name', header.get('exp_report_payee_name'));
                record.set('payee_id', header.get('exp_report_payee_id'));
                record.set('payment_flag', header.get('payment_flag'));
                //add by lq 20190828 多币种新增费用行自动带出当前账套币种、汇率带出1
                if (header.get('exp_report_currency_code')=='OTHER'){
                    var fun_currency_code='${/model/currency_code_path/record/@functional_currency_code}';
                    var fun_currency_name='${/model/currency_code_path/record/@functional_currency_name}';
	                record.set('currency_code', fun_currency_code);
	                record.set('currency_name', fun_currency_name);
	                record.set('exchange_rate', 1);
                }else{
                    record.set('currency_code', header.get('exp_report_currency_code'));
                    record.set('exchange_rate', header.get('exp_report_rate'));
                }
                //end add
                record.set('period_name', header.get('period_name'));
                record.set('exchange_rate_type', header.get('exp_report_rate_type'));
                record.set('exchange_rate_quotation', header.get('exp_report_rate_quotation'));

                record.set('account_number', bank_record.get('account_number'));
                record.set('account_number_hide', bank_record.get('account_number_hide'));
                record.set('account_name', bank_record.get('account_name'));

                record.set('payment_type', header.get('exp_report_payment_method'));
                record.set('payment_type_id', header.get('payment_method_id'));

                record.set('expense_type_id', '${/model/budget_control/record/@default_expense_type}');
                record.set('expense_type_name', '${/model/budget_control/record/@default_expense_type_desc}');
				
				//add by lyt 2018.10.27
                var v_expense_item_id='${/model/def_type_obj/record/@expense_item_id}';
                if(v_expense_item_id!=''){
                record.set('exp_req_item_id','${/model/def_type_obj/record/@expense_item_id}');
                record.set('exp_req_item_name','${/model/def_type_obj/record/@expense_item_desc}');
                record.set('rush_flag','${/model/def_type_obj/record/@rush_flag}');
                record.set('amortization_flag','${/model/def_type_obj/record/@amortization_flag}');
                }
                var saveFlag = true; 
            }

            //循环校验每行计划付款行付款日期是否小于报销日期

            function pmtDateValidator() {
                var expDate = Aurora.formatDate($('exp_report_head').getAt(0).get('exp_report_data'));
                var pmt_ds = $('pmtplan_schedules_ds');
                var pmt_line_records = pmt_ds.getAll();
                var tmp = 0;
                if (pmt_line_records.length == 0) {
                    canSave = true;
                }
                if (pmt_line_records.length != 0) {
                    for (var t = 0;t < pmt_line_records.length;t++) {
                        var scheduleDueDate = Aurora.formatDate(pmt_line_records[t].get('schedule_due_date'));
                        if (expDate > scheduleDueDate) {
                            tmp++;
                        }
                    }
                }
                if (tmp != 0) {
                    canSave = false;
                }
                if (tmp == 0) {
                    canSave = true;
                }
            }

            function GetChinese(strValue) {
                if (strValue) {
                    var reg = /[\u4e00-\u9fa5]/g;
                    return strValue.match(reg).join("");
                } else return "";
            }
            
            function validateBudgetUnit() {
                //获取行信息
                var lineData = $('exp_report_lines').getAll();
                //调用bm获取数据是否一致
                var message = '';
                var messageLine = '';
                var messageUnit = '';
                var show_flag = 'N';
                var v_count='';
                for(var i = 0;i < lineData.length;i++) {
                    var expense_item_id = lineData[i].get('exp_req_item_id');
                    var company_id = lineData[i].get('company_id');
                    var line_number = lineData[i].get('line_number');
                    var unit_id = lineData[i].get('unit_id');
                    Aurora.request({
                        url: $('get_budget_unit_validate_link').getUrl(),
                        para: {
                           expense_item_id: expense_item_id,
                           company_id: company_id,
                           line_number: line_number,
                           unit_id: unit_id
                        },
                        sync:true,
                        success: function(res) {
                           var record = res.result.record;
                           if (record != undefined) {
                               //当没查询的数量的时候，表示对应的unit和预算不对应
                               if (record.check_flag == 'Y' && record.cnt == 0) {
                                   messageLine += record.line_number + ',';
                                   messageUnit += record.unit_name + ',';
                                   var v_count=record.v_count;
                                   if (v_count==0){
                                   show_flag = 'Y'}
                                   
                               }
                           }
                        },
                        scope: this
                     });
                }
                if (show_flag == 'Y') {
                    messageLine = messageLine.substring(0,messageLine.length-1);
                    messageUnit = messageUnit.substring(0,messageUnit.length-1);
                    message = '第(' + messageLine + ')' + '行费用对应预算中心为(' + messageUnit + ')，请修改。<br/>';
                    Aurora.showInfoMessage('${l:PROMPT}', message, null, 450, 150);
                    throw message;
                }
            }

            function savereport() {
                
                //add by lq 20190524 每次单据保存都重置一下预算保留表的状态
                var exp_report_number=$('exp_report_head').getAt(0).get('exp_report_number');
                 Aurora.request({
                            url: $('bgt_reset_link').getUrl(),
                            para: {
                                'document_number': exp_report_number
                            },
                            sync:true,
                            success: function(res) { 
                               var returnnumber = '更新成功';
                            },
                            error: function() {
                                // $('checkBtn').enable();
                            },
                            scope: this
                        });
                //end add                
                //校验预算项目和部门之间的关系
                validateBudgetUnit();
                 //使付款银行变为必输
                var headData=$('exp_report_head').getAt(0);
                var a_flag = 'N';
               //add by lq 20180920 招待费报销单的的招待人数/(招待人数+客户人数)若大于0.5则不允许保存，根据公司规定，本次参与招待人数不得超过总人数的百分之五十
                if (headData.get('exp_report_type_code') == 'BX0020') {
                    var lineRecords = $('exp_report_lines').getAll();
                    for (var h = 0;h < lineRecords.length;h++) {
                        //add 取费用对象动态列的列名
                        Aurora.request({
                            url: $('get_object_check_link').getUrl(),
                            para: {
                                cus_code: 'FY0090',
                                accept_code: 'FY0092'
                            },
                            sync: true,
                            success: function(res) {
                                // var cust=res.result.record.cus_id;
                                // var accept=res.result.record.accept_id;
                                //debugger;
                                var teamBuildFlag = 'N';
                                var expTypeCode = $('exp_expense_type_ds').getAll();
                                for(var i = 0;i < expTypeCode.length;i++) {
                                    if (expTypeCode[i].get('expense_type_code') == '1610' && expTypeCode[i].get('expense_type_id') == lineRecords[h].get('expense_type_id')) {
                                        teamBuildFlag = 'Y';
                                    }
                                }
                                if (teamBuildFlag == 'N') {
                                	var cust_number = Number(lineRecords[h].get(res.result.record.cus_id)); //客户人数
                                	var accep_number = Number(lineRecords[h].get(res.result.record.accept_id)); //接待人数
                                	var cc = (accep_number / (accep_number + cust_number));
                                	if (cc > 0.5) {
                                    	Aurora.showErrorMessage('${l:PROMPT}', '根据公司规定，本次参与招待人数不得超过总人数的百分之五十', null, 250, 100);
                                    	a_flag = 'Y';
                                    	return;
                                	}else{
                                    	a_flag = 'N';
                                	}
                                }else{
                                    lineRecords[h].getField(res.result.record.cus_id).setRequired(false);
                                }
                            },
                            scope: this
                        });
                        if(a_flag == 'Y') {
                            return;
                        }
                        //end add
                        // var cust_number=Number(record.get(cust));//客户人数
                        // var accep_number=Number(record.get(accept));//接待人数
                        // var accep_number=Number(lineRecords[h].get('^#105'));
                        // var cust_number=Number(lineRecords[h].get('^#103'));
                    }}
               //end add
               // if(headData.get('exp_report_type_code')=='BX8001'){
               // var lineRecords=$('exp_report_lines').getAll();
               // for(var j=0;j<lineRecords.length;j++){
                     // lineRecords[j].getField('bank_account_name').setRequired(true);
               // }
               // }
                //添加费用政策地点定义检查
                var records = $('exp_report_lines').getAll();
                var len = records.length;
                for (var i = 0;i < len;i++) {
                    lineInfoInit(records[i]);
                    //add by lyt 2019.5.24 HGT账套，币种必输
                    if('${/model/account_set/record/@account_set}'==1 && records[i].isNew!=true)
                    records[i].getField('currency_name').setRequired(true);
                }

                pmtDateValidator();
                // if (!canSave) {
                    // Aurora.showInfoMessage('${l:PROMPT}', '计划付款日期不能小于报销日期', null, 250, 100);
                    // return;
                // }
                //add by HJ
                if (impFlag != 1) {
                    var report_amount_total = null;
                    var apply_condition = '${/model/head_data/record/@apply_condition}';
                    if (null != apply_condition && '' != apply_condition) {
                        for (var t = 0;t < records.length;t++) {
                            report_amount_total += records[t].get('report_amount');
                        }
                        if (report_amount_total >= apply_condition) {
                            Aurora.showInfoMessage('${l:PROMPT}', '报销金额超过' + apply_condition + ',请从申请单创建报销单', null, 250, 100);
                            return;
                        }
                    }
                }
                if (impFlag == 1) {
                    for (var m = 0;m < records.length;m++) {
                        if (records[m].get('report_amount') > records[m].get('report_amount1')) {
                            Aurora.showInfoMessage('${l:PROMPT}', '报销金额不能大于申请单的申请金额', null, 250, 100);
                            return;
                        }
                    }
                }
                var d1 = $('exp_report_head_dimension');
                var d2 = $('exp_report_head_object');
                var rec = d2.getAt(0).data;
                if (!d1.validate()) {
                    return;
                }
                if (!d2.validate()) {
                    return;
                }
                debugger;
                if (!$('exp_report_head').validate()) {
                    return;
                }
                if (!$('exp_report_lines').validate()) {
                    return;
                }
                //add by lyt 2019.5.30 Petty Cash支票号必输
                var type_code='${/model/report_type_code/record/@exp_type_code}';
                if(type_code=='HGIBX0090'){
                  var records = $('pmtplan_schedules_ds').getAll();
					for(var z=0;z<records.length;z++){

					records[z].getField('cheque_number').setRequired(true);
					}
                }
                
				//add by lyt 2019.7.10手机费工作餐 金额限制 
                var sign=false;
                
                if(type_code=='BX0060'){
 				    var records = $('exp_report_lines').getAll();                    
					for(var z=0;z<records.length;z++){
                     Aurora.request({
                            url: $('get_item_type_link').getUrl(),
                            sync:true,
                            para: {
                                expense_item_id:records[z].get('expense_item_id')
                            },
                            success: function(res) {
                                if(res.result.record.count>0){
                                     sign=true;
                                }
                            },
                            scope: this
                        });	
                        if(sign==true)
                        break;
					}
                  if(sign){                        
                  var records = $('exp_report_lines').getAll();
					for(var z=0;z<records.length;z++){
						if(records[z].get('report_functional_amount')>1800){
						    Aurora.showInfoMessage('${l:PROMPT}', '${l:MOBILE_PHONE_FEE_CHECK}', null, 250, 100);
						return;  
						}
					}
                  }					
                    
                }
                //end add                        
                                     
                if (!$('pmtplan_schedules_ds').validate()) {
                    return;
                }
                if (!$('exp_report_object_lines').validate()) {
                    return;
                }
                /* if ($('exp_report_lines').getAll().length == 0) {
                    Aurora.showInfoMessage('${l:PROMPT}', '${l:PLEASE_INSERT_LINE_DATA}', null, 250, 100);
                    return;
                } */

                for (var p in rec) {
                    if (p.substring(0, 1) == '#') {
                        var records = $('exp_report_object_lines').getAll();
                        var record;
                        for (var i = 0;i < records.length;i++) {
                            var tempRecord = records[i];
                            if (tempRecord.get('expense_object_type_id') == p.substring(1, p.length)) {
                                record = tempRecord;
                                break;
                            }
                        }

                        if (!record) {
                            record = new Aurora.Record({});
                            $('exp_report_object_lines').add(record);
                        }

                        record.data['expense_object_type_id'] = p.substring(1, p.length);
                        record.data['expense_object_id'] = rec[p];
                        record.data['expense_object_desc'] = rec['^' + p];
                        if (exp_report_header_id_bak != '') {
                            record.isNew = false;
                            record.dirty = true;
                        }
                    }
                }

                //头维度，当头维度修改之后将数据存放到行，如果没有修改就跳过该段逻辑
                var recd = d1.getAt(0).data;
                // if (d1.isModified()) {
                for (var p in recd) {
                    if (p.substring(0, 1) == 'e') {
                        var lines = $('exp_report_lines').getAll();
                        for (var i = 0,
                            l = lines.length;i < l;i++) {
                            lines[i].set(p, recd[p]);
                        }
                    }
                }
                // }
                // var headerDimDs = $('exp_report_head_dimension');
                // var headerDimData = headerDimDs.getAt(0) ? headerDimDs.getAt(0).data : {};
                // //设置头维度，保存维度值至所有行上
                // for (var dimName in headerDimData) {
                // if (dimName.substring(0, 1) == 'e') {
                // var lines = $('exp_report_lines').getAll();
                // var l = lines.length;
                // for (i = 0;i < l;i++) {
                // lines[i].set(dimName, headerDimData[dimName]);
                // }
                // }
                // }

                var d3 = $('exp_report_lines');
                var linerecords = d3.getAll();
                for (var t = 0;t < linerecords.length;t++) {
                    var los = [];
                    var recp = linerecords[t].data
                    for (var q in recp) {
                        var llo = {};
                        if (q.substring(0, 1) == '^') {

                            llo['expense_object_type_id'] = q.substring(2, q.length);
                            llo['expense_object_id'] = recp[q.replace('^', '')];
                            llo['expense_object_desc'] = recp[q];

                            if (linerecords[t].isNew) {
                                llo['_status'] = 'insert';
                            } else {
                                llo['_status'] = 'update';
                                llo['exp_report_line_id'] = linerecords[t].get('exp_report_line_id');
                            }
                            los.push(llo);
                        }
                    }
                    linerecords[t].data['details'] = los;
                }

                //add 2013/1/7 wgf
                if (removeFlag) {
                    $('exp_report_head').getCurrentRecord().dirty = true;
                }
                // var length=d3.getAll().length;
                // for(var i=0;i<length;i++){
                // var record=d3.getAt(i);
                // }
                //add by HJ
                if ($('exp_report_head').getAt(0).get('vat_special_invoice_include') == 'Y') {
                    var linerecords1 = $('exp_report_lines').getAll();
                    for (var t = 0;t < linerecords1.length;t++) {
                        var special_invoice = linerecords1[t].get('special_invoice');
                        if (special_invoice == 'Y') {
                            var tempRecord1 = linerecords1[t];
                            var sale_amount = tempRecord1.get('sale_amount');
                            var tax_rate1 = 0;
                            var tax_rate = Number(tempRecord1.get('tax_rate'));
                            var tax_amount = tempRecord1.get('tax_amount');
                            if (sale_amount == 0 || Aurora.isEmpty(sale_amount)) {
                                tax_rate1 = 0;
                            } else {
                                tax_rate1 = isNaN(tax_amount / sale_amount) ? '' : (tax_amount / sale_amount).toFixed(3);
                            }
                            var tax_rate2 = tax_rate1 * 100;
                            var tax_rate3 = tax_rate - 0.2;
                            var tax_rate4 = tax_rate + 0.2;
                            if (tax_rate2 < tax_rate3 || tax_rate2 > tax_rate4) {
                                //if (tax_rate1 * 100 != tax_rate) {
                                //Aurora.showMessage('提示', '发票税率维护错误，请修改');
                                return;
                            }
                        }
                    }
                    /*  for (var l = 0;l<linerecords1.length;l++){
                     for (var s = 0;s<l;s++){
                     if(linerecords1[l].get('special_invoice') == 'Y' && linerecords1[s].get('special_invoice') == 'Y' && linerecords1[l].get('invoice_code') == linerecords1[s].get('invoice_code') && linerecords1[l].get('invoice_number') == linerecords1[s].get('invoice_number')){
                     Aurora.showMessage('提示', '同一张专用发票只允许关联一行报销单哦');
                     return;
                     }
                     }
                     }  */
                }
                //add by HJ
                if ($('exp_report_head').getAt(0).get('exp_report_type_name') == '资本性支出报销单') {
                    var line_record = $('exp_report_lines').getAll();
                    for (var m = 0;m < line_record.length;m++) {
                        line_record[m].set('responsibility_center_id', '50')
                        line_record[m].set('responsibility_center_name', '缺省');

                    }
                }
                
                var dsdes = $('exp_report_lines').getAll();
                for (var d = 0;d < dsdes.length;d++) {
                    var employee_name = dsdes[d].get('employee_name');//GetChinese(dsdes[d].get('employee_name'));
                    // var index = dsdes[d].get('employee_name').lastIndexOf("\-");
                    // var employee_name =dsdes[d].get('employee_name').substring(index+1,dsdes[d].get('employee_name').length);
                    var report_amount = dsdes[d].get('report_amount');
                    var amount = Number(report_amount).toFixed(2);
                    //描述可以自己输入
                   /*  var redescription = dsdes[d].get('unit_name') + employee_name + '报销' + dsdes[d].get('exp_req_item_name') + amount + '元';
                    dsdes[d].set('description', redescription); */
                }
                //add by wxj 20181021 报销单行和计划付款行不能多对多
                // var lines = $('exp_report_lines').getAll();
                // var ptm_lines = $('pmtplan_schedules_ds').getAll();
                // if(lines.length == 1) {
                    // //报销单行为1的时候，计划付款行可以为多条
                // }else{
                    // //计划付款行只能为一条
                    // if(ptm_lines.length > 1) {
                        // var ptm_flag = 'N';
                        // for(var i = 0;i < ptm_lines.length;i++) {
                            // if(ptm_lines[i].get('usedes') == 80) {
                                // ptm_flag = 'Y';
                            // }
                        // }
                        // if(ptm_flag != 'Y') {
                        	// Aurora.showMessage('提示', '多条报销单行不允许对应多条计划付款行,请修改后保存！');
							// throw '多条报销单行不允许对应多条计划付款行,请修改后保存！';
                        	// return;
                        // }else if(ptm_lines.length > 2) {
                            // Aurora.showMessage('提示', '计划付款行最多为两行,请修改后保存！');
							// throw '多条报销单行不允许对应多条计划付款行,请修改后保存！';
                        	// return;
                        // }
                    // }
                // }
                //add end
                
                var type_code='${/model/report_type_code/record/@exp_type_code}';
				if(type_code='BX0020'){
				    for(var h = 0;h < $('exp_report_lines').getAll().length;h++){
		                if($('exp_report_lines').getAt(h).get('primary_quantity')<=0){
		                    Aurora.showErrorMessage('${l:PROMPT}', '${l:CHECK_CUSTOMER_NUMBER}', null, 250, 100);
		                	return;
		                }
				    }
				}
				
                $('exp_report_head').submit();
                saveFlag = true; //保存成功后，保存标志变为true
                // alert(' 保存时index值:' + index);
                // alert('点击保存时值 exp_report_header_id_bak: '+ exp_report_header_id_bak);
            }

			function setfunctionamount(record) {
                //add by lq 20180831 增加头币种的判断，假如头币种不为other时换成取行汇率进行计算
                var head_currency=$('exp_report_head').getAt(0).get('exp_report_currency_code');
                if(head_currency=='OTHER'){
                	var a = record.get('report_amount');
                    var b = record.get('exchange_rate');
                    record.data['report_functional_amount'] = isNaN(a * b) ? '' : Number((a * b).toFixed(Number('${/model/precision/record/@precision}') + 1)).toFixed('${/model/precision/record/@precision}');
                }else{
                	var quotation = $('exp_report_head').getAt(0).get('exp_report_rate_quotation');
                	var a = record.get('report_amount');
                	var b = $('exp_report_head').getAt(0).get('exp_report_rate');
                	if (quotation == 'DIRECT QUOTATION') {
                    	record.data['report_functional_amount'] = isNaN(a * b) ? '' : (a * b).toFixed('${/model/precision/record/@precision}');
                	} else {
                    	record.data['report_functional_amount'] = isNaN(a / b) ? '' : (a / b).toFixed('${/model/precision/record/@precision}');
                	}
                }
            }

            /*function setfunctionamount(value, record, name) {
                 //add by lq 20180831 增加头币种的判断，假如头币种不为other时换成取行汇率进行计算
                var head_currency=$('exp_report_head').getAt(0).get('exp_report_currency_code');
                if(head_currency=='OTHER'){
                var a = record.get('report_amount');
                    b = record.get('exchange_rate');
                    record.data['report_functional_amount'] = isNaN(a * b) ? '' : (a * b).toFixed('${/model/precision/record/@precision}');
                    return isNaN(a * b) ? '' : Aurora.formatMoney((a * b).toFixed('${/model/precision/record/@precision}'));
                }else{
                var quotation = $('exp_report_head').getAt(0).get('exp_report_rate_quotation');
                var a = record.get('report_amount');
                var b = $('exp_report_head').getAt(0).get('exp_report_rate');
                if (quotation == 'DIRECT QUOTATION') {
                    record.data['report_functional_amount'] = isNaN(a * b) ? '' : (a * b).toFixed('${/model/precision/record/@precision}');
                    return isNaN(a * b) ? '' : Aurora.formatMoney((a * b).toFixed('${/model/precision/record/@precision}'));
                } else {
                    record.data['report_functional_amount'] = isNaN(a / b) ? '' : (a / b).toFixed('${/model/precision/record/@precision}');
                    return isNaN(a / b) ? '' : Aurora.formatMoney((a / b).toFixed('${/model/precision/record/@precision}'));
                }}
            }*/

            function getpmtdate() {
                var period_name = $('exp_report_head').getAt(0).get('period_name');
                Aurora.request({
                    url: /*${/request/@context_path}/autocrud/csh.sys_fun_get_period_name/query*/
                    $('sys_fun_get_payment_date_link').getUrl() + '?_ban_remind=Y',
                    para: {
                        period_name: period_name
                    },
                    success: pmtdate,
                    scope: this
                });
            }

            function pmtcanaddaline() {
                if ($('pmtplan_schedules_ds').getAll().length == 0 && $('exp_report_head').validate()) {
                    if (exp_report_header_id_bak == '') {
                        var t = $('exp_report_head').getAt(0);
                        var r = t.getMeta();
                        r.getField('exp_report_position').setReadOnly(true);
                        r.getField('exp_report_data').setReadOnly(true);
                        r.getField('exp_report_payment_method').setReadOnly(true);
                        r.getField('exp_report_payee_name').setReadOnly(true);
                        r.getField('exp_report_rate_type_name').setReadOnly(true);
                        r.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        r.getField('exp_report_rate').setReadOnly(true);
                        r.getField('exp_report_payee_category_name').setReadOnly(true);
                    }
                    return true;
                } else if ($('pmtplan_schedules_ds').getAll().length != 0) {
                    return true;
                } else {
                    return false;
                }
                return true;

            }

            function canaddaline() {
                if ($('exp_report_lines').getAll().length == 0 && $('exp_report_head').validate()) {
                    if (exp_report_header_id_bak == '') {
                        var t = $('exp_report_head').getAt(0);
                        var r = t.getMeta();
                        r.getField('exp_report_position').setReadOnly(true);
                        r.getField('exp_report_data').setReadOnly(true);
                        r.getField('exp_report_payment_method').setReadOnly(true);
                        r.getField('exp_report_payee_name').setReadOnly(true);
                        r.getField('exp_report_rate_type_name').setReadOnly(true);
                        r.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        r.getField('exp_report_rate').setReadOnly(true);
                        r.getField('exp_report_payee_category_name').setReadOnly(true);
                    }
                    return true;
                } else if ($('exp_report_lines').getAll().length != 0) {
                    return true;
                } else {
                    return false;
                }
                return true;

            }
            //原点击保存后触发的操作

            function reloadres(ds, res) {
                saveFlag = true;
                //submitFlag具体作用不明，注释掉
                //if (submitFlag == 0) {
                var t = exp_report_header_id_bak == '' ? res.result.record.exp_report_header_id : exp_report_header_id_bak;
                // alert('点击保存后值 t: ' + t + ' res.result.record.exp_report_header_id: ' + res.result.record.exp_report_header_id + ' exp_report_header_id_bak: ' + exp_report_header_id_bak);
                var hgi_account_flag='${/parameter/@hgi_account_flag}';
                var hgi_count='${/model/account_set/record/@account_set}';
                var hgi_account_employee='${/model/hgi_account_employee/record/@hgi_account_employee}'; 
                if (hgi_account_flag!='Y'){
                Ext.get('deletereportBtn').show();
                }
                // Ext.get('uploadFileBtn').show();
                Ext.get('seeHisBtn').show();
                Ext.get('OASignBtn').show();
                //Ext.get('requsitionRef').show();
                if (hgi_account_flag=='Y'||hgi_count==0||hgi_account_employee!=0){
                Ext.get('submitBtn').show();
                if (hgi_count!=0&&hgi_account_flag=='Y'){
                Ext.get('hgi_account_return').show();
                }
                }else{
                    Ext.get('hgi_account_check').show();
                }
                //HGI的CP报销单显示关联差旅申请
                var documentTypeCode = '${/model/head_data/record/@exp_report_type_code}';
                  	if(documentTypeCode=='HGIBX0100'){
                    Ext.get('requsitionRef').show();
                  	}
                //Ext.get('seeLog').show();
                if(hgi_count==0){
                Ext.get('printBtn').show();
                }
                // Ext.get('newreportBtn').show();
                //Ext.get('policy').show();
                //Ext.get('imgUpload').show();
                //oss上传，下载
                Ext.get('ossUpload').show();
                //Ext.get('ossDownload').show();
                Ext.get('postScriptBtn').show();
                //在维护保存时，res.result.record没有值，导致异常抛出
                if(res.result.record != undefined) {
                    //add by wxj 20190608 香港账套隐藏
                    if(res.result.record.previev_flag=='N' && '${/model/account_set/record/@account_set}' == 0){
                	//alert(res.result.record.previev_flag);
                    	Ext.get('createytbtn').show();
                    	//Ext.get('deleteytbtn').show();
                	}
                }
                // Aurora.request({
                // url:$('exp_report_maintain_get_exp_report_number_link').getUrl(),
                // para:{'exp_report_header_id':t},
                // success:function (data){
                // $('exp_report_head').getCurrentRecord().set('exp_report_number',data.result.record.exp_report_number);
                // }
                // });
                $('exp_report_head').setQueryParameter('exp_report_header_id', t);
                //注销掉头重新查询语句，防止刷新界面，使得设置的只读字段无效
                //$('exp_report_head').query();
                // alert('保存成功后index:' + index);
                index = 1;
                // alert('index值为1:' + index);
                $('exp_report_lines').setQueryParameter('exp_report_header_id', t);
                $('exp_report_lines').query();
                $('pmtplan_schedules_ds').setQueryParameter('exp_report_header_id', t);
                $('pmtplan_schedules_ds').query();

                exp_report_header_id_bak = t;
                //修改头维度DataSet和头费用对象DataSet的数据为dirty=false,isNew=false
                $('exp_report_head_dimension').getAt(0).dirty = false;
                $('exp_report_head_dimension').getAt(0).isNew = false;

                $('exp_report_head_object').getAt(0).dirty = false;
                $('exp_report_head_object').getAt(0).isNew = false;
                 //previev_flag

                init_bak();
                //}
            }

            function deletereport() {
                Aurora.showConfirm('${l:EXP_REPORT_CREATE.DELETE}', '${l:EXP_REPORT_CREATE.DELETE}', function(cmp) {
                    if (exp_report_header_id_bak != '') {
                        Aurora.request({
                            url: /*exp_report_delete.svc*/
                            $('exp_report_delete_link_1').getUrl(),
                            para: {
                                exp_report_header_id: exp_report_header_id_bak
                            },
                            success: function() {
                                if (!opener) {
                                    window.location.href = /*exp_report_type_choice.screen*/
                                    $('exp_report_type_choice_link_1').getUrl()
                                } else {
                                    opener.query();
                                    window.close();
                                }
                            },
                            scope: this
                        });
                    }

                }, null, null, 85);

            }

            function header_ds_update(ds, record, name, value, oldvalue) {
                //add by lq 20180813勾选预提则隐藏关联预提、接触预提按钮；去掉勾选则显现
                if(name=="previev_flag"){
                    if(value=="N"){
                       Ext.get('createytbtn').show();
                       $('exp_report_head').submit();
                       //Ext.get('deleteytbtn').show();
                    }
                    else if(value=="Y"){
                        Ext.get('createytbtn').hide();
                        //Ext.get('deleteytbtn').hide();
                          // Aurora.showOkCancelWindow('${l:PROMPT}', '仅对公费用可以预提，且勾选预提标识后，您的费用将不会实际支付，请确认', function() {
                         //add by lq 20190305 预提类报销单只能填写其他发票
                          var head_id =record.get('exp_report_header_id');
                          Aurora.request({
                             sync: true,
                             url: $('exp_preview_link').getUrl(),
                             para: {
                                head_id: head_id
                             },
                             success: function(res) {
                                if(res.result.record.v_count_invoice>0){
                                  Aurora.showErrorMessage('${l:PROMPT}', '预提类报销单只能填写其他发票', null,500,100);
                                  record.set('previev_flag','N');
                                  throw '预提类报销单只能填写其他发票';
                                }else{
                                     Aurora.showInfoMessage('${l:PROMPT}', '仅对公费用可以预提，且勾选预提标识后，您的费用将不会实际支付，请确认', null,500,100);
                                }
                             },
                             scope: this
                         });
                        //end add
                    // }, null, 500, 100);
                    }
                }
                //end add
                //update by robin 2016-04-12
                if (name == "vat_special_invoice_include") {
                    var lineData = $('exp_report_lines').getAll();
                    if (value == "Y") {
                        //报销单行新增字段隐藏
                        $('grid').showColumn('invoice_type_desc');
                        $('grid').showColumn('invoice_number');
                        $('grid').showColumn('invoice_status_desc');
                        $('grid').showColumn('invoice_code');
                        $('grid').showColumn('invoice_date');
                        //$('grid').showColumn('usage_type_desc');
                        $('grid').showColumn('tax_amount');
                        $('grid').showColumn('sale_amount');
                        $('grid').showColumn('tax_rate');
                        //$('grid').showColumn('input_tax_struc_detail_desc');
                        for (var i = 0;i < lineData.length;i++) {
                            lineData[i].getField('invoice_type_desc').setRequired(true);
                            if (lineData[i].get('special_invoice') == 'Y') {
                                lineData[i].getField('invoice_number').setRequired(true);
                                lineData[i].getField('invoice_status_desc').setRequired(true);
                                lineData[i].getField('invoice_code').setRequired(true);
                                lineData[i].getField('invoice_date').setRequired(true);
                                lineData[i].getField('tax_amount').setRequired(true);
                                lineData[i].getField('tax_amount').setReadOnly(false);
                            } else {
                                // modified by HM @2016-07-28 电子普通发票
                                if (lineData[i].get('special_invoice') != 'Y' && lineData[i].get('einvoice_flag') == 'Y') {
                                    lineData[i].getField('invoice_number').setRequired(true);
                                    lineData[i].getField('invoice_code').setRequired(true);
                                    lineData[i].getField('invoice_date').setRequired(true);
                                } else {
                                    lineData[i].getField('invoice_number').setRequired(false);
                                    lineData[i].getField('invoice_code').setRequired(false);
                                    lineData[i].getField('invoice_date').setRequired(false);
                                }
                                lineData[i].getField('invoice_status_desc').setRequired(false);
                                lineData[i].getField('tax_amount').setRequired(false);
                                lineData[i].getField('tax_amount').setReadOnly(false);
                            }
                        }
                    }
                    if (value == "N") {
                        //报销单按现有的正常显示。
                        $('grid').hideColumn('invoice_type_desc');
                        $('grid').hideColumn('invoice_number');
                        $('grid').hideColumn('invoice_status_desc');
                        $('grid').hideColumn('invoice_code');
                        $('grid').hideColumn('invoice_date');
                        //$('grid').hideColumn('usage_type_desc');
                        $('grid').hideColumn('tax_amount');
                        $('grid').hideColumn('sale_amount');
                        $('grid').hideColumn('tax_rate');
                        // $('grid').hideColumn('input_tax_struc_detail_desc');
                        for (var i = 0;i < lineData.length;i++) {
                            lineData[i].set('invoice_type', null);
                            lineData[i].set('invoice_type_desc', null);
                            lineData[i].set('invoice_number', null);
                            lineData[i].set('invoice_date', null);
                            lineData[i].set('invoice_code', null);
                            // lineData[i].set('usage_type', null);
                            // lineData[i].set('usage_type_desc', null);
                            lineData[i].set('invoice_status', null);
                            lineData[i].set('invoice_status_desc', null);
                            lineData[i].set('input_tax_structure_detail', null);
                            //lineData[i].set('input_tax_struc_detail_desc', null);
                            lineData[i].set('tax_amount', null);
                            //lineData[i].set('sale_amount', null);
                            lineData[i].set('tax_rate', null);
                            lineData[i].set('special_invoice', null);
                            lineData[i].getField('invoice_number').setRequired(false);
                            lineData[i].getField('invoice_status_desc').setRequired(false);
                            lineData[i].getField('invoice_code').setRequired(false);
                            lineData[i].getField('invoice_date').setRequired(false);
                            lineData[i].getField('tax_amount').setRequired(false);
                            // lineData[i].getField('usage_type_desc').setRequired(false);
                            lineData[i].getField('invoice_type_desc').setRequired(false);
                            //lineData[i].getField('input_tax_struc_detail_desc').setRequired(false);
                            lineData[i].getField('tax_rate').setRequired(false);
                            lineData[i].getField('invoice_type').setRequired(false);
                        }
                    }
                }
                if (name == 'exp_report_data') {
                    showPeriod(record);
                }
                if (name == 'rate_method_code') {
                    record.set('exp_report_rate_quotation_name', '');
                    record.set('exp_report_rate_quotation', '');
                    record.set('exp_report_rate', '');
                    var meta = record.getMeta();
                    if (value == 'DAILY' || value == 'FIXED') {
                        meta.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        meta.getField('exp_report_rate_quotation_name').setRequired(false);
                        meta.getField('exp_report_rate').setReadOnly(true);
                        record.set('exp_report_rate', '');


                        getExchangeRate({
                            fromCur: record.get('functional_currency_code'),
                            toCur: record.get('exp_report_currency_code'),
                            exchangeRateType: record.get('exp_report_rate_type'),
                            exchangeDate: record.get('exp_report_data'),
                            periodName: record.get('period_name')
                        });
                    } else if (value == 'PERIOD' || value == 'MANUAL') {
                        if (record.get('currency_code') != record.get('functional_currency_code')) {
                            meta.getField('exp_report_rate_quotation_name').setReadOnly(false);
                            meta.getField('exp_report_rate').setReadOnly(false);
                            meta.getField('exp_report_rate_quotation_name').setRequired(true);
                            meta.getField('exp_report_rate').setRequired(true);
                            record.set('exp_report_rate_quotation_name', '');
                            record.set('exp_report_rate', '');
                        }
                    } else {

                       }
                }

                if (name == 'exp_report_rate_quotation_name' || name == 'exp_report_rate_quotation') {
                    if (record.get('exp_report_rate_type') == null || record.get('exp_report_rate_type') == '') {
                        Aurora.showMessage('提示', '汇率类型不能为空');
                        return;
                    } else {
                        getExchangeRateByQuo({
                            fromCur: record.get('functional_currency_code'),
                            toCur: record.get('exp_report_currency_code'),
                            exchangeRateType: record.get('exp_report_rate_type'),
                            exchangeDate: record.get('exp_report_data'),
                            periodName: record.get('period_name'),
                            exchangeRateQuo: record.get('exp_report_rate_quotation')
                        });
                    }


                }

                if (name == 'exp_report_payee_category') {
                    record.set('exp_report_payee_name', '');
                    record.set('exp_report_payee_id', '');
                    var payee_category = value;
                    var f1 = record.getField('exp_report_payee_name');
                    if (payee_category == null || payee_category == undefined || payee_category == '') {
                        f1.setReadOnly(true);
                        f1.setLovService('');
                    } else if (payee_category == 'EMPLOYEE') {
                        f1.setReadOnly(false);
                        f1.setLovService('expm.exp_employee_req_lov');
                        f1.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                    } else if (payee_category == 'VENDER') {
                        f1.setReadOnly(false);
                        f1.setTitle('${l:VENDER_SEARCH}');
                        f1.setLovService('expm.exp_vender_req_lov');
                    } else {
                        f1.setReadOnly(false);
                        f1.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                        f1.setLovService('expm.exp_customer_req_lov');
                    }

                }

            }

            function getExchangeRate(param) {
                Aurora.request({
                    url: /*${/request/@context_path}/autocrud/expm.get_exchange_rate/query*/
                    $('get_exchange_rate_link_16').getUrl(),
                    para: {
                        from_currency: param.fromCur,
                        to_currency: param.toCur,
                        exchange_date: param.exchangeDate,
                        exchange_period_name: param.periodName,
                        exchange_rate_type: param.exchangeRateType
                    },
                    success: setRateAndQuotation,
                    scope: this
                });
            }

            function getExchangeRateByQuo(param) {
                Aurora.request({
                    url: $('get_exchange_rate_by_quotation_link').getUrl(),
                    para: {
                        from_currency: param.fromCur,
                        to_currency: param.toCur,
                        exchange_date: param.exchangeDate,
                        exchange_period_name: param.periodName,
                        exchange_rate_type: param.exchangeRateType,
                        exchange_rate_quo: param.exchangeRateQuo
                    },
                    success: setRate,
                    scope: this
                });
            }

            function setRate(res) {
                var record = $('exp_report_head').getAt(0);
                record.set('exp_report_rate', res.result.record.exchange_rate);
            }

            function setRateAndQuotation(res) {
                var record = $('exp_report_head').getAt(0);
                record.set('exp_report_rate', res.result.record.exchange_rate);
                record.set('exp_report_rate_quotation_name', getDisplayByValue(res.result.record.exchange_rate_quotation, 'code_value', 'code_value_name', 'quotation'));
                record.set('exp_report_rate_quotation', res.result.record.exchange_rate_quotation);
            }

            function getDisplayByValue(value, valueName, displayName, dsName) {
                var dataSet = $(dsName);
                var records = dataSet.getAll();
                for (var i = 0;i < records.length;i++) {
                    if (records[i].get(valueName) == value) {
                        return records[i].get(displayName);
                    }
                }
            }

            function showPeriod(record) {
                var r_date = Aurora.formatDate(record.get('exp_report_data'));
                if ($('exp_report_head').getAt(0).get('budget_control_enabled') == 'N') {
                    Aurora.request({
                        url: /*${/request/@context_path}/autocrud/csh.sys_fun_get_period_name/query*/
                        $('sys_fun_get_period_name_link_5').getUrl(),
                        para: {
                            p_date: r_date
                        },
                        success: periodname,
                        scope: this
                    });
                } else {
                    Aurora.request({
                        url: $('sys_fun_get_period_name_link_6').getUrl(),
                        para: {
                            p_date: r_date
                        },
                        success: periodname,
                        scope: this
                    });
                }
            }

            function periodname(res) {
                if (res) {
                    var pluscols = res.result.record.period_name;
                    if (pluscols) {
                        $('exp_report_head').getAt(0).set('period_name', pluscols);
                    } else {
                        $('exp_report_head').getAt(0).set('period_name', '');
                    }
                }
                getpmtdate();
            }

            function pmtdate(res) {
                var pluscols = res.result.schedule_due_date;
                if (pluscols) {
                    pmt_schedule_due_date = pluscols;
                    // $('exp_report_head').getAt(0).set('schedule_due_date', pluscols);
                } else {
                    pmt_schedule_due_date = '';
                    // $('exp_report_head').getAt(0).set('schedule_due_date', '');
                }
            }

            function datapickerselect(dp, date) {
                var rd = Aurora.formatDate(date);
                $('exp_report_period_ds').setQueryParameter('company_id', '${/session/@company_id}');
                $('exp_report_period_ds').setQueryParameter('date', rd);
                $('exp_report_period_ds').query();

            }

            function afterperiodds(ds) {
                var record = ds.getAt(0);

                $('exp_report_head').getAt(0).set('period_name', record.get('period_name'));
            }

            function afterrateds(ds) {
                var record = ds.getAt(0);

                if (record) {
                    $('exp_report_head').getAt(0).set('exp_report_rate_quotation', record.get('exchange_rate_quotation'));
                    $('exp_report_head').getAt(0).set('exp_report_rate_quotation_name', record.get('quotation_display'));
                    $('exp_report_head').getAt(0).set('exp_report_rate', record.get('exchange_rate'));
                }
            }

            function loadheader(ds, o) {

                var record = ds.getCurrentRecord();
                var payee_category = record.get('exp_report_payee_category');
                var f1 = ds.getField('exp_report_payee_name');
                if (payee_category == 'EMPLOYEE') {
                    f1.setLovService('expm.exp_employee_req_lov');
                } else if (payee_category == 'VENDER') {
                    f1.setLovService('expm.exp_vender_req_lov');
                } else {
                    f1.setLovService('expm.exp_customer_req_lov');
                }
            }

            function submitreport() {
                //add by lq 20181011 将单据编号加密
                var head_record=$('exp_report_head').getAt(0);
                var exp_report_number=head_record.get('exp_report_number');
                 Aurora.request({
                            url: $('encrypt_check_query_link').getUrl(),
                            para: {
                                'document_number': exp_report_number
                            },
                            sync:true,
                            success: function(res) { 
                               var returnnumber = '加密成功';
                            },
                            error: function() {
                                // $('checkBtn').enable();
                            },
                            scope: this
                        });
                //end add
                //add by Qu yuanyuan 采用支票的付款方式时进行提示
                //必须在动态列和行都处于无脏数据的情况下才能进行保存。否则提示。
                if (!saveFlag || $('exp_report_lines').isModified() || ($('exp_report_head').isModified()) || ($('pmtplan_schedules_ds').isModified())) {
                   // Aurora.showInfoMessage('${l:PROMPT}', '${l:PROMPT.SAVE_SUBMIT}', null, 250, 100);
                   savereport();
                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End
                   // return;
                }

                //add by zhaofan 增加锁屏，防止重复点击    Start
                // if ($('new_report_detail_window')) {
                // Aurora.Masker.mask($('new_report_detail_window').wrap, '提交中...');
                // } else {
                // Aurora.Masker.mask(Ext.getBody(), '提交中...');
                // };
                //add by zhaofan 增加锁屏，防止重复点击    End
                
                var pmt_records = $('pmtplan_schedules_ds').getAll();
                // var payment_method_code = '';
                var flag = '';
                var wirte_off_flag = '';
                for (var i = 0;i < pmt_records.length;i++) {
                    /* var payment_method_code = pmt_records[i].get('payment_method_code');
                     if (payment_method_code == '20') {
                     flag = 'Y';
                     break;
                     } else {
                     flag = 'N'
                     } */


                    var un_write_off_flag = pmt_records[i].get('un_write_off_flag');
                    if (un_write_off_flag == 'N') {
                        wirte_off_flag = 'Y';
                        break;
                    } else {
                        wirte_off_flag = 'N';
                    }
                }
                
				                  
                /* if (flag == 'Y') {
                 Aurora.showOkCancelWindow('${l:PROMPT}', '${l:PROMPT.PLEASE_EDIT_REASONS}', function() {
                 submitreport_update();
                 }, null, 300, 100);
                 } */
                 var write_off_flag=0;
                 
               var doc_type_code='${/model/report_type_code/record/@exp_type_code}';
               if(doc_type_code=='HGIBX0010' ||
               doc_type_code=='HGIBX0020' ||
               doc_type_code=='HGIBX0030' ||
               doc_type_code=='HGIBX0040' ||
               doc_type_code=='HGIBX0050' ||
               doc_type_code=='HGIBX0060' ||
               doc_type_code=='HGIBX0070' ||
               doc_type_code=='HGIBX0080'   ){
                   write_off_flag=1;
               }
                 
                if (wirte_off_flag == 'Y' &&write_off_flag==0) {
                    Aurora.showOkCancelWindow('${l:PROMPT}', '${l:EXP_REPORT_HEADERS.CSH_WFL_NOTICE}', function() {
                        // checkAmortization();
                        submitreport_update();
                    }, null, 300, 100);
                } else {
                    // checkAmortization();
                    submitreport_update();
                }
                
            }
            
            function checkAmortization() {
               //1.获取行上所有的费用项目，用于判断是否有摊销标识
               var lineData = $('exp_report_lines').getAll();
               var expense_item_info = '';
               var amortization_flag = 'N';
               var amortization_flag_info = '';
               for(var i = 0;i < lineData.length;i++) {
                   expense_item_info = expense_item_info + lineData[i].get('line_number') + ':' + lineData[i].get('expense_item_id') + ',';
               }
               expense_item_info = expense_item_info.substring(0,expense_item_info.length-1);
               Aurora.request({
                    url: $('get_amortization_flag').getUrl(),
                    para: {
                        expense_item_info: expense_item_info
                    },
                    sync:true,
                    success: function(res) {
                        var records = res.result.record;
                        var line_id;
                        if(records != undefined) {
                            if(Array.isArray(records)) {
                                for(var i= 0;i < records.length;i++) {
                                    if (records[i].amortization_flag == 'Y') {
                                        //获取行id
                                        for (var j = 0; j < lineData.length; j++) {
                                            if(records[i].line_number == lineData[i].get('line_number')) {
                                                line_id = lineData[i].get('exp_report_line_id');
                                            }   
                                        }
                                        amortization_flag_info = amortization_flag_info + records[i].line_number + ':' + line_id + ',';
                                    }
                                }
                            }else{
                                if (records.amortization_flag == 'Y') {
                                    //获取行id
                                    for (var j = 0; j < lineData.length; j++) {
                                        if(records.line_number == lineData[j].get('line_number')) {
                                            line_id = lineData[j].get('exp_report_line_id');
                                        }
                                    }
                                    amortization_flag_info = amortization_flag_info + records.line_number + ':' + line_id + ',';
                                }
                            }
                        }
                    },
                    scope: this
                });
               //2.根据获取到的摊销标识，为Y的需要查询相应行的数据，检查摊销金额和发票不含税金额是否一致
               var msg = '';
               amortization_flag_info = amortization_flag_info.substring(0,amortization_flag_info.length-1);
               var tipsFlag = 'N';
               Aurora.request({
                    url: $('check_amortization_data_link').getUrl(),
                    para: {
                        amortization_flag_info: amortization_flag_info
                    },
                    sync:true,
                    success: function(res) {
                        var record = res.result.record;
                        if(record != undefined) {
                            if(Array.isArray(record)) {
	                            for(var i = 0;i < record.length;i++) {
	                                if(record[i].result_check == 'N') {//N标志表示不等
	                                    msg = msg + record[i].line_number + '、';
	                                    tipsFlag = 'Y';
	                                }
	                            }
                            }else{
                                if(record.result_check == 'N') {
                                	msg = msg + record.line_number + '、';
                                	tipsFlag = 'Y';
                                }
                            }
                            msg = msg.substring(0,msg.length-1);
                        }
                    },
                    scope: this
                });
                if (tipsFlag == 'Y') {
                	Aurora.showOkCancelWindow('${l:PROMPT}', '第'+msg+'行'+"{l:EXP_AMORTIZATION_AMOUNT_NOT_EQUAL}", function(){
                    	submitreport_update();
                	}, null, 300, 100);
                }else{
                    submitreport_update();
                }
               // submitreport_update();
           }

            function submitreport_update() {
                submitFlag = true;

                // //必须在动态列和行都处于无脏数据的情况下才能进行保存。否则提示。
                // if (!saveFlag || $('exp_report_lines').isModified() || ($('exp_report_head').isModified()) || ($('pmtplan_schedules_ds').isModified())) {
                // Aurora.showInfoMessage('${l:PROMPT}', '${l:PROMPT.SAVE_SUBMIT}', null, 250, 100);

                // //add by zhaofan 增加锁屏，防止重复点击    Start
                // if ($('new_report_detail_window')) {
                // Aurora.Masker.unmask($('new_report_detail_window').wrap);
                // } else {
                // Aurora.Masker.unmask(Ext.getBody());
                // };
                // //add by zhaofan 增加锁屏，防止重复点击    End

                // return;
                // }
                if (!$('exp_report_lines').validate()) {

                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End

                    return;
                }
                if (!$('pmtplan_schedules_ds').validate()) {

                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End

                    return;
                }
                //修改报销单凭证生成方式，所以不需要支付的报销单也需要进行计划付款行总金额与行总金额对等校验
                Aurora.request({
                    url: $('exp_report_pmt_check_link').getUrl(),
                    para: {
                        exp_report_header_id: exp_report_header_id_bak
                    },
                    success: function(res) {
                        if (res.result.flag == 'N') {
                            Aurora.showInfoMessage('${l:PROMPT}', '${l:PROMPT.PMT_CHECK}', null, 250, 100);
                            //add by zhaofan 增加锁屏，防止重复点击    Start
                            if ($('new_report_detail_window')) {
                                Aurora.Masker.unmask($('new_report_detail_window').wrap);
                            } else {
                                Aurora.Masker.unmask(Ext.getBody());
                            };
                            //add by zhaofan 增加锁屏，防止重复点击    End
                            return;
                        } else {
                            // modified by HM @2016-07-29 验证电子发票是否被使用过
                            expYGZCheckEInvoiceUsedFun();
                            // bgtCheck();
                        }
                    },
                    failure: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    error: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    scope: this
                });


            }

            function submit_report_with_cache() {
                submitFlag = true;
                //必须在动态列和行都处于无脏数据的情况下才能进行保存。否则提示。
                if (!saveFlag || $('exp_report_lines').isModified() || ($('exp_report_head').isModified()) || ($('pmtplan_schedules_ds').isModified())) {
                    Aurora.showInfoMessage('${l:PROMPT}', '${l:PROMPT.SAVE_SUBMIT}', null, 250, 100);
                    return;
                }
                if (!$('exp_report_lines').validate()) {
                    return;
                }
                if (!$('pmtplan_schedules_ds').validate()) {
                    return;
                }
                //修改报销单凭证生成方式，所以不需要支付的报销单也需要进行计划付款行总金额与行总金额对等校验
                Aurora.request({
                    url: $('exp_report_pmt_check_link').getUrl(),
                    para: {
                        exp_report_header_id: exp_report_header_id_bak
                    },
                    success: function(res) {
                        if (res.result.flag == 'N') {
                            Aurora.showInfoMessage('${l:PROMPT}', '${l:PROMPT.PMT_CHECK}', null, 250, 100);
                            //add by zhaofan 增加锁屏，防止重复点击    Start
                            if ($('new_report_detail_window')) {
                                Aurora.Masker.unmask($('new_report_detail_window').wrap);
                            } else {
                                Aurora.Masker.unmask(Ext.getBody());
                            };
                            //add by zhaofan 增加锁屏，防止重复点击    End
                            return;
                        } else {
                            bgt_check_with_cache();
                        }
                    },
                    failure: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    error: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    scope: this
                });
            }

            function bgtCheck() {
                if ($('exp_report_head').getAt(0).get('budget_control_enabled') == 'Y') {
                    Aurora.request({
                        url: /*${/request/@context_path}/autocrud/expm.exp_report_bgt_check/execute*/
                        $('exp_report_bgt_check_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'N'
                        },
                        success: nextProcess,
                        failure: function() {
                            //add by zhaofan 增加锁屏，防止重复点击    Start
                            if ($('new_report_detail_window')) {
                                Aurora.Masker.unmask($('new_report_detail_window').wrap);
                            } else {
                                Aurora.Masker.unmask(Ext.getBody());
                            };
                            //add by zhaofan 增加锁屏，防止重复点击    End
                        },
                        error: function() {
                            //add by zhaofan 增加锁屏，防止重复点击    Start
                            if ($('new_report_detail_window')) {
                                Aurora.Masker.unmask($('new_report_detail_window').wrap);
                            } else {
                                Aurora.Masker.unmask(Ext.getBody());
                            };
                            //add by zhaofan 增加锁屏，防止重复点击    End
                        },
                        scope: this
                    });
                } else {
                    finalSubmit1();
                }
            }

            function bgt_check_with_cache() {
                if ($('exp_report_head').getAt(0).get('budget_control_enabled') == 'Y') {
                    Aurora.request({
                        url: /*${/request/@context_path}/autocrud/expm.exp_report_bgt_check/execute*/
                        $('exp_report_bgt_check_with_cache_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'N'
                        },
                        success: next_process_witch_cache,
                        scope: this
                    });
                } else {
                    finalSubmit1();
                }
            }

            function nextProcess(res) {
                var t = res.result['error_level_code'];
                if (!t) {
                    checkSubmit();
                } else if (t == 'ALLOWED') {
                    var okCan = Aurora.showConfirm('${l:PROMPT}', res.result.message_code, function() {
                        //add by wxj 20181219 预算提示 
                        // Aurora.request({
                        	// url: $('get_bgt_check_logs').getUrl(),
                        	// para: {
                            	// exp_report_header_id: $('exp_report_head').getAt(0).get('exp_report_header_id')
                        	// },
                        	// sync:true,
                        	// success: function (res) {
                        	    // var records = res.result.record;
                        	    // var msg = '';
                        	    // if(records) {
                        	        // if(Array.isArray(records)) {
                        	            // for(var i = 0;i < records.length;i++) {
                        	                // msg = msg + records[i].line_number + '、';
	                                	// }
                        	        // }else{
                        	            // msg = msg + records.line_number + '、';
                        	        // }
                        	        // msg = msg.substring(0,msg.length-1);
                        	        // var okCan = Aurora.showConfirm('${l:PROMPT}', '第' + msg + '行预算不足，请联系预算专员！', function() {
                        				// checkSubmit('Y');
                        				// okCan.close();
                    				// }, function() {
                        				// okCan.close();
                    				// }, 300, 100);
                        	    // }else{
                        	        // checkSubmit('Y');
                        	    // }
                        	    // // checkSubmit('Y');
                        	// },
                        	// scope: this
                    	// });
                    	//add end
                        checkSubmit('Y');
                        okCan.close();
                    }, function() {
                        //$('submitBtn').disable();
                        okCan.close();
                    }, 500, 200);
                } else if (t == 'BLOCK') {
                    Aurora.showInfoMessage('${l:PROMPT}', res.result.message_code, null, 270, 130);
                    //add by wxj 20181219 预算提示 
                        // Aurora.request({
                        	// url: $('get_bgt_check_logs').getUrl(),
                        	// para: {
                            	// exp_report_header_id: $('exp_report_head').getAt(0).get('exp_report_header_id')
                        	// },
                        	// sync:true,
                        	// success: function (res) {
                        	    // var records = res.result.record;
                        	    // var msg = '';
                        	    // if(records) {
                        	        // if(Array.isArray(records)) {
                        	            // for(var i = 0;i < records.length;i++) {
                        	                // msg = msg + records[i].line_number + '、';
	                                	// }
                        	        // }else{
                        	            // msg = msg + records.line_number + '、';
                        	        // }
                        	        // msg = msg.substring(0,msg.length-1);
                        	        // Aurora.showInfoMessage('${l:PROMPT}', '第' + msg + '行预算不足，请联系预算专员！', null, 270, 130);
                        	    // }
                        	// },
                        	// scope: this
                    	// });
                    submitFlag = 0;
                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End
                }
            }

            function next_process_witch_cache(res) {
                var t = res.result['error_level_code'];
                if (!t) {
                    check_submit_with_cache();
                } else if (t == 'ALLOWED') {
                    var okCan = Aurora.showConfirm('${l:PROMPT}', res.result.message_code, function() {
                        check_submit_with_cache('Y');
                        okCan.close();
                    }, function() {
                        //$('submitBtn').disable();
                        okCan.close();
                    }, 300, 200);
                } else if (t == 'BLOCK') {
                    Aurora.showInfoMessage('${l:PROMPT}', res.result.message_code, null, 250, 100);
                    submitFlag = 0;
                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End
                }
            }

            function checkSubmit(flag) {
                if (flag) {
                    Aurora.request({
                        url: /*${/request/@context_path}/autocrud/expm.exp_report_bgt_check/execute*/
                        $('exp_report_bgt_check_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'Y'
                        },
                        success: finalSubmit1,
                        failure: function() {
                            //add by zhaofan 增加锁屏，防止重复点击    Start
                            if ($('new_report_detail_window')) {
                                Aurora.Masker.unmask($('new_report_detail_window').wrap);
                            } else {
                                Aurora.Masker.unmask(Ext.getBody());
                            };
                            //add by zhaofan 增加锁屏，防止重复点击    End
                        },
                        error: function() {
                            //add by zhaofan 增加锁屏，防止重复点击    Start
                            if ($('new_report_detail_window')) {
                                Aurora.Masker.unmask($('new_report_detail_window').wrap);
                            } else {
                                Aurora.Masker.unmask(Ext.getBody());
                            };
                            //add by zhaofan 增加锁屏，防止重复点击    End
                        },
                        scope: this
                    });
                } else {
                    finalSubmit1();
                }
            }

            function check_submit_with_cache(flag) {
                if (flag) {
                    Aurora.request({
                        url: $('exp_report_bgt_check_with_cache_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'Y'
                        },
                        success: finalSubmit1,
                        scope: this
                    });
                } else {
                    finalSubmit1();
                }
            }

             // function finalSubmit() {
                
                // checkInvoice();
            // }
                
                    function finalSubmit1() {
                Aurora.request({
                    url: $('exp_report_submit_link').getUrl(),
                    para: {
                        exp_report_header_id: exp_report_header_id_bak
                    },
                    success: function() {
                        // printFunction();
                        if (window.opener) {
                            window.opener.query();
                            window.close();
                        } else {
                            var hgi_account_flag='${/parameter/@hgi_account_flag}';
                            if(hgi_account_flag=='Y'){
                            window.location.href = $('exp_report_maintain_query_link_3').getUrl();                                 
                            }else{
                            window.location.href = $('exp_report_maintain_query_link_1').getUrl();
                            }

                        }
                    },
                    failure: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    error: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    scope: this
                });
            }

            function processres(ds, res) {
                var record = ds.getAt(0);
                if (record.get('error_level_code') == '' || record.get('error_level_code') == null || record.get('error_level_code') == undefined) {
                    final_submit();
                } else if (record.get('error_level_code') == 'ALLOWED') {

                   } else if (record.get('error_level_code') == 'BLOCK') {
                    Aurora.showErrorMessage('${l:PROMPT}', '', null, null, 100);
                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End
                }

            }

            function resetobjds(ds, res) {
                $('exp_report_object_lines').removeAll();
            }

            function dispatchtomaintain(ds, res) {
                if (!opener) {
                    window.location.href = /*exp_report_maintain_query.screen*/
                    $('exp_report_maintain_query_link_1').getUrl()
                } else {
                    opener.query();
                    window.close();
                }
            }

            function final_submit() {
                var record = $('exp_report_head_final_submit').getAt(0);
                record.set('exp_report_header_id', exp_report_header_id_bak);
                record.isNew = true;
                record.dirty = true;
                $('exp_report_head_final_submit').submit();
            }

            function newreport() {
                //window.location.href = /*exp_report_type_choice.screen*/
                //$('exp_report_type_choice_link_1').getUrl();
                var okCan = Aurora.showConfirm('${l:PROMPT}', '${l:PROMPTS.SAVE_CONTINUE}', function() {
                    if ($('exp_report_lines').getAll().length == 0) {
                        Aurora.showInfoMessage('${l:PROMPT}', '${l:PLEASE_INSERT_LINE_DATA}', null, 250, 100);
                        return;
                    }
                    savereport();
                    window.location.href = /*exp_report_type_choice.screen*/
                    $('exp_report_type_choice_link_1').getUrl();
                    okCan.close();
                }, null, 250, 100);
            }

            function createforereq() {
                new Aurora.Window({
                    id: 'exp_report_fromreq_screen',
                    url: /*exp_report_fromreq.screen*/
                    $('exp_report_fromreq_link').getUrl() + '?currency_code=' + $('exp_report_head').getAt(0).get('exp_report_currency_code') + '&exp_report_type_id=' + $('exp_report_head').getAt(0).get('exp_report_type_id') + '&employee_id=' + $('exp_report_head').getAt(0).get('employee_id')+'&exp_report_header_id='+ $('exp_report_head').getAt(0).get('exp_report_header_id'),
                    title: '${l:CREATE_REP_FROM_REQ}',
                    fullScreen: true
                });
            }
            //add by lq 2018724 关联预提
            function createyt(){
                var preview_exp_report_number =$('exp_report_head').getAt(0).get('preview_exp_report_number');
                new Aurora.Window({
                    id: 'exp_report_yt_screen',
                    url: /*exp_report_fromreq.screen*/
                    $('exp_report_yt_link').getUrl() + '?currency_code=' + $('exp_report_head').getAt(0).get('exp_report_currency_code')+ '&exp_report_header_id=' + $('exp_report_head').getAt(0).get('exp_report_header_id') + '&exp_report_type_id=' + $('exp_report_head').getAt(0).get('exp_report_type_id') + '&employee_id=' + $('exp_report_head').getAt(0).get('employee_id') + '&preview_exp_report_number=' + encodeURI(preview_exp_report_number),
                    title: '关联预提报销单',
                    fullScreen: true
                });
            }
            
            //从预提界面回到当前界面时自动查询
            function pre_close_query(){
                var exp_report_header_id=$('exp_report_head').getAt(0).get('exp_report_header_id');
                $('exp_report_head').setQueryParameter('exp_report_header_id', exp_report_header_id);
                $('exp_report_head').query();
            }
            function assign() {
                var grid = $('exp_report_lines');
                records = grid.getSelected();

                if (records.length != 1) {
                    Aurora.showWarningMessage('${l:PROMPT}', '${l:PROMPTS.PLEASE_SELECT_RIGHT_REP_LINES}');
                    return false;
                } else if (records[0].get('exp_report_line_id')) {
                    new Aurora.Window({
                        id: 'exp_report_line_assign_window',
                        title: '${l:EXP_REPORT_LINE_ASSIGN.TITLE_MAIN}',
                        url: $('exp_report_line_assign_link').getUrl() + '?line_id=' + records[0].get('exp_report_line_id') + '&budget_control_enabled=' + '${/model/budget_control/record/@budget_control_enabled}',
                        fullScreen: true
                    });
                } else {
                    Aurora.showWarningMessage('${l:PROMPT}', '${l:PROMPTS.PLEASE__ASSIGNMENT}');
                    return false;
                }
            }

            function policyFunction() {
                var record = $('exp_report_head').getAt(0);
                // if(records.length != 1){
                // Aurora.showMessage('${l:PROMPT}','${l:CHOOSE_ONE_RECORD}');
                // return;
                // }
                new Aurora.Window({
                    url: $('exp_document_req_policy_query_link').getUrl() + '?exp_report_header_id=' + record.get('exp_report_header_id'),
                    title: '${l:PROMPT.VIEW_POLICIES}',
                    id: 'exp_document_policy_query_screen',
                    fullScreen: true
                });
            }


            function dateValidate(record, name, value) {
                if (name == 'date_from' || name == 'date_to') {
                    var start_date = record.get('date_from');
                    var end_date = record.get('date_to');
                    if (typeof(end_date) != 'undefined' && !Ext.isEmpty(end_date)) {
                        if (!compareDate(start_date, end_date)) {
                            return '${l:EXP_REPORT_MAINTAIN.DATE_VALIDATE}';
                        }
                    }
                    return true;
                }
            }

            function compareDate(start, end) {
                if (start > end) {
                    return false;
                }
                return true;
            }

            function seeLog() {
                var url = $('exp_budget_check_log_link_9').getUrl() + '?exp_requisition_header_id=' + exp_report_header_id_bak + '&document_type=EXP_REPORT&doc_header_id=' + exp_report_header_id_bak;
                new Aurora.Window({
                    id: 'exp_budget_check_log_screen',
                    url: url,
                    title: '${l:EXP_REQUESTION_CREATE_SERVICE.LOG}',
                    fullScreen: true
                });
            }

            function seeHistory() {
                var url = $('exp_report_query_history_link_6').getUrl() + '?head_id=' + exp_report_header_id_bak;
                new Aurora.Window({
                    id: 'exp_report_history_window',
                    url: url,
                    title: '${l:REC_REQUISITION_HISTORY}',
                    fullScreen: true
                });
            }

            function planPay() {
                var url = $('exp_report_pmtplan_schedules_link_4').getUrl() + '?exp_requisition_header_id=' + exp_report_header_id_bak + '&document_type=EXP_REPORT';
                new Aurora.Window({
                    url: url,
                    title: '',
                    id: 'exp_report_pmtplan_schedules_screen',
                    fullScreen: true
                });
            }
            
            function createLineFromReq(array) {
                initFlag = 2;
                var type_code = $('exp_report_head').getAt(0).get('exp_report_type_code');
                for (var i = 0;i < array.length;i++) {
                    var item = array[i];
                    //获取头表的报销类型，如果是招待则发送请求获取费用对象的商务目的、客户人数和接待人数 add by wxj
					if (type_code == 'BX0020') {
					    //获取申请单的数据
					    Aurora.request({
                            url: $('get_req_object_values_link').getUrl(),
                            para: {
                                exp_requisition_line_id: array[i]['exp_requisition_line_id']
                            },
                            sync:true,
                            success: function(res) {
                                var resData = res.result.record;
                                if(resData != undefined) {
                                    for(var i = 0;i < resData.length;i++) {
                                        var object_desc = resData[i].expense_object_desc;
                                        var object_col = resData[i].object_column;
                                        if(object_desc != undefined) {
                                        	item[object_col] = object_desc;
                                        }
                                    }
                                }
                            },
                            scope: this
                        });
					}
					//add end
                    item['exp_report_header_id'] = exp_report_header_id_bak;
                    lineNum = lineNum + 1;
                    item['line_number'] = lineNum;
                    $('exp_report_lines').add(new Aurora.Record(item));
                    var record = $('exp_report_lines').getCurrentRecord();
                    var header = $('exp_report_head').getAt(0);
                    record.set('payment_type', header.get('exp_report_payment_method'));
                    record.set('payment_flag', header.get('payment_flag'));
                    record.set('period_name', header.get('period_name'));
                    record.set('payment_type_id', header.get('payment_method_id'));
                    //add by Qu yuanyuan将申请单维度6：决策单元带入报销单头上
                    header_dimension = $('exp_report_head_dimension').getAt(0);
                    header_dimension.set('d6', item['d6']);
                    header_dimension.set('e6', item['e6']);
                    //end by Qu yuanyuan

                    //add by wqt
                    record.getMeta().getField('company_name').setReadOnly(true);
                    record.getMeta().getField('unit_name').setReadOnly(true);
                    record.getMeta().getField('expense_type_name').setReadOnly(true);
                    record.getMeta().getField('exp_req_item_name').setReadOnly(true);
                    record.getMeta().getField('d5').setReadOnly(true);
                    //end by wqt
                }
                //add by lq 20190221自动带出计划付款行
                //接收收款对象判断标志 
                var requisition_number = [];
                for (var j = 0;j < array.length;j++) {
                    var item1 = array[j];
                   
                    var exp_requisition_number= item1['exp_requisition_number'];
                    
                   //判断改申请单是否已经存在在数组里,-1代表没有重复
                 if (requisition_number.indexOf(item1['exp_requisition_number']) == -1){
                     requisition_number.push(item1['exp_requisition_number']);
                     j=j;
                 }else{
                     continue;
                 }
                    
                    Aurora.request({
                    url: $('get_csh_pay_link').getUrl(),
                    para: {
                        exp_requisition_number: exp_requisition_number
                    },
                    success: function(res) {
                        
                      
                        // alert(res.result.record.length);
                        var header_record = $('exp_report_head').getAt(0);
                        // var exp_report_attach_id=header_record.get('exp_report_attach_id');
                        // header_record.set('exp_report_attach_id',1);
                        if (res.result.record.length){
                        for (var k = 0;k < res.result.record.length;k++) {
                            var pmtitem = res.result.record[k];
                            // $('pmtplan_schedules_ds').add(new Aurora.Record(pmtitem));
                            var pmtrecord = $('pmtplan_schedules_ds').create();
                            // var pmtrecord = $('pmtplan_schedules_ds').getCurrentRecord();
                            
                            pmtrecord.set('due_amount', pmtitem['amount']);
                            pmtrecord.set('payee_type', pmtitem['partner_category_name']);
                	        pmtrecord.set('payee_type_value', pmtitem['partner_category']);
                	        pmtrecord.set('payee_partner_name', pmtitem['partner_name']);
                	        pmtrecord.set('payee_id', pmtitem['partner_id']);
                	        pmtrecord.set('account_number', pmtitem['account_number']);
                	        pmtrecord.set('account_name', pmtitem['account_name']);
                	        pmtrecord.set('payment_type_id', pmtitem['payment_method_id']);
                	        pmtrecord.set('payment_method', pmtitem['payment_method']);
                	        pmtrecord.set('payment_method_code',pmtitem['payment_method_code']);
                	        pmtrecord.set('schedule_start_date', header_record.get('exp_report_data'));
                	        pmtrecord.set('schedule_due_date', pmt_schedule_due_date);
                	        pmtrecord.set('currency_name', header_record.get('exp_report_currency_name'));
                	        pmtrecord.set('currency', header_record.get('exp_report_currency_code'));
                	        if (pmtitem['bank_statement']){
                	        pmtrecord.set('bank_statement',pmtitem['bank_statement']);
                	        };
                            
                        }
                    }else{
                          var pmtrecord = $('pmtplan_schedules_ds').create();
                            pmtrecord.set('due_amount', res.result.record.amount);
                            pmtrecord.set('payee_type', res.result.record.partner_category_name);
                	        pmtrecord.set('payee_type_value', res.result.record.partner_category);
                	        pmtrecord.set('payee_partner_name', res.result.record.partner_name);
                	        pmtrecord.set('payee_id', res.result.record.partner_id);
                	        pmtrecord.set('account_number', res.result.record.account_number);
                	        pmtrecord.set('account_name', res.result.record.account_name);
                	        pmtrecord.set('payment_type_id', res.result.record.payment_method_id);
                	        pmtrecord.set('payment_method', res.result.record.payment_method);
                	        pmtrecord.set('payment_method_code',res.result.record.payment_method_code);
                	        pmtrecord.set('schedule_start_date', header_record.get('exp_report_data'));
                	        pmtrecord.set('schedule_due_date', pmt_schedule_due_date);
                	        pmtrecord.set('currency_name', header_record.get('exp_report_currency_name'));
                	        pmtrecord.set('currency', header_record.get('exp_report_currency_code'));
                	        if (res.result.record.bank_statement){
                	        pmtrecord.set('bank_statement',res.result.record.bank_statement);
                	        };
                    };
                                
                        }
                    
                });
                }
                 
                    // end add
                initFlag = 1;
                impFlag = 1;
            }

            function pmtLineLoad(ds) {
                var mobil_flag = '${/model/head_data/record/@mobil_flag}';
                var records = $('pmtplan_schedules_ds').getAll();
                var frozen_flag = 'N';
                var len = records.length;
                //add by wqt
                for (var k = 0;k < len;k++) {
                    if (records[k].get('frozen_flag') == 'Y') {
                        frozen_flag = 'Y'
                    }
                }
                if (frozen_flag == 'N') {
                    $('pmt_grid').hideColumn('schedule_due_date');
                }
                //payment_method add by lq 20180925 若单据头币种非当前账套币种和混合币种的时候，不允许修改付款方式,且付款方式默认外币支付
                var head_record=$('exp_report_head').getAt(0);
                var functional_currency_code='${/model/currency_code_path/record/@functional_currency_code}';
                var head_currency_code=head_record.get('exp_report_currency_code');
                 for (var h = 0;h < len;h++) {
                    if (head_currency_code==functional_currency_code||head_currency_code=='OTHER'){
                    	records[h].getField('payment_method').setReadOnly(false);
                	}else{
                    	records[h].getField('payment_method').setReadOnly(true);
                    }
                    var payeeType = records[h].get('payee_type_value');
                    var payee_partner_name=records[h].get('payee_partner_name');
                    if(payeeType == 'EMPLOYEE'&&(payee_partner_name==''||payee_partner_name==undefined)) {
                        records[h].set('payee_partner_name', '${/model/pay_name/record/@description}');
                        records[h].set('payee_id', '${/model/pay_name/record/@id}');
                        records[h].set('account_number', '${/model/pay_name/record/@account_number}');
                        records[h].set('account_number_hide', '${/model/pay_name/record/@account_number_hide}');
                        records[h].set('account_name', '${/model/pay_name/record/@account_name}');
                        records[h].set('bank_code', '${/model/pay_name/record/@bank_code}');
                        records[h].set('bank_name', '${/model/pay_name/record/@bank_name}');
                        records[h].set('bank_location_code', '${/model/pay_name/record/@bank_location_code}');
                        records[h].set('bank_location_name', '${/model/pay_name/record/@bank_location_name}');
                        records[h].set('province_code', '${/model/pay_name/record/@province_code}');
                        records[h].set('province_name', '${/model/pay_name/record/@province_name}');
                        records[h].set('city_code', '${/model/pay_name/record/@city_code}');
                        records[h].set('city_name', '${/model/pay_name/record/@city_name}');
                    }
                    //add by lq 20181031根据费用项目为判断该报销单为餐补自动生成报销单，计划付款行不可修改
                    if (mobil_flag=='Y'){
                       var pmtcolumns = $('pmt_grid').columns;
                       for (var i = 0;i< pmtcolumns.length;i++) {
                        var pmtcol = pmtcolumns[i];
	                     //将列置成不能编辑
	                     pmtcol.editor = '';
                         }
                       }
                 }
                //end add
                    //add by lyt 2018.12.17 收款对方为S类型的供应商时，银行附言为必输。HGI账套不使用银行附言    
					var lineData=$('pmtplan_schedules_ds').getAll();
 					for(var k=0;k<lineData.length;k++){
					    if(lineData[k].get('vender_type_code')=='S' && '${/model/account_set/record/@account_set}'!=1){
					        lineData[k].getField('bank_statement').setRequired(true);
					    }else{
					        lineData[k].getField('bank_statement').setRequired(false);
					    }
					} 
            }
            
            function pmtLineAdd(ds,record){
                var line = $('exp_report_lines').getAt(0);
				record.set('due_amount', line.get('report_functional_amount'));
            }

            function lineLoadFunction(ds) {
              var document_type='${/model/head_data/record/@exp_report_type_code}';
              //add by lq 20190530 香港HGI Corporate Card报销单显示AE编号和AE员工等字段，并且必输
                if(document_type=='HGIBX0100'){
                    /* $('grid').showColumn('ae_number'); */
                    $('grid').showColumn('ae_number_hide');
                    $('grid').showColumn('ae_employee');
                    $('grid').showColumn('hgi_employee');
                }else{
                    /* $('grid').hideColumn('ae_number');  */
                    $('grid').hideColumn('ae_number_hide');
                    $('grid').hideColumn('ae_employee');
                    $('grid').hideColumn('hgi_employee');
                }
                //end add
                initLineIndex = $('exp_report_lines').getAll().length;
                // alert('行加载时initLineIndex: ' + initLineIndex + '--index: ' + index);
                var record = $('exp_report_head').getCurrentRecord();
                var value = record.get('exp_report_payee_id');
                var payee_category = record.get('exp_report_payee_category');
                var vat_special_invoice_include = record.get('vat_special_invoice_include');
                //add by HJ
                if (payee_category == 'EMPLOYEE') {
                    $('exp_employee_accounts_ds').setQueryParameter('employee_id', value);
                    $('exp_employee_accounts_ds').setQueryParameter('primary_flag', 'Y');
                    $('exp_employee_accounts_ds').query();
                } else if (payee_category == 'VENDER') {
                    $('pur_vender_accounts_ds').setQueryParameter('vender_id', value);
                    $('pur_vender_accounts_ds').setQueryParameter('primary_flag', 'Y');
                    $('pur_vender_accounts_ds').query();
                } else {
                    $('ord_customer_accounts_ds').setQueryParameter('customer_id', value);
                    $('ord_customer_accounts_ds').setQueryParameter('primary_flag', 'Y');
                    $('ord_customer_accounts_ds').query();
                }

                // end add
                //add by lq 20180907 根据单据类型隐藏客户字段
                    var exp_report_type_code=record.get('exp_report_type_code');
                    var unit_id=record.get('unit_id');
                    var company_id=record.get('company_id');
                     Aurora.request({
                    url: $('get_customer_check_link').getUrl(),
                    para: {
                        exp_report_type_code: exp_report_type_code,
                        unit_id:unit_id,
                        company_id:company_id
                    },
                    success: function(res) {
                                if(res.result.record.v_count>0){
                                    $('grid').showColumn('line_customer_name');
                                    //return 'company_combox';
                                    
                                }else if(res.result.record.v_count==0){
                                    $('grid').hideColumn('line_customer_name');
                                }
                        }
                    
                });
                //end add
                //add  by lq 20190613 根据部门范围判断费用对象配置的客户段是否隐藏
                 Aurora.request({
                    url: $('get_customer_check_link1').getUrl(),
                    para: {
                        exp_report_type_code: exp_report_type_code,
                        unit_id:unit_id,
                        company_id:company_id
                    },
                    success: function(res) {
                                if(res.result.record.counta>0){
                                    //add 取费用对象动态列的列名
                        Aurora.request({
                            url: $('get_object_check_link1').getUrl(),
                            para: {
                                customer_code: 'FY0080'
                            },
                            sync: true,
                            success: function(res) {
                                var customer_id=res.result.record.customer_id;
                                $('grid').hideColumn(customer_id);
                                var lineRecords=$('exp_report_lines').getAll();
                                     for(var hh=0;hh<lineRecords.length;hh++){
                                         lineRecords[hh].getField(res.result.record.customer_id).setRequired(false);
                                       }
                               
                            },
                            scope: this
                        });
                                    
                                }
                        }
                    
                });
                //end add
                var vat_special_invoice_include = record.get('vat_special_invoice_include');
                if (vat_special_invoice_include == "Y") {
                    //报销单行新增字段隐藏
                    $('grid').showColumn('invoice_type_desc');
                    $('grid').showColumn('invoice_number');
                    $('grid').showColumn('invoice_status_desc');
                    $('grid').showColumn('invoice_code');
                    $('grid').showColumn('invoice_date');
                    //$('grid').showColumn('usage_type_desc');
                    $('grid').showColumn('tax_amount');
                    $('grid').showColumn('sale_amount');
                    $('grid').showColumn('tax_rate');
                    // $('grid').showColumn('input_tax_struc_detail_desc');
                } else if (vat_special_invoice_include == "N") {
                    //报销单按现有的正常显示。
                    $('grid').hideColumn('invoice_type_desc');
                    $('grid').hideColumn('invoice_number');
                    $('grid').hideColumn('invoice_status_desc');
                    $('grid').hideColumn('invoice_code');
                    $('grid').hideColumn('invoice_date');
                    //$('grid').hideColumn('usage_type_desc');
                    $('grid').hideColumn('tax_amount');
                    $('grid').hideColumn('sale_amount');
                    $('grid').hideColumn('tax_rate');
                    $('grid').hideColumn('input_tax_struc_detail_desc');
                }
                // headAmountChanged();
                //added by mjj at 2014-07-17 行加载时检查费用政策
                var records = $('exp_report_lines').getAll();
                var len = records.length;
                //add by lq 20180914
                //add by lyt 2019.5.23HGI账套发票号码为必输
                var hgi_flag='${/model/account_set/record/@account_set}';
                //add 发票号码必输
                if(hgi_flag==1){
                    $('exp_report_lines').getField('hgi_invoice_number').setRequired(true);
                }
                var type_code='${/model/report_type_code/record/@exp_type_code}';
                for(var z=0;z<len;z++){
                    //add by lyt petty Cash 薪酬福利 税费事项 发票号码不是必输
                   if(hgi_flag==1 && type_code!='HGIBX0090' && type_code!='HGIBX0050' && type_code!='HGIBX0030')
                   //records[z].getField('hgi_invoice_number').setRequired(true);
                  
                var exp_report_type_code=record.get('exp_report_type_code');
                var exp_req_item_id=records[z].get('exp_req_item_id');
                var exp_req_item_name=records[z].get('exp_req_item_name');
                //add by lq 20180925 费用项目为手机费则出现报销月份
                Aurora.request({
                            sync: true,
                            url: $('get_item_check_link').getUrl(),
                            para: {
                                exp_req_item_id: exp_req_item_id
                            },
                            success: function(res) {
                                if(res.result.record.expense_item_code=='666666'){
                                     $('grid').showColumn('month_quantity');
                                     records[z].getField('month_quantity').setRequired(true);
                                }else if(res.result.record.expense_item_code=='106001'){
                                     $('grid').showColumn('month_quantity');
                                     if($('exp_report_head').getAt(0).get('mobil_flag') == 'Y') {
                                     	//修改grid的属性
                                     	var columns = $('grid').columns;
                                     		for (var i = 0;i< columns.length;i++) {
                                     	    	var colname = columns[i].name;
                                     	    	var col = columns[i];
	                                       		//将列置成不能编辑
	                                        	col.editor = '';
                                     		}
                                     }
                                }else{
                                 $('grid').hideColumn('month_quantity'); 
                                 records[z].getField('month_quantity').setRequired(false);
                                }
                            },
                            scope: this
                        });
                //end add
                //add by lq 20180925 培训费用报销单出现境外标识
                if(exp_report_type_code=='BX9007'){
                    $('grid').showColumn('abroad_flag');
                }else{
                    $('grid').hideColumn('abroad_flag');
                }
                //end add
                //if(exp_report_type_code=='BX0050'){
                    if(exp_req_item_id){
                       Aurora.request({
		           url: $('acceptance_flag_query_link').getUrl(),
		           para: {
		                  exp_req_item_id: exp_req_item_id
		                  },
		           success: function(resp,options){
		               var acceptance_flag=resp.result.record.acceptance_flag;
		               if(acceptance_flag=='Y'){
		                    $('grid').showColumn('financial_pay_amount');
		                    $('grid').showColumn('acceptance_doc');
		               }
		               else{
		                   $('grid').hideColumn('financial_pay_amount');
		                   $('grid').hideColumn('acceptance_doc');
		               }
		               
		            },
		          scope: this
		         });  
                    }
                //}
                else{
                    $('grid').hideColumn('financial_pay_amount');
		            $('grid').hideColumn('acceptance_doc');
                }
                }
                //end add
                //add by wqt
                for (var k = 0;k < len;k++) {
                    if (records[k].get('exp_requisition_dist_id') != '' && records[k].get('exp_requisition_dist_id') != undefined) {
                        records[k].getMeta().getField('company_name').setReadOnly(true);
                        records[k].getMeta().getField('unit_name').setReadOnly(true);
                        records[k].getMeta().getField('expense_type_name').setReadOnly(true);
                        records[k].getMeta().getField('exp_req_item_name').setReadOnly(true);
                        records[k].getMeta().getField('d5').setReadOnly(true);
                        if(exp_report_type_code == 'BX0050') {
                    		records[k].getField('line_vender_name').setRequired(true);//wxjaa
                		}
                    }
                }
                //end by wqt
                if (vat_special_invoice_include == 'Y') {
                    for (var i = 0;i < len;i++) {
                        lineInfoInit(records[i]);
                        // if (vat_special_invoice_include == 'Y') {
                        var invoice_type = records[i].get('invoice_type');
                        var special_invoice = records[i].get('special_invoice');
                        var einvoice_flag = records[i].get('einvoice_flag');
                        if (einvoice_flag == 'Y' && special_invoice == 'N') {
                            records[i].getField('invoice_number').setRequired(true);
                            records[i].getField('invoice_number').setReadOnly(false);
                            records[i].getField('invoice_code').setRequired(true);
                            records[i].getField('invoice_code').setReadOnly(false);
                            records[i].getField('invoice_date').setRequired(false);
                            //add by HJ
                            records[i].getField('invoice_date').setReadOnly(true);
                            records[i].getField('tax_rate').setReadOnly(true);
                            records[i].getField('tax_rate').setRequired(false);
                            records[i].getField('tax_amount').setReadOnly(true);
                            records[i].getField('tax_amount').setRequired(false);
                        }
                        if (einvoice_flag == 'N' && special_invoice == 'Y') {
                            var invoice_number_length_limit = records[i].get('invoice_number_digit');
                            var invoice_code_length_limit = records[i].get('invoice_code_digit');
                            if (undefined != invoice_code_length_limit && invoice_code_length_limit != '0') {
                                records[i].getField('invoice_code').setRequired(true);
                                records[i].getField('invoice_code').setReadOnly(false);
                            }
                            if (undefined == invoice_code_length_limit) {
                                records[i].getField('invoice_code').setRequired(true);
                                records[i].getField('invoice_code').setReadOnly(false);
                            }
                            if (invoice_code_length_limit == 0) {
                                records[i].getField('invoice_code').setRequired(false);
                                records[i].getField('invoice_code').setReadOnly(true);
                                records[i].getField('invoice_number').setRequired(true);
                                records[i].getField('invoice_number').setReadOnly(false);
                            }
                            if (undefined != invoice_number_length_limit && invoice_number_length_limit != '0') {
                                records[i].getField('invoice_number').setRequired(true);
                                records[i].getField('invoice_number').setReadOnly(false);
                            }
                            if (invoice_number_length_limit == 0) {
                                records[i].getField('invoice_number').setRequired(false);
                                records[i].getField('invoice_number').setReadOnly(true);
                            }
                            records[i].getField('invoice_date').setRequired(true);
                            records[i].getField('invoice_date').setReadOnly(false);
                            records[i].getField('tax_rate').setReadOnly(false);
                            records[i].getField('tax_rate').setRequired(true);
                            records[i].getField('tax_amount').setReadOnly(false);
                            records[i].getField('tax_amount').setRequired(true);
                        }
                        if (einvoice_flag == 'N' && special_invoice == 'N') {
                            records[i].getField('invoice_number').setRequired(false);
                            records[i].getField('invoice_number').setReadOnly(true);
                            records[i].getField('invoice_code').setRequired(false);
                            records[i].getField('invoice_code').setReadOnly(true);
                            records[i].getField('invoice_date').setRequired(false);
                            records[i].getField('invoice_date').setReadOnly(true);
                            records[i].getField('tax_rate').setReadOnly(true);
                            records[i].getField('tax_rate').setRequired(false);
                            records[i].getField('tax_amount').setReadOnly(true);
                            records[i].getField('tax_amount').setRequired(false);
                        }
                    }
                }
                if (vat_special_invoice_include == "N") {
                    for (var i = 0;i < len;i++) {
                        records[i].getField('invoice_type_desc').setRequired(false);
                        records[i].getField('invoice_number').setRequired(false);
                        records[i].getField('invoice_status_desc').setRequired(false);
                        records[i].getField('invoice_code').setRequired(false);
                        record.getField('invoice_date').setRequired(false);
                        records[i].getField('tax_amount').setRequired(false);
                        records[i].getField('tax_rate').setRequired(false);
                    }
                }
                
                // var exp_req_item_id = records[k].get('exp_req_item_id');
	  	        var exp_report_header_id = $('exp_report_head').getAt(0).get('exp_report_header_id');
	  			Aurora.request({
                    url: $('exp_report_create_benefit_link').getUrl(),
                    scope: this,
                    para: { 
                        exp_report_header_id   :exp_report_header_id,
                        exp_report_line_id     :null
                    },
                    success: function(res) {
							var	count = res.result.count;	
							 if (count > 0) {
		              			 $('grid').showColumn('benefit_editor');
                    	     }else{
                    	         $('grid').hideColumn('benefit_editor');
                    	     }
                     }
                 });
                
                //add by HJ 2017.9.6
                var amortization_flag = '${/model/budget_control/record/@amortization_flag}';
                if (amortization_flag == 'N') {
                    $('grid').hideColumn('income_period_from');
                    $('grid').hideColumn('income_period_to');
                }
                if (amortization_flag == 'Y') {
                    $('grid').showColumn('income_period_from');
                    $('grid').showColumn('income_period_to');
                }
                
                //add by wxj
                operationFrozenColumn();
                
                //如果单据类型是招待费用报销单则显示 add by wxj
                var typeCode = $('exp_report_head').getAt(0).get('exp_report_type_code');
                 for (var k = 0;k < len;k++) {
                     if(typeCode == 'BX0020'){
                          records[k].getField('receptionist_desc').setRequired(true);
                          records[k].getField('receptionist_date').setRequired(true);
                          var report_type_ds = $('exp_expense_type_ds');
                    	  report_type_ds.setQueryParameter('company_id', records[k].get('company_id'));
                		  report_type_ds.query();
                     }
                         else{
                             records[k].getField('receptionist_desc').setRequired(false); 
                             records[k].getField('receptionist_date').setRequired(false);
                         }
                     }
                 
                if(typeCode == 'BX0020') {
                    $('grid').showColumn('receptionist_desc');
                    $('grid').showColumn('receptionist_date');
                    $('grid').hideColumn('description');
                    
                }else{
                    $('grid').hideColumn('receptionist_desc');
                    $('grid').hideColumn('receptionist_date');
                    $('grid').showColumn('description');
                }
                
                /* var head_record=$('exp_report_head').getAt(0);
                var pmtplan_record=$('pmtplan_schedules_ds').getAt(0);
                
                var exp_report_number=head_record.get('exp_report_number');
                var exp_report_header_id=head_record.get('exp_report_header_id');
                
                Aurora.request({
                            url: $('get_pmtplan_record_amount').getUrl(),
                            para: {
                                exp_report_header_id: exp_report_header_id
                            },
                            sync: true,
                            success: function(res) {
                                //alert(res.result.record.amount);
                                if(pmtplan_record) {
                                	pmtplan_record.set('due_amount', res.result.record.amount);
                                }
                            },
                            scope: this
                        }); */
                        
                        //todo
                        var headDataSet=$('exp_report_head');
						var headData=headDataSet.getAt(0);
						var field2=headData.get('exp_report_header_id');
/* 						if (typeof field2==='undefined')
						{
						    createLineRecord();
						} */
                
            }

            function priceValidator(record, name, value) {
                if (record.get('p_upper_limit')) {
                    if (parseFloat(value) > parseFloat(record.get('p_upper_limit')) && record.get('p_commit_flag') && record.get('p_commit_flag') == 'N') {
                        return '${l:EXP_REPORT_CREATE.CHECK1}';
                    }
                }

                if (record.get('p_lower_limit')) {
                    if (parseFloat(value) < parseFloat(record.get('p_lower_limit')) && record.get('p_commit_flag') && record.get('p_commit_flag') == 'N') {
                        return '${l:EXP_REPORT_CREATE.CHECK2}';
                    }
                }

                return true;
            }

            function uploadFile() {
                var url = /*${/request/@context_path}/uploadFile.screen*/
                $('uploadFile_link_10').getUrl() + '?table_name=EXP_REPORT_HEADERS&header_id=' + exp_report_header_id_bak
                new Aurora.Window({
                    url: url,
                    title: '${l:ATM.UPLOAD_ATTACHMENT}',
                    id: 'check_upload_file_screen',
                    width: 600,
                    height: 400
                });
            }
            //当修改动态列里面的数据后保存标志变为false

            function dynamicUpdate() {
                saveFlag = false;

            }

            function line_number(value, record, name) {
                return ($('pmtplan_schedules_ds').indexOf(record) + 1) * 1;
            }

            function submit_success() {
                $('pmtplan_schedules_ds').query();
            }

            function edit_function_grop(value, record, name) {
                var account_set='${/model/account_set/record/@account_set}';
                var url = $('exp_prepayment_post_link_2').getUrl() + '?payment_schedule_line_id=' + record.get('payment_schedule_line_id')+'&account_set='+account_set;
                var head_record=$('exp_report_head').getAt(0);
                var previev_flag=head_record.get('previev_flag');
                var csh_wirte_history = record.get('csh_wirte_history');
                if (!record.isNew) {
                    if ((record.get('un_write_off_flag') == 'N' || csh_wirte_history > 0)&&previev_flag!= 'Y') {
                        return '<a style="color:red" href="javascript:view_doc(\'' + url + '\')">' + '${l:EXP_REPORT_PMTPLAN_SCHEDULES.VERIFICATION_LOAN}' + '</a>';
                    } else {
                        // return '<a href="javascript:view_doc(\'' + url + '\')">' + '${l:EXP_REPORT_PMTPLAN_SCHEDULES.VERIFICATION_LOAN}' + '</a>';
                        return '<a href="#">' + '${l:EXP_REPORT_PMTPLAN_SCHEDULES.VERIFICATION_LOAN}' + '</a>';
                    }
                }
            }

            function view_doc(url) {
                new Aurora.Window({
                    url: url,
                    fullScreen: true,
                    title: '',
                    id: 'exp_prepayment_post_screen'
                });
            }

            function init_bak() {
                var t = $('exp_report_head').getAt(0);
                var r = t.getMeta();
                var f1 = r.getField('exp_report_rate_type_name');
                var f2 = r.getField('exp_report_rate_quotation_name');
                var f3 = r.getField('exp_report_rate');

                if (t.get('exp_report_currency_code') != t.get('functional_currency_code')) {} else {
                    f1.setReadOnly(true);
                    f2.setReadOnly(true);
                    f3.setReadOnly(true);
                    f3.setRequired(true);
                    t.set('exp_report_rate', 1);
                }
                if (exp_report_header_id_bak != '') {
                    r.getField('exp_report_data').setReadOnly(true);
                    r.getField('exp_report_payment_method').setReadOnly(true);
                    r.getField('exp_report_position').setReadOnly(true);
                    r.getField('exp_report_payee_category_name').setReadOnly(true);
                    r.getField('exp_report_payee_name').setReadOnly(true);
                    /* r.getField('exp_report_description').setReadOnly(true); */
                    for (var fieldName in t.data) {
                        if (fieldName != 'exp_report_description' && fieldName != 'exp_report_attach_id' && fieldName != "vat_special_invoice_include" && fieldName != "previev_flag") {
                            r.getField(fieldName).setReadOnly(true);
                        }
                    }
                    f1 = r.getField('exp_report_payee_name');
                    var payee_category = t.get('exp_report_payee_category');
                    if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_req_lov');
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.exp_vender_req_lov');
                    } else {
                        f1.setLovService('expm.exp_customer_req_lov');
                    }
                }
            }

            function pmtQuery() {
                $('pmtplan_schedules_ds').query();
            }

            //计划付款行删除2013/1/7 wgf

            function remove_record(ds, record, index) {
                removeFlag = true;
                
                //更新linenumber by wxj 20180911
                updateLineNumber($('pmtplan_schedules_ds').getAll());
            }
            
            //更新linenumber by wxj 20180911
            function updateLineNumber(lineData) {
                for(var i = 0;i < lineData.length;i++) {
                    var record = lineData[i];
                    if(record.data.line_number != (i+1)*1) {
                        record.set('line_number',(i+1)*1);
                    }
                }
            }

            //add 2013/1/11 wgf 收款对象修改

            function payee_name_lov_commit(lov, r1, r2) {
                var payee_category = r1.get('exp_report_payee_category');
                if (payee_category == 'EMPLOYEE') {
                    r1.set('exp_report_payee_id', r2.get('employee_id'));
                    r1.set("bank_code", r2.get("bank_code"));
                    r1.set("bank_name", r2.get("bank_name"));
                    r1.set("bank_location_code", r2.get("bank_location_code"));
                    r1.set("bank_location", r2.get("bank_location"));
                    r1.set("province_code", r2.get("province_code"));
                    r1.set("province_name", r2.get("province_name"));
                    r1.set("city_code", r2.get("city_code"));
                    r1.set("city_name", r2.get("city_name"));
                    r1.set("account_number", r2.get("account_number"));
                    r1.set("account_name", r2.get("account_name"));
                    r1.set("notes", r2.get("notes"));
                } else if (payee_category == 'VENDER') {
                    r1.set('exp_report_payee_id', r2.get('vender_id'));
                    r1.set("bank_code", r2.get("bank_code"));
                    r1.set("bank_name", r2.get("bank_name"));
                    r1.set("bank_location_code", r2.get("bank_location_code"));
                    r1.set("bank_location", r2.get("bank_location"));
                    r1.set("province_code", r2.get("province_code"));
                    r1.set("province_name", r2.get("province_name"));
                    r1.set("city_code", r2.get("city_code"));
                    r1.set("city_name", r2.get("city_name"));
                    r1.set("account_number", r2.get("account_number"));
                    r1.set("account_name", r2.get("account_name"));
                    r1.set("notes", r2.get("notes"));
                } else {
                    r1.set('exp_report_payee_id', r2.get('customer_id'));
                    r1.set("bank_code", r2.get("bank_code"));
                    r1.set("bank_name", r2.get("bank_name"));
                    r1.set("bank_location_code", r2.get("bank_location_code"));
                    r1.set("bank_location", r2.get("bank_location"));
                    r1.set("province_code", r2.get("province_code"));
                    r1.set("province_name", r2.get("province_name"));
                    r1.set("city_code", r2.get("city_code"));
                    r1.set("city_name", r2.get("city_name"));
                    r1.set("account_number", r2.get("account_number"));
                    r1.set("account_name", r2.get("account_name"));
                    r1.set("notes", r2.get("notes"));
                }
            }

            // modify 20130401 计划付款行添加 银行账号修改功能

            function bankAssign(value, record, name) {
                var pmtLineIndex = $('pmtplan_schedules_ds').indexOf(record);
                return '<a href="javascript:bankAssignInfo(' + pmtLineIndex + ')">${l:CSH_PAYMENT.BANK_ACCOUNT_CODE}</a>';
            }

            function bankAssignInfo(pmtLineIndex) {
                new Aurora.Window({
                    id: 'exp_bank_assign_window',
                    url: $('exp_bank_assign_link').getUrl() + '?line_index=' + pmtLineIndex + '&ds_name=pmtplan_schedules_ds',
                    title: '${l:CSH_PAYMENT.BANK_ACCOUNT_CODE}',
                    fullScreen: true
                });
            }

            function getRecordsFromBankCode(record) {
                var pmt_line_index = record.get('line_index');
                var pmtplan_schedules_record = $('pmtplan_schedules_ds').getAt(pmt_line_index);
                pmtplan_schedules_record.set('account_number', record.get('account_number'));
                pmtplan_schedules_record.set('account_name', record.get('account_name'));
                pmtplan_schedules_record.set('bank_code', record.get('bank_code'));
                pmtplan_schedules_record.set('bank_name', record.get('bank_name'));
                pmtplan_schedules_record.set('bank_location_code', record.get('bank_location_code'));
                pmtplan_schedules_record.set('bank_location_name', record.get('bank_location_name'));
                pmtplan_schedules_record.set('province_code', record.get('province_code'));
                pmtplan_schedules_record.set('province_name', record.get('province_name'));
                pmtplan_schedules_record.set('city_code', record.get('city_code'));
                pmtplan_schedules_record.set('city_name', record.get('city_name'));
            }

            // added by HM @2016-04-13 营改增-税率显示

            function expYGZtaxRateRenderer(value, record, name) {
                if (Aurora.isEmpty(value)) {
                    return value;
                } else if (isNaN(value)) {
                    return '';
                } else {
                    return Aurora.formatNumber(value * 100, 0) + '%';
                }
            }

            // added by HM @2016-05-11 税校验

            function expYGZtaxValidator(record, name, value) {
                if (name == 'tax_amount' || name == 'sale_amount' || name == 'report_amount') {
                    //add by lyt 2019.3.25 报销单允许填写负数金额
/*                     if (record.get('usage_type') == 'YT999') {
                        if (value > 0) return '用途类型是红票时，该行金额必须是负数！';
                    } else {
                        if (value < 0) return '金额必须是正数！';
                    } */
                    if (name == 'tax_amount' || name == 'sale_amount') {
                        if (record.get('special_invoice') == 'Y') {
                            if (value == 0) return '税额不能为0！';
                            if (name == 'tax_amount') var tax_amount = value;
                            else var tax_amount = record.get('tax_amount');
                            if (name == 'sale_amount') var sale_amount = value;
                            else var sale_amount = record.get('sale_amount');
                            if ((tax_amount / sale_amount) >= 1) {
                                return '当前税额超过不含税金额，请重新确认税额！';
                            }
                        }
                    }
                } else if (name == 'tax_rate') {
                    if (value > 1) {
                        return '当前税额超过不含税金额，请重新确认税额！';
                    } else if (value < 0) {
                        return '增值税专用发票税额不可为0！';
                    }
                }
                if (name == 'report_amount') {
                    var value1 = value.toString();
                    var len = value1.length;
                    if (len > 16) {
                        value = parseInt(value1.substring(0, 16));
                        record.set('report_amount', value);
                    }
                }
                //add by lq
                // if (record.get('p_upper_limit')) {
                    // if (parseFloat(value) > parseFloat(record.get('p_upper_limit')) && record.get('p_commit_flag') && record.get('p_commit_flag') == 'N') {
                        // return '${l:EXP_REPORT_CREATE.CHECK1}';
                    // }
                // }

                // if (record.get('p_lower_limit')) {
                    // if (parseFloat(value) < parseFloat(record.get('p_lower_limit')) && record.get('p_commit_flag') && record.get('p_commit_flag') == 'N') {
                        // return '${l:EXP_REPORT_CREATE.CHECK2}';
                    // }
                // }

                return true;
                //end add
                return true;
            }

            // added by HM @2016-05-07 营改增-发票长度编码校验

            function expYGZInvoiceLengthValidateFun(record, name, value) {
                var invoice_number_length_limit = record.get('invoice_number_digit');
                var invoice_code_length_limit = record.get('invoice_code_digit');
                if (record.get('special_invoice') == 'Y' || record.get('einvoice_flag') == 'Y') {
                    if (undefined != invoice_number_length_limit && undefined != invoice_code_length_limit && invoice_number_length_limit != 0 && invoice_code_length_limit != 0) {
                        if (name == 'invoice_number') {
                            if ('' != value && undefined != value && null != value) {
                                if (value.length != invoice_number_length_limit) {
                                    return '发票号码长度必须为' + invoice_number_length_limit + '位';
                                }
                            }
                        } else if (name == 'invoice_code') {
                            if ('' != value && undefined != value && null != value) {
                                if (value.length != invoice_code_length_limit) {
                                    return '发票代码长度必须为' + invoice_code_length_limit + '位';
                                }
                            }
                        }
                    }
                    if (undefined != invoice_number_length_limit && invoice_number_length_limit != 0 && 0 == invoice_code_length_limit) {
                        if (name == 'invoice_number') {
                            if ('' != value && undefined != value && null != value) {
                                if (value.length != invoice_number_length_limit) {
                                    return '发票号码长度必须为' + invoice_number_length_limit + '位';
                                }
                            }
                        }
                    }
                    if (0 == invoice_number_length_limit && undefined != invoice_code_length_limit && 0 != invoice_code_length_limit) {
                        if (name == 'invoice_code') {
                            if ('' != value && undefined != value && null != value) {
                                if (value.length != invoice_code_length_limit) {
                                    return '发票代码长度必须为' + invoice_code_length_limit + '位';
                                }
                            }
                        }
                    }
                }
                return true;
            }
            // added by HM @2016-07-29 验证电子发票是否被使用过

            function expYGZCheckEInvoiceUsedFun() {
                var records;
                var exp_report_numbers = '';
                var invoice_number;
                // added by HM @2016-07-29 验证电子发票是否被使用过
                Aurora.request({
                    url: $('exp_ygz_check_einvoice_used_link').getUrl(),
                    para: {
                        exp_report_header_id: exp_report_header_id_bak
                    },
                    success: function(arg) {
                        if (Aurora.isEmpty(arg.result.record)) {
                            // bgtCheck();
                            checkInvoice();
                        } else {
                            if (isNaN(arg.result.record.length)) {
                                invoice_number = arg.result.record.invoice_number;
                                exp_report_numbers = arg.result.record.exp_report_number + ' ';
                            } else {
                                records = arg.result.record;
                                invoice_number = records[0].invoice_number;
                                for (var i = 0;i < records.length;i++) {
                                    if (records[i].einvoice_conut != 0) {
                                        exp_report_numbers += records[i].exp_report_number + ' ';
                                    }
                                }
                            }
                            Aurora.showConfirm('${l:PROMPT}', '发票编号为 ' + invoice_number + ' 发票已经在 ' + exp_report_numbers + '中报销，请确认是否继续使用该张发票报销？', function() {
                                // bgtCheck();
                            checkInvoice();
                            }, '', 300, 150);
                        }
                    },
                    failure: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    error: function() {
                        //add by zhaofan 增加锁屏，防止重复点击    Start
                        if ($('new_report_detail_window')) {
                            Aurora.Masker.unmask($('new_report_detail_window').wrap);
                        } else {
                            Aurora.Masker.unmask(Ext.getBody());
                        };
                        //add by zhaofan 增加锁屏，防止重复点击    End
                    },
                    scope: this
                });
            }
            //add by 15453	影像上传,调用接口...

            function imgUpload() {
                var num = $('exp_report_head').getCurrentRecord().get('exp_report_number');
                Aurora.request({
                    url: $('exp_image_upload_link').getUrl(),
                    para: {
                        BusinessNo: num,

                    },
                    success: function(data) {
                        if (data.result.url) { /* alert(data.result.url); */
                            window.open(data.result.url);
                        } else {
                            Aurora.showWarningMessage('${l:PROMPT}', '网址错误!');
                        }
                    },
                    failure: function() {
                        Aurora.showWarningMessage('${l:PROMPT}', '调用失败!');
                    },
                    error: function() {
                        Aurora.showWarningMessage('${l:PROMPT}', '调用过程中出现错误!');
                    },
                    scope: this
                });
            }
            //end
            //and by HJ

            function printFunction() {
                var reportName = $('exp_report_head').getAt(0).get('report_name');
                var reportParamName = $('exp_report_head').getAt(0).get('report_param_name');
                if (!reportName) {
                    Aurora.showInfoMessage('${l:PROMPT}', '${l:SYS_REPORT_NOT_ASSIGN}');
                    return;
                }
                if (!reportParamName) {
                    Aurora.showInfoMessage('${l:PROMPT}', '${l:SYS_REPORT_PARAM_NOT_DEFINED}');
                    return;
                }
                window.open('${/request/@context_path}/reports?__report=' + reportName + '&' + reportParamName + '=' + $('exp_report_head').getAt(0).get('exp_report_header_id') + '&__format=pdf');
                //window.open('http://localhost:8888/WebViewerExample/frameset?__report=test.rptdesign&sample=my+parameter');
            }

            function frozen_flag_editor(record, name) {
                if (record.get('frozen_flag') == 'Y') {
                    //$('pmt_grid').showColumn('schedule_due_date');
                } else {
                    $('pmt_grid').hideColumn('schedule_due_date');
                }
                return 'pmt_checkbox';
            }

            function seehelp() {
                var url = $('cux_institution_document_query_link').getUrl();
                new Aurora.Window({
                    id: 'cux_institution_document_query_screen',
                    url: url,
                    title: '帮助',
                    fullScreen: true
                });
            }
            //add by lq 20180829 影像上传
            function ossUpload(){
                //取影像扫描接口url image_query_link
                var uploadurl='${/model/cux_exp_image/record/@uploadurl}';
                var exp_report_number = $('exp_report_head').getCurrentRecord().get('exp_report_number');
                var cus_ip='${/model/cux_exp_image/record/@cus_ip}';
                //取报销人用户code
                var employee_code='zxuser';
                 //window.open(url + "?user.userName=" + employee_code+"&user.password="+123+"&barcode="+exp_report_number);
                 //暂改成附件上传
                 //附件上传需要先插表，再获取seqid
                 Aurora.request({
                    url: $('image_query_link').getUrl(),
                    para: {
                        document_number: exp_report_number,
                    },
                    success: function(resp,options) {
                           var seqid=resp.result.record.seqid;
                           image_upload(uploadurl,seqid,exp_report_number,cus_ip);
                 },
                    scope: this
                });
                 
            }
             function image_upload(uploadurl,seqid,exp_report_number,cus_ip){
                 //add by lq 20190531根据当前登录语言判断影像跳转中英文
                var lang = '${/model/head_data/record/@lang}';
                if (lang=='ZHS'){
                  Aurora.request({
                               url: $('image_submit_link').getUrl(),
                                    para: {
                                   document_number: exp_report_number,
                                   cus_ip:cus_ip,
                                   seqid:seqid,
                                   typeid:1
                                       },
                                  success: function() {
                           
                           // window.open(uploadurl + "?type=" +1+"&barcode="+exp_report_number+"&seqid="+seqid+"&IMGTYPE=1&IMGNAME=GENERAL&CURRENTIMGTYPE=1&CURRENTIMGNAME=GENERAL");
                           var GENERAL='GENERAL';
                           Aurora.post(uploadurl, {type:1,barcode:exp_report_number,seqid:seqid,IMGTYPE:1,IMGNAME:GENERAL,CURRENTIMGTYPE:1,CURRENTIMGNAME:GENERAL},"_blank");
                       
                          },
                      scope: this
                });
                }else{
                  Aurora.request({
                               url: $('image_submit_link').getUrl(),
                                    para: {
                                   document_number: exp_report_number,
                                   cus_ip:cus_ip,
                                   seqid:seqid,
                                   typeid:1
                                       },
                                  success: function() {
                           
                           // window.open(uploadurl + "?type=" +1+"&barcode="+exp_report_number+"&seqid="+seqid+"&IMGTYPE=1&IMGNAME=GENERAL&CURRENTIMGTYPE=1&CURRENTIMGNAME=GENERAL");
                           var GENERAL='GENERAL';
                           var lg='en';
                           Aurora.post(uploadurl, {type:1,barcode:exp_report_number,seqid:seqid,IMGTYPE:1,IMGNAME:GENERAL,CURRENTIMGTYPE:1,CURRENTIMGNAME:GENERAL,LG:lg},"_blank");
                       
                          },
                      scope: this
                });  
                }
                 
             }
            
            //影像下载
            function ossDownload()
            { 
                var viewurl='${/model/cux_exp_image/record/@viewurl}';
                var cus_ip='${/model/cux_exp_image/record/@cus_ip}';
                var exp_report_number = $('exp_report_head').getCurrentRecord().get('exp_report_number');
                Aurora.request({
                    url: $('image_query_link').getUrl(),
                    para: {
                        document_number: exp_report_number,
                    },
                    success: function(resp,options) {
                           var seqid=resp.result.record.seqid;
                           image(exp_report_number,cus_ip,seqid,viewurl);
                 },
                    scope: this
                });
            }
            function image(exp_report_number,cus_ip,seqid,viewurl){
                     Aurora.request({
                               url: $('image_submit_link').getUrl(),
                                    para: {
                                   document_number: exp_report_number,
                                   cus_ip:cus_ip,
                                   seqid:seqid,
                                   typeid:2
                                       },
                                  success: function() {
                        
                           window.open(viewurl + "?type=" +2+"&barcode="+exp_report_number+"&seqid="+seqid+"&IMGTYPE=1&IMGNAME=GENERAL&CURRENTIMGTYPE=1&CURRENTIMGNAME=GENERAL");
                       
                          },
                      scope: this
                });
            }
            //end add
            //oss上传下载

            function ossUpload1() {
                var url = '${/model/url_ds/record/@rpc_client_url}';
                var exp_report_header_id = $('exp_report_head').getCurrentRecord().get('exp_report_header_id');
                Aurora.request({
                    url: $('oss_upload_link').getUrl(),
                    para: {
                        headerId: exp_report_header_id,
                        ossType: "EXP_REPORT_OSS",
                        userId: '${/session/@user_id}'
                    },
                    success: function(data) {
                        if (data.result.map.substr(0, 6) == "failed") {
                            Aurora.showErrorMessage('${l:PROMPT}', data.result.map, null, 200, 300);
                        } else {
                            window.open(url + "/view/OssUpload.html?param=" + data.result.map);
                        }
                    },
                    failure: function() {
                        Aurora.showWarningMessage('${l:PROMPT}', '获取上传信息失败!');
                    },
                    error: function() {
                        Aurora.showWarningMessage('${l:PROMPT}', '获取上传信息异常!');
                    },
                    scope: this
                });
            }

            function ossDownload1() {
                var url = '${/model/url_ds/record/@rpc_client_url}';
                var exp_report_header_id = $('exp_report_head').getCurrentRecord().get('exp_report_header_id');
                Aurora.request({
                    url: $('oss_download_link').getUrl(),
                    para: {
                        headerId: exp_report_header_id,
                        tableName: "EXP_REPORT_OSS"
                    },
                    success: function(data) {
                        if (data.result.msg == 'not found oss') {
                            Aurora.showWarningMessage('${l:PROMPT}', '还没有上传影像！');
                            return;
                        } else if (data.result.msg.substr(0, 6) == "failed") {
                            Aurora.showErrorMessage('${l:PROMPT}', data.result.msg, null, 200, 300);
                            return;
                        } else {
                            Aurora.post(url + "/ossDownload", {
                                'param': data.result.msg,
                                'deteleFlag': 'Y'
                            }, '__blank');
                        }

                    },
                    failure: function() {
                        Aurora.showWarningMessage('${l:PROMPT}', '获取下载信息失败!');
                    },
                    error: function() {
                        Aurora.showWarningMessage('${l:PROMPT}', '获取下载信息异常!');
                    },
                    scope: this
                });
            }
             function reqNumRenderer(value,record,name){
                 if(record.get('preview_exp_report_id')){
				return '<a href="javascript:reqNumNewWindow(' + record.get('preview_exp_report_id') + ',' + record.get('exp_report_type_id') + ',' + record.get('employee_id') +');">' + value + '</a>';
                 }else{
                 }
			}

			function reqNumNewWindow(exp_rep_header_id,exp_report_type_id,employee_id,company_id){
				var url=$('exp_report_maintain_read_only_link2').getUrl()+'?exp_report_header_id='+exp_rep_header_id  + '&canUploadFlag=false';
				window.open(url,'','fullscreen=no,resizable=yes,width=1024,height=630');
			}
           //add by lq 20180914
           function acceptanceRenderer(value,record,name){
               if(!record.isNew){
                   var expReprotheadId=record.get('exp_report_header_id');
                   var expReprotLineId = record.get('exp_report_line_id');
                   var exp_report_type_id=$('exp_report_head').getAt(0).get('exp_report_type_id')
        			return '<a href="javascript:acceptanceRendererWindow('+expReprotheadId+','+exp_report_type_id+')">关联验收单据</a>';  
               }
           }
           
           function acceptanceRendererWindow(expReprotheadId,exp_report_type_id){
                var exp_report_number=$('exp_report_head').getAt(0).get('exp_report_number');
                var employee_id = $('exp_report_head').getAt(0).get('employee_id');
               new Aurora.Window({id:'invoice_info_renderer_window',
        						   url:$('exp_report_accep_document_link').getUrl()+'?exp_report_header_id='+expReprotheadId+'&exp_report_type_id='+exp_report_type_id+'&exp_report_number='+exp_report_number+'&readonly='+'N'+'&employee_id='+employee_id,
        						   title:'资产预付报销单关联',
        						   fullScreen:true});
           }
           //end add
			function invoiceInfoRenderer(value,record,name) {
			    if (!record.isNew){
        			var expReprotLineId = record.get('exp_report_line_id');
        			var exp_report_header_id=record.get('exp_report_header_id');
        			var report_amount=record.get('report_amount');
        			var expItemId = record.get('exp_req_item_id');
        			return '<a href="javascript:invoiceInfoRendererWindow('+expReprotLineId+','+expItemId+','+report_amount+','+exp_report_header_id+')">发票信息</a>';
        		}
			}

			function invoiceInfoRendererWindow(expReprotLineId,expItemId,report_amount,exp_report_header_id){
			    if (typeof expReprotLineId=='undefined' || typeof expItemId=='undefined'){
			        Aurora.showMessage('${l:PROMPT}', '请填写完整报销单信息!');
			        return;
			    }
			    var previev_flag=$('exp_report_head').getCurrentRecord().get('previev_flag');
			    // window.open($('exp_report_invoice_info_link').getUrl()+'?exp_report_line_id='+expReprotLineId);
        		new Aurora.Window({id:'invoice_info_renderer_window',
        						   url:$('exp_report_invoice_info_link').getUrl()+'?exp_report_line_id='+expReprotLineId+'&report_amount='+report_amount + '&exp_item_id='+expItemId+'&create_flag=Y'+'&exp_report_header_id='+exp_report_header_id+'&previev_flag='+previev_flag,
        						   title:'发票信息',
        						   fullScreen:true});
        	}

        	function postScript() {
        	    new Aurora.Window({id:'header_postscript_renderer_window',
        						   url:$('exp_report_header_postscript_link').getUrl()+'?exp_report_header_id='+$('exp_report_head').getAt(0).get('exp_report_header_id'),
        						   title:'${l:EXP_REPORT_READONLY_FOR_WBC.POSTSCRIPT}',
        						   fullScreen:true});
        	}
         //极速报销单拒单回来金额不可以修改
         function report_amount_fun(){
             var mobil_flag = '${/model/head_data/record/@mobil_flag}';
           if ( $('exp_report_head').getAt(0).get('exp_rush_flag') == 'Y'){
               return '';
           }else if(mobil_flag=='Y'){
               return '';
           }
           else{
              return 'numberfield';
           }
         }
         //取行汇率 add by lq 20180831
         function getExchangeRateByQuo1(from_currency,to_currency,exchange_date,exchange_period_name,exchange_rate_type,exchange_rate_quotation,record1) {
                Aurora.request({
                    url: $('get_exchange_rate_by_quotation_link').getUrl(),
                    para: {
                        from_currency: from_currency,
                        to_currency: to_currency,
                        exchange_date: exchange_date,
                        exchange_period_name: exchange_period_name,
                        exchange_rate_type: exchange_rate_type,
                        exchange_rate_quo: exchange_rate_quotation
                    },
                    success: function(res) {
                                record1.set('exchange_rate', res.result.record.exchange_rate);
                                record1.set('exchange_rate_type', exchange_rate_type);
                                record1.set('exchange_rate_quotation', exchange_rate_quotation);
                        }
                    
                });
            }
            
             function OASignRendererWindow() {
              new Aurora.Window({id:'header_oasign_renderer_window',
                       url:$('exp_report_oa_sign_link').getUrl()+'?exp_report_header_id='+$('exp_report_head').getAt(0).get('exp_report_header_id'),
        						   title:'${l:EXP_REPORT_READONLY_FOR_WBC.ATTACH_KM}',
        						   fullScreen:true});
            }
            
            //发票验真
             function checkInvoice() {
                 //add by lyt 2019.1.9发票校验失败后，不走提交流程
                 var error_flag='N';
                 // var exp_report_header_id = '${/parameter/@exp_report_header_id}';
                 var exp_report_header_id=$('exp_report_head').getAt(0).get('exp_report_header_id');
                 //发送请求获取
                 Aurora.request({
                    url: 
                    $('get_exp_report_invoice_dist_info_link').getUrl(),
                    para: {
                        'exp_report_header_id': exp_report_header_id
                    },
                    success: function(res) {
                        var record = res.result.record;
                        var msg = '';
                        if(record != undefined) {
                             var invoice_code = res.result.record.invoice_code; 
                              if(invoice_code != undefined) {
	                                	
	                var the_last_six = res.result.record.last_six;
                    var invoice_code = res.result.record.invoice_code; 
                    var invoice_number = res.result.record.invoice_number;
                    var invoice_date = res.result.record.invoice_date;
                    var price_without_tax = res.result.record.sale_amount;
                    var exp_report_dists_id = res.result.record.exp_report_dists_id;
                    //没有票面税额，并且发票种类不是 INVOICE_TYPE_C 的才进行验真
                    Aurora.request({
                        lockMessage: '${l:HAP_WAITING}',
                        url: $('exp_report_check_invoice_link').getUrl(),
                        sync: true,
                        para: {
                            exp_report_dists_id: res.result.record.exp_report_dists_id,
                            check_type: res.result.record.check_type,
                            submit_flag: 'Y'
                        },
                        success: function(res) {
                            
                            var return_msg = res.result.return_msg;
                            if (return_msg == 'B_INTERFACE' || return_msg == 'A_INTERFACE') {
                                if (res.result.wihthout_tax == null) {
                                    var totalAmount = changeTwoDecimal_f(price_without_tax);
                                } else {
                                    totalAmount = changeTwoDecimal_f(res.result.wihthout_tax);
                                }
                                
                                //调用查验接口
                                Aurora.request({
                                    url: $('cux_invoice_check_link').getUrl(),
                                    sync: true,
                                    para: {
                                        checkCode: the_last_six,
                                        invoiceCode: invoice_code,
                                        invoiceNumber: invoice_number,
                                        billingDate: invoice_date,
                                        totalAmount: totalAmount,
                                        submit_flag: 'Y',
                                        reportDistsId: exp_report_dists_id,
                                        userID: '${/session/@user_id}'
                                    },
                                    success: function(res) {
                                        var returnValue = res.result['returnMsg'];
                                         
                                        if (returnValue != 'success') {
                                            error_flag = 'Y';
                                            Aurora.showMessage('${l:PROMPT}', returnValue, null, 350, 160);
                                            return;
                                        }else{
                                            // finalSubmit1();
                                            bgtCheck();
                                        }
                                    },
                                    error: function() {
                                        error_flag = 'Y';
                                        Aurora.showMessage('${l:PROMPT}', '发票号码:' + res.result.record.invoice_number + '查验失败');
                                        return;
                                    },
                                    failure: function() {
                                        error_flag = 'Y';
                                        return;
                                    },
                                    scope: this
                                });
                            }
                              else {
                             // finalSubmit1();
                                            bgtCheck();
                             }
            
                        },
                        error: function() {
                            error_flag = 'Y';
                            // Aurora.showMessage('${l:PROMPT}', '查验失败');
                            return;
                        },
                        failure: function() {
                            error_flag = 'Y';
                            return;
                        },
                        scope: this
                    });
	                                	
	                                }else{
	                                    
	                                	  if(Array.isArray(record)) {
	                            for(var i = 0;i < record.length;i++) {
	                               
	                                
	                                
	                                
                   /*  if (allData[i].get('nominal_tax') != '' && allData[i].get('nominal_tax') != undefined && allData[i].get('nominal_tax') != null) {
                        continue;
                    }
                    if (allData[i].get('check_type') == 'INVOICE_TYPE_C') {
                     continue;
                     } */
                    var the_last_six = record[i].last_six;
                    var invoice_code = record[i].invoice_code;
                    var invoice_number = record[i].invoice_number;
                    var invoice_date = record[i].invoice_date;
                    var price_without_tax = record[i].sale_amount;
                    var exp_report_dists_id = record[i].exp_report_dists_id;
                    //没有票面税额，并且发票种类不是 INVOICE_TYPE_C 的才进行验真
                    Aurora.request({
                        lockMessage: '${l:HAP_WAITING}',
                        url: $('exp_report_check_invoice_link').getUrl(),
                        sync: true,
                        para: {
                            exp_report_dists_id: record[i].exp_report_dists_id,
                            check_type: record[i].check_type,
                            submit_flag: 'Y'
                        },
                        success: function(res) {
                            var return_msg = res.result.return_msg;
                            if (return_msg == 'B_INTERFACE' || return_msg == 'A_INTERFACE') {
                                if (res.result.wihthout_tax == null) {
                                    var totalAmount = changeTwoDecimal_f(price_without_tax);
                                } else {
                                    totalAmount = changeTwoDecimal_f(res.result.wihthout_tax);
                                }
                                //调用查验接口
                                Aurora.request({
                                    url: $('cux_invoice_check_link').getUrl(),
                                    sync: true,
                                    para: {
                                        checkCode: the_last_six,
                                        invoiceCode: invoice_code,
                                        invoiceNumber: invoice_number,
                                        billingDate: invoice_date,
                                        totalAmount: totalAmount,
                                        submit_flag: 'Y',
                                        reportDistsId: exp_report_dists_id,
                                        userID: '${/session/@user_id}'
                                    },
                                    success: function(res) {
                                        var returnValue = res.result['returnMsg'];
                                        // Aurora.showMessage('${l:PROMPT}', returnValue, null, 350, 160);
                                        if (returnValue != 'success') {
                                            error_flag = 'Y';
                                            Aurora.showMessage('${l:PROMPT}', returnValue, null, 350, 160);
                                            return;
                                        }
                                    },
                                    error: function() {
                                        error_flag = 'Y';
                                        Aurora.showMessage('${l:PROMPT}', '发票号码:' + record[i].invoice_number + '查验失败');
                                        return;
                                    },
                                    failure: function() {
                                        error_flag = 'Y';
                                        return;
                                    },
                                    scope: this
                                });
                            }
                            /*  else {
                             Aurora.showMessage('${l:PROMPT}', return_msg, null, 350, 160);
                             } */
            
                        },
                        error: function() {
                            error_flag = 'Y';
                            // Aurora.showMessage('${l:PROMPT}', '查验失败');
                            return;
                        },
                        failure: function() {
                            error_flag = 'Y';
                            return;
                        },
                        scope: this
                    });
                    
                    
	                            }
	                            
	                            // finalSubmit1();
	                            //add by lyt 2019.1.9 发票验真失败后不走提交流程
	                                        if(error_flag!='Y')
                                            bgtCheck();
                                            else 
                                            return;
                            }
	                                }
                             
                             
                             
                           
                            // else{
                                // msg = msg + record.line_number;
                            // }
                            // Aurora.showInfoMessage('提示','第'+msg+'行，发票日期超过3个月！',null,250,100);
                        }else{
                        // finalSubmit1();
                                            bgtCheck();
                        }
                    },
                    scope: this
                });
             }
             
             //保留两位小数，小数位不够补齐
             // function Convert(value) {
                // if(value){
            	// var s = value;
            	 // s += "";
            	 // if (s.indexOf(".") == -1){ s += ".00";}
            	 // if (/\.\d$/.test(s)){ s += "0";}   //正则判断
                 // while (/\d{4}(\.|,)/.test(s)){
            	 	// s = s.replace(/(\d)(\d{3}(\.|,))/, "$1,$2"); 
            	 // }       
            	   // return s;  
                // }else{
                    // return '';
                // }      
           // }
           
           function changeTwoDecimal_f(x) {
				     var f_x = parseFloat(x);
				     if (isNaN(f_x)) {
				         alert('function:changeTwoDecimal->parameter error');
				         return false;
				     }
				     var f_x = Math.round(x * 100) / 100;
				     var s_x = f_x.toString();
				     var pos_decimal = s_x.indexOf('.');
				     if (pos_decimal < 0) {
				         pos_decimal = s_x.length;
				         s_x += '.';
				     }
				     while (s_x.length <= pos_decimal + 2) {
				         s_x += '0';
				     }
				     return s_x;
				 } 
           //add by lq 20180917 校验是否有影像
           function beforesubmitfun(){
                savereport();
                var head_record=$('exp_report_head').getAt(0);
                var exp_report_number=head_record.get('exp_report_number');
                var exp_report_header_id=head_record.get('exp_report_header_id');
                 //add by lq 20190513 假如是手机费报销单校验报销月份是否重复，若重复则置空
                 var line_record=$('exp_report_lines').getAll();

                    for (var i = 0;i < line_record.length;i++) {
                     if( typeof line_record[0].get('month_quantity')!='undefined'){
                    for(var j=i+1;j<line_record.length;j++){
                     if(line_record[j].get('month_quantity')==line_record[i].get('month_quantity')){
                     Aurora.showMessage('提示', '该报销人'+line_record[j].get('month_quantity')+'期间的手机费不允许重复报销，请检查!'); 
                     return; 
                     }
                    }  
                  } 
                        
                    var exp_req_item_id=line_record[i].get('exp_req_item_id');
                    var exp_req_item_name=line_record[i].get('exp_req_item_name');
                    var month_quantity=line_record[i].get('month_quantity');
                    var employee_id=head_record.get('employee_id');
                   //add by lq 20190513 费用项目为手机费则出现报销月份
                Aurora.request({
                            sync: true,
                            url: $('get_iPhone_check_link').getUrl(),
                            para: {
                                exp_req_item_id: exp_req_item_id,
                                month_quantity:month_quantity,
                                employee_id:employee_id,
                                exp_report_header_id:exp_report_header_id
                            },
                            success: function(res) {
                                if(res.result.record.v_phone_count>0){
                                    Aurora.showMessage('提示', '该报销人'+month_quantity+'期间的手机费不允许重复报销，请检查!'); 			
                              throw '该报销人在'+month_quantity+'期间的手机费不允许重复报销，请检查!';
                              line_record.set('month_quantity', '');
                                return;
                                     
                                }else{

                                }
                            },
                            scope: this
                        });
                }
                 
                 //end add
                //add by lyt 2018.12.5如果单据参数定义年结为Y，未勾选预提，新建收回的单据禁止提交
                Aurora.request({
                        url: $('exp_annual_knots_check').getUrl(),
                        scope: this,
                        sync:true,
                        para: {
                            exp_report_header_id: exp_report_header_id
                        },
                        success: function(res) {
                           if(res.result.record.flag=='N'){
                              Aurora.showMessage('提示', '财务系统年结中，禁止提交新建报销单！'); 			
                              throw '财务系统年结中，禁止提交新建报销单！';
                                return;
                           }
                        },
                    }); 
                Aurora.request({
                            url: $('image_check_query_link').getUrl(),
                            para: {
                                exp_report_number: exp_report_number,
                                exp_report_header_id: exp_report_header_id,
                            },
                            sync:true,
                            success: function() { 
                                // check_image_error();
                                //add by lq 20181016 校验该单据在影像错误表里是否有错误消息，有则弹出报错
                            Aurora.request({
                            url: $('image_check2').getUrl(),
                            para: {
                                'exp_report_number': exp_report_number
                            },
                            success: function(res) { 
                            if (res.result.record.v_message != 'Y') {
                             Aurora.showOkCancelWindow('${l:PROMPT}', res.result.record.v_message, function() {
                             	//add by lg 新增嘉实基金支付方式为外币支付时提交提示
		                        if('${/model/account_set/record/@account_set}'!=1){
									var linData = $('pmtplan_schedules_ds').getAll();
									var linNum = '';
									for(var i = 0;i<linData.length;i++){
										
										if(linData[i].get('payment_method_code')=='OTHER_CURRENCY'){
											
											linNum+=i+1+',';
										}
									}
									linNum = linNum.substr(0,linNum.length-1);
									//Aurora.showMessage('${l:PROMPT}', '第'+linNum+'行您选择的付款方式为外币支付，请确认您已进行合同税务备案，如未备案，请在“KM首页-财务管理-合同管理-合同备案”中完成合同备案。如有疑问，可咨询税务部。', null, 450, 130);
									
									if(typeof linNum == "undefined" || linNum == null || linNum == ""){
										submitreport();
									}else{
									    Aurora.showOkCancelWindow('${l:PROMPT}', '您选择的付款方式为外币支付，请确认您已进行合同税务备案，如未备案，请在“KM首页-财务管理-合同管理-合同备案”中完成合同备案。如有疑问，可咨询税务部。', function() {
											submitreport();
			                        	}, null, 450, 130);
									}
		                    	}
                        }, null, 500, 100);
                                }else{
                             submitreport();      
                                }
                            },
                            error: function() {
                            },
                            scope: this
                         });
                
                                  //end add
                               
                            },
                            error: function() {
                                $('checkBtn').enable();
                            },
                            scope: this
                        });                
                        
						
                        
           }
          
           //添加收益期维护 20180830 wanghongyue
        	function benefitEditorRenderer(value,record,name) {
			    if (!record.isNew){
			        var expReprotHeadId = $('exp_report_head').getAt(0).get('exp_report_header_id');
        			var expReprotLineId = record.get('exp_report_line_id');
        			var reportAmount = record.get('report_amount');
				    return '<a style="color:red" href="javascript:benefitEditorRendererWindow('+expReprotLineId+','+expReprotHeadId+','+ reportAmount +')">${l:EXP_REPORT_CREATE.DBP}</a>';
			    }
			}
			
			function benefitEditorRendererWindow(expReprotLineId,expReprotHeadId,ReportAmount){
        			var hrecords = $('exp_report_head').getAt(0);
               		//var expReprotLineId = ${/parameter/@exp_report_line_id};
        			Aurora.request({
                            url: $('get_sum_sale_amount').getUrl(),
                            para: {
                                exp_report_line_id: expReprotLineId
                            },
                            sync:true,
                            success: function(res) {
                             var sum_sale_amount = res.result.record.sum_sale_amount;
                             if(sum_sale_amount != 0){
                                 ReportAmount = sum_sale_amount;
                             }
                            },
                            scope: this
                        });
        			
        		new Aurora.Window({id:'invoice_info_renderer_window1',
        						   url:$('exp_report_benefit_info_link').getUrl()+'?exp_report_line_id='+expReprotLineId+'&exp_report_header_id='+expReprotHeadId+'&report_amount='+ReportAmount+'&flag=Y'+'&readonly=N',
        						   title:'${l:EXP_REPORT_CREATE.AMORTIZATION_PERIOD}', 
        						   //fullScreen:false,
        						   width:850,
        						   height:500});
        	}
        	//add by wxj 计划付款行多行复制
        	function createPmtRecord() {
        	    var header = $('exp_report_head').getAt(0);
                var payee_category = header.get('exp_report_payee_category');
                //add by HJ
                var bank_record = $('exp_report_lines').getAt(0);
                if (payee_category == 'EMPLOYEE') {
                    records = $('exp_employee_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('exp_employee_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                } else if (payee_category == 'VENDER') {
                    records = $('pur_vender_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('pur_vender_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                } else {
                    records = $('ord_customer_accounts_ds').getAll();
                    if (records.length > 0) {
                        bank_record = $('ord_customer_accounts_ds').getAt(0);
                    } else {
                        bank_record = header;
                    }
                }
                var pmt_ds = $('pmtplan_schedules_ds');
                var selected = pmt_ds.getSelected();
                if (selected.length == 0) {
                    var lineRecord = $('exp_report_lines').getAll();
                    if(lineRecord.length == 0) {
                        Aurora.showInfoMessage('${l:PROMPT}', '${l:PLEASE_ADD_LINE}', null, 250, 100);
                        return;
                    }
                    var record = pmt_ds.create();
                    record.set('currency', header.get('exp_report_currency_code'));
                	record.set('schedule_start_date', header.get('exp_report_data'));
                	record.set('schedule_due_date', pmt_schedule_due_date);
                	record.set('currency_name', header.get('exp_report_currency_name'));
                	record.set('exp_report_header_id', header.get('exp_report_header_id'));
                	record.set('usedes', header.get('usedes'));
                	record.set('usedes_name', header.get('usedes_name'));
                	record.set('payee_type', header.get('exp_report_payee_category_name'));
                	record.set('payee_type_value', header.get('exp_report_payee_category'));
                	//add by HJ
    	            record.set('bank_code', bank_record.get('bank_code'));
	                record.set('bank_name', bank_record.get('bank_name'));
        	        record.set('bank_location_code', bank_record.get('bank_location_code'));
            	    record.set('bank_location_name', bank_record.get('bank_location'));
                	record.set('province_code', bank_record.get('province_code'));
                	record.set('province_name', bank_record.get('province_name'));
                	record.set('city_code', bank_record.get('city_code'));
                	record.set('city_name', bank_record.get('city_name'));

                	record.set('payment_method', header.get('exp_report_payment_method'));
                	record.set('payment_type_id', header.get('payment_method_id'));
                	record.isNew = true;
                	record.dirty = false;
                }else{
                    for(var i=0;i < selected.length;i++) {
                        var data = selected[i].data;
                        var newdata = {};
                        var len = pmt_ds.getAll().length;
                        for (var name in data) {
                            newdata[name] = data[name];
                        }
                        var record = new Aurora.Record(newdata);
                        record.isNew = true;
                        record.dirty = false;
                        pmt_ds.add(record);
                        var lineRecord = pmt_ds.getAt(len);
                        lineRecord.set('line_number',len*1);
                    }
                }

                //add by Qu yuanyuan 20151202
                var gather_flag_records = $('gather_flag_ds').getAll();
                for (var i = 0;i < gather_flag_records.length;i++) {
                    if (gather_flag_records[i].get('code_value') == '1') {
                        record.set('gather_flag', gather_flag_records[i].get('code_value'));
                        record.set('gather_flag_desc', gather_flag_records[i].get('code_value_name'));
                        break;
                    }
                }
                //end by Qu yuanyuan
                 //payment_method add by lq 20180925 若单据头币种非人民币和混合币种的时候，不允许修改付款方式,且付款方式默认外币支付
                var head_record=$('exp_report_head').getAt(0);
                var functional_currency_code='${/model/currency_code_path/record/@functional_currency_code}';
                var head_currency_code=head_record.get('exp_report_currency_code');
                //add by lq 20190820 香港除外
                var hgi_count='${/model/account_set/record/@account_set}';
                     if (head_currency_code==functional_currency_code||head_currency_code=='OTHER'||hgi_count!=0){
                    record.getField('payment_method').setReadOnly(false);
                    
                }else{
                    record.getField('payment_method').setReadOnly(true);
                    record.set('payment_method', '外币支付');
                    record.set('payment_method_code', 'OTHER_CURRENCY');
                     }
                //end add
                
        	}
        	//add end
           function venderCodeValidator(record, name, value) {
               if(value) {
                   var specialCh = $('bank_exclude_special_characters_ds').getAll();
                   var characters = '';
                   var returnStr = '';
                   for (var i = 0;i < specialCh.length;i++) {
                       characters = specialCh[i].get('code_value_name');
                       var re = new RegExp(characters);
                       if (re.test(value)) {
                           returnStr = returnStr + characters.replace(/\\/,'');
                       }
                   }
                   if (returnStr) {
                       return '不能包含特殊字符:'+returnStr;
                   }
            		if(value.length>30)
            		{
            	    	//Aurora.showWarningMessage('${l:PROMPT}', '最多输入30个字!');
            	    	return '最多输入30个字!';
            		}
               }
               return true;
            }   
           function lineDesValidator(record, name, value) {
               if(value) {
            		if(value.length>30 && '${/model/account_set/record/@account_set}'!=0)
            		{
            	    	//Aurora.showWarningMessage('${l:PROMPT}', '最多输入30个字!');
            	    	return '行说明最多输入30个字!';
            		}
               }
               return true;
            }                    	
            
          function reportTypeLoad(ds) {
            var rd = $('exp_report_head').getAt(0);
			var exp_report_type_code=rd.get('exp_report_type_code');
            if(exp_report_type_code=='BX0020'){
                var lineRecords = $('exp_report_lines').getAll();
                var cus_id='${/model/object_col/record/@cus_id}';
                var expTypeCode = ds.getAll();
                for (var i = 0;i < lineRecords.length;i++) {
                    for(var j = 0;j < expTypeCode.length;j++) {
                        if (expTypeCode[j].get('expense_type_code') == '1610' && expTypeCode[j].get('expense_type_id') == lineRecords[i].get('expense_type_id')) {
                            lineRecords[i].getField(cus_id).setRequired(false);
                            //先选日常业务招待的让后在选团队建设会将数量设置为undefined，这里直接置1
                            lineRecords[i].set('primary_quantity',1);
                        }else{
                            lineRecords[i].getField(cus_id).setRequired(true);
                        }
                    }
                }
             }
           }
           
           //add by lq 20190612 一行费用行对应多个客户
           function customerInfoRenderer(value,record,name){
               if (!record.isNew){
                   var head_record=$('exp_report_head').getAt(0);
        			var expReprotLineId = record.get('exp_report_line_id');
        			var exp_report_header_id=record.get('exp_report_header_id');
        			var employee_id=head_record.get('employee_id');
        			var expItemId = record.get('exp_req_item_id');
        			var count_employee=record.get('count_employee');
        			var v_unit=record.get('v_unit');
        			//add by lq 20190904 判断费用行上的部门是否存在于系统代码为QD_DPT_NOT的无需强制关联的部门中，是则不标红
        			
                            //查询是否有关联,无关联则标红
                            if(count_employee == 0&&v_unit==0){
                                 return '<a style="color:red" href="javascript:cusInfoRendererWindow('+expReprotLineId+','+expItemId+','+employee_id+','+exp_report_header_id+')">${l:SYS_USER.CUSTOMER_ID}</a>';
                             }else{
                                 return '<a href="javascript:cusInfoRendererWindow('+expReprotLineId+','+expItemId+','+employee_id+','+exp_report_header_id+')">${l:SYS_USER.CUSTOMER_ID}</a>';
                             }
                        
                
        			//end add
                             
        		}
        		
           }
           
           function cusInfoRendererWindow(expReprotLineId,expItemId,employee_id,exp_report_header_id){
			    if (typeof expReprotLineId=='undefined' || typeof expItemId=='undefined'){
			        Aurora.showMessage('${l:PROMPT}', '请填写客户信息!');
			        return;
			    }
			    var previev_flag=$('exp_report_head').getCurrentRecord().get('previev_flag');
        		new Aurora.Window({id:'customer_info_renderer_window',
        						   url:$('exp_report_customer_info_link').getUrl()+'?exp_report_line_id='+expReprotLineId+'&employee_id='+employee_id + '&exp_item_id='+expItemId+'&create_flag=Y'+'&exp_report_header_id='+exp_report_header_id+'&previev_flag='+previev_flag,
        						   title:'${l:SYS_USER.CUSTOMER_ID}',
        						   fullScreen:true});
        	}
           //end add
           
           function requsitionRefReport() {
                var head_ds = $('exp_report_head').getAt(0);
                new Aurora.Window({
                    id:'exp_requisition_ref_report_window',
                    url:$('exp_requisition_ref_report_link').getUrl()+'?exp_report_header_id='+head_ds.get('exp_report_header_id')+'&employee_id='+head_ds.get('employee_id')+'&reject=false'+'&standard_flag=true',
        			title:'${l:REF_TRAVELREQ}',
        			fullScreen:true});
            }
			function setVenderRequired(record, name, value) {
                if(name = 'expense_type_code'&&value =='3103'){
                    record.getField('line_vender_name').setRequired(true);
                }else{
					record.getField('line_vender_name').setRequired(false);
				}
                return true;
            }
            function check_Document_type(record, name, value) {
	            var exp_report_type_code = $('exp_report_head').getAt(0).get('exp_report_type_code');
	            if (${/model/cux_exp_image/record/@company_code}==101){
	                if (exp_report_type_code != 'BX0080' && exp_report_type_code != 'BX0020' && exp_report_type_code != 'BX0060' && exp_report_type_code != 'BX0070' && exp_report_type_code != 'BX8001') {
	                    $('exp_report_lines').getField('description').setRequired(true);
	                }
            	}
            	return true;
            }
            
            //add by lq 20190726 香港账套下提单先走财务查验，再由财务进行提单。
            function account_check_fun(){
                //校验必须存在行信息和计划付款行信息
                linerecords = $('exp_report_lines').getAll();
                pmtrecords=$('pmtplan_schedules_ds').getAll();
                    if (linerecords.length == 0||pmtrecords.length == 0) {
                  Aurora.showErrorMessage('${l:PROMPT}', '${l:FINANCE_CHECK}', null, 250, 100);
                                    	return;
    
                }
                if (!$('exp_report_lines').validate()) {

                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End

                    return;
                }
                if (!$('pmtplan_schedules_ds').validate()) {

                    //add by zhaofan 增加锁屏，防止重复点击    Start
                    if ($('new_report_detail_window')) {
                        Aurora.Masker.unmask($('new_report_detail_window').wrap);
                    } else {
                        Aurora.Masker.unmask(Ext.getBody());
                    };
                    //add by zhaofan 增加锁屏，防止重复点击    End

                    return;
                }
                savereport();
                var head_record=$('exp_report_head').getAt(0);
                var exp_report_number=head_record.get('exp_report_number');
                var exp_report_header_id=head_record.get('exp_report_header_id');
                var hgi_count='${/model/account_set/record/@account_set}';
                var type = 'S';
                if (hgi_count>0){
                    //该单据属于香港账套单据，更新单据财务查验标志为S
                    Aurora.request({
                    url: $('exp_hgi_account_check_link').getUrl(),
                    scope: this,
                    para: { 
                        exp_report_header_id   :exp_report_header_id,
                        v_type     :'S'
                    },
                    success: function(res) {
					//关闭当前窗口
                    window.location.href = $('exp_report_maintain_query_link_1').getUrl();                     }
                 });
                    
                }
            }
            //end add
            //add by lq 20190807 财务退回
            function account_return_fun(){
                //校验必须存在行信息和计划付款行信息
                linerecords = $('exp_report_lines').getAll();
                pmtrecords=$('pmtplan_schedules_ds').getAll();
                var head_record=$('exp_report_head').getAt(0);
                var exp_report_number=head_record.get('exp_report_number');
                var exp_report_header_id=head_record.get('exp_report_header_id');
                var hgi_count='${/model/account_set/record/@account_set}';
                var type = 'N';
                if (hgi_count>0){
                    //该单据属于香港账套单据，更新单据财务查验标志为S
                    Aurora.request({
                    url: $('exp_hgi_account_check_link').getUrl(),
                    scope: this,
                    para: { 
                        exp_report_header_id   :exp_report_header_id,
                        v_type     :'N'
                    },
                    success: function(res) {
					//关闭当前窗口
                    // window.location.href = $('exp_report_maintain_query_link_2').getUrl();   
                       window.location.href = $('exp_report_maintain_query_link_3').getUrl();      
                                 }
                 });
                    
                }
            }
            //end add
        ]]></script>
        <a:dataSets>
            <a:dataSet id="period_name_ds">
                <a:datas dataSource="/model/period_name_ds"/>
            </a:dataSet>
            <a:dataSet id="currencylist_ds1">
                <a:datas dataSource="/model/currency_list"/>
            </a:dataSet>
            <a:dataSet id="vat_invoice_type_ds">
                <a:datas dataSource="/model/invoice_type"/>
            </a:dataSet>
            <a:dataSet id="vat_usage_type_ds">
                <a:datas dataSource="/model/usage_type"/>
            </a:dataSet>
            <!--add by HJ-->
            <a:dataSet id="bank_exclude_special_characters_ds" lookupcode="EXCLUDE_SPECIAL"/>
            <a:dataSet id="tax_rate_ds" lookupcode="TAX_RATE"/>
            <a:dataSet id="no_supplier" lookupcode="NO_SUPPLIER_REP_TYPE"/>
            <a:dataSet id="vat_invoice_status_ds" lookupCode="VMS_INVOICE_STATUS"/>
            <a:dataSet id="vat_input_tax_structure_detail_ds" fetchAll="true" loadData="true" model="exp.EXP1350.exp_ygz_input_tax_struc_dtl_lov"/>
            <a:dataSet id="gather_flag_ds" lookupCode="GATHER_FLAG"/>
            <a:dataSet id="exp_exchange_rate_quta_ds" lookupCode="EXCHANGE_RATE_QUOTATION"/>
            <!--add by HJ-->
            <a:dataSet id="exp_employee_accounts_ds" model="expm.exp_employee_accounts"/>
            <a:dataSet id="pur_vender_accounts_ds" model="expm.pur_vender_accounts"/>
            <a:dataSet id="ord_customer_accounts_ds" model="expm.ord_customer_accounts"/>
            <a:dataSet id="payment_mehtod_ds">
                <a:datas datasource="/model/payment_method_list"/>
            </a:dataSet>
            <a:dataSet id="exp_exchange_rate_ds" fetchAll="true" model="gld.gld_exchange_rates">
                <a:events>
                    <a:event name="load" handler="afterrateds"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_period_ds" fetchAll="true" model="gld.gld_periods">
                <a:events>
                    <a:event name="load" handler="afterperiodds"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="positionlist_ds">
                <a:datas datasource="/model/position_list"/>
            </a:dataSet>
            <a:dataSet id="exp_report_head_submit" autoCreate="true" submitUrl="${/request/@context_path}/modules/expm/public/exp_report_bgt_check.svc">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="flag"/>
                </a:fields>
                <a:events>
                    <a:event name="submitsuccess" handler="processres"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_head_final_submit" autoCreate="true" submitUrl="${/request/@context_path}/modules/expm/public/exp_report_submit.svc">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                </a:fields>
                <a:events>
                    <a:event name="submitsuccess" handler="dispatchtomaintain"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_expense_type_ds" fetchAll="true" model="expm.exp_expense_type_flag_filter" queryUrl="${/request/@context_path}/autocrud/expm.exp_expense_type_flag_filter/query?expense_report_type_id=${/parameter/@expense_report_type_id}&amp;exp_report_header_id=${/parameter/@exp_report_header_id}&amp;report_flag=Y&amp;employee_id=${/parameter/@employee_id}">
                <a:events>
                    <a:event name="load" handler="reportTypeLoad"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_expense_item_ds" fetchAll="true" model="expm.exp_expense_item"/>
            <a:dataSet id="company_ds">
                <a:datas datasource="/model/fnd_company_bm"/>
            </a:dataSet>
            <a:dataSet id="pay_category_ds" lookupcode="PAYMENT_OBJECT"/>
            <a:dataSet id="quotation" lookupcode="EXCHANGE_RATE_QUOTATION"/>
            <a:dataSet id="tax_type_ds" loadData="true" model="fnd.FND2410.fnd_tax_type_code_lov"/>
            <a:dataSet id="exp_report_head" model="expm.exp_report_head_show" submitUrl="${/request/@context_path}/modules/expm/public/exp_report_save.svc">
                <a:datas dataSource="/model/head_data"/>
                <a:fields>
                    <a:field name="mobil_flag"/>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="exp_report_type_name" prompt="EXP_REPORT_HEADERS.EXP_REPORT_TYPE_ID" readonly="true"/>
                    <a:field name="exp_report_type_code" validator="check_Document_type"/>
                    <a:field name="exp_report_type_id"/>
                    <a:field name="company_id"/>
                    <a:field name="company_name" readOnly="true"/>
                    <a:field name="payment_flag"/>
                    <a:field name="responsibility_center_name"/>
                    <a:field name="responsibility_center_id"/>
                    <a:field name="unit_id"/>
                    <a:field name="unit_name" readOnly="true"/>
                    <a:field name="employee_id"/>
                    <a:field name="employee_name"/>
                    <a:field name="name"/>
                    <a:field name="position_id"/>
                    <a:field name="position_name"/>
                    <a:field name="employee_code"/>
                    <a:field name="sum_amount" prompt="CON_CONTRACT_HEADERS.SUM_AMOUNT" readOnly="true"/>
                    <a:field name="exp_report_number" prompt="EXP_REPORT_HEADERS.REPORT_NUMBER" readonly="true"/>
                    <a:field name="exp_report_data" prompt="EXP_REPORT_HEADERS.REPORT_DATE" required="true"/>
                    <a:field name="exp_report_period" prompt="EXP_REPORT_HEADERS.PERIOD_NAME"/>
                    <a:field name="exp_report_employee_name" prompt="EXP_REPORT_HEADERS.EMPLOYEE_NAME" readonly="true"/>
                    <a:field name="exp_report_payment_method" displayfield="description" options="payment_mehtod_ds" prompt="EXP_REPORT_HEADERS.PAYMENT_METHOD" required="false" returnfield="payment_method_id" valuefield="payment_method_id"/>
                    <a:field name="exp_report_position" displayfield="position_name" options="positionlist_ds" prompt="EXP_REPORT_HEADERS.POSITION" readOnly="false" required="true" returnfield="position_id" valuefield="position_id">
                        <a:mapping>
                            <a:map from="unit_id" to="unit_id"/>
                            <a:map from="unit_name" to="unit_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="exp_report_payee_category_name" displayField="code_value_name" options="pay_category_ds" prompt="EXP_REPORT_HEADERS.PAYEE_CATEGORY" returnField="exp_report_payee_category" valueField="code_value"/>
                    <a:field name="exp_report_payee_category"/>
                    <a:field name="exp_report_payee_name" autoComplete="true" autoCompleteField="code_name" lovGridHeight="320" lovHeight="460" lovWidth="520" lovservice="expm.exp_employee_req_lov" prompt="EXP_REPORT_HEADERS.PAYEE_ID" readOnly="false">
                        <a:mapping>
                            <a:map from="code_name" to="exp_report_payee_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="bank_code"/>
                    <a:field name="bank_name"/>
                    <a:field name="bank_location_code"/>
                    <a:field name="bank_location"/>
                    <a:field name="province_code"/>
                    <a:field name="province_name"/>
                    <a:field name="city_code"/>
                    <a:field name="city_name"/>
                    <a:field name="account_number"/>
                    <a:field name="account_name"/>
                    <a:field name="notes"/>
                    <a:field name="exp_report_payee_id"/>
                    <a:field name="exp_report_currency_name" prompt="EXP_REPORT_HEADERS.CURRENCY_CODE" readonly="true"/>
                    <a:field name="exp_report_currency_code"/>
                    <a:field name="exp_report_rate" prompt="EXP_REPORT_HEADERS.EXCHANGE_RATE"/>
                    <a:field name="exp_report_rate_type_name" autoComplete="true" autoCompleteField="type_name_code" fetchRemote="false" lovGridHeight="320" lovHeight="460" lovWidth="550" lovservice="gld.gld_exchangerate_type_lov" prompt="EXP_REPORT_HEADERS.EXCHANGE_RATE_TYPE" title="EXP_PRE_POST_RO.FEE_TYPE">
                        <a:mapping>
                            <a:map from="type_name" to="exp_report_rate_type_name"/>
                            <a:map from="type_code" to="exp_report_rate_type"/>
                            <a:map from="rate_method_code" to="rate_method_code"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="rate_method_code"/>
                    <a:field name="functional_currency_code"/>
                    <a:field name="exp_report_rate_type"/>
                    <a:field name="exp_report_rate_quotation_name" displayField="code_value_name" options="exp_exchange_rate_quta_ds" prompt="EXP_REPORT_HEADERS.EXCHANGE_RATE_QUOTATION" returnField="exp_report_rate_quotation" valueField="code_value"/>
                    <a:field name="exp_report_rate_quotation"/>
                    <a:field name="exp_report_description" prompt="EXP_REPORT_HEADERS.DESCRIPTION"/>
                    <a:field name="exp_report_attach_id" prompt="EXP_REPORT_HEADERS.ATTACH_ID" required="false"/>
                    <a:field name="exp_report_status" prompt="EXP_REPORT_HEADERS.REPORT_STATUS" readOnly="true"/>
                    <a:field name="exp_report_create_by" prompt="EXP_REPORT_HEADERS.CREATE_BY" readOnly="true"/>
                    <a:field name="exp_report_audit_date" prompt="EXP_REPORT_HEADERS.AUDIT_DATE" readOnly="true"/>
                    <a:field name="payment_method_id"/>
                    <a:field name="period_name" prompt="EXP_REQUISITION_HEADERS.PERIOD_NAME" readOnly="true"/>
                    <a:field name="schedule_due_date"/>
                    <a:field name="budget_control_enabled"/>
                    <a:field name="previev_flag" checkedValue="Y" defaultValue="N" prompt="预提标识" uncheckedValue="N"/>
                    <a:field name="exp_rush_flag"/>
                    <a:field name="preview_exp_report_number" readOnly="true"/>
                    <a:field name="preview_exp_report_id"/>
                    <a:field name="vat_special_invoice_include" checkedValue="Y" defaultValue="N" prompt="含专票或电子发票" uncheckedValue="N"/>
                    <!--add by HJ-->
                    <a:field name="amortization_flag"/>
                    <a:field name="ae_period_name" displayField="period_name" options="period_name_ds" returnField="period_name" valueField="period_name"/>
                    <a:field name="ae_employee_num" readOnly="true"/>
                </a:fields>
                <a:events>
                    <a:event name="submitsuccess" handler="reloadres"/>
                    <a:event name="update" handler="header_ds_update"/>
                    <a:event name="submitfailed" handler="resetobjds"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_head_dimension" autoCreate="true">
                <a:fields>
                    <a:placeHolder id="dynamicHeadFields"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="dynamicUpdate"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_head_object" autoCreate="true">
                <a:fields>
                    <a:placeHolder id="dynamicHeadObjects"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="dynamicUpdate"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="position_ds" fetchAll="true" model="exp.exp_org_position"/>
            <a:dataSet id="exp_report_object_lines" bindName="objlines" bindTarget="exp_report_head"/>
            <a:dataSet id="exp_report_lines" autoQuery="true" bindName="lines" bindTarget="exp_report_head" fetchAll="true" model="expm.exp_report_lines" pageSize="1000" queryUrl="${/request/@context_path}/modules/expm/public/exp_report_line_query.svc?exp_report_header_id=${/parameter/@exp_report_header_id}&amp;_ban_remind=Y" selectable="true">
                <a:fields>
                    <a:field name="count_employee"/>
                    <a:field name="line_vender_id"/>
                    <a:field name="line_vender_code"/>
                    <a:field name="line_vender_name" autoComplete="true" autoCompleteField="vender_name" lovService="expm.wbc_account_vender_vl2" lovWidth="600" title="SYS_USER.VENDER_ID">
                        <a:mapping>
                            <a:map from="vender_code" to="line_vender_code"/>
                            <a:map from="vender_name" to="line_vender_name"/>
                            <a:map from="vender_id" to="line_vender_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="line_customer_name" autoCompleteField="customer_code" lovService="expm.wbc_account_customer_vl" lovWidth="600" prompt="客户" title="客户">
                        <a:mapping>
                            <a:map from="customer_code" to="line_customer_code"/>
                            <a:map from="description" to="line_customer_name"/>
                            <a:map from="customer_id" to="line_customer_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="line_customer_id"/>
                    <a:field name="line_customer_code"/>
                    <a:field name="report_amount1"/>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="exp_report_line_id"/>
                    <a:field name="company_id"/>
                    <a:field name="company_name" autoComplete="true" autoCompleteField="company_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_company_tree" required="true" title="EXP_REPORT_LINES.COMPANY_ID">
                        <a:mapping>
                            <a:map from="company_short_name" to="company_name"/>
                            <a:map from="company_id" to="company_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="unit_id"/>
                    <a:field name="unit_name" autoComplete="true" autoCompleteField="unit_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_org_unit2?expense_report_type_id=${/parameter/@expense_report_type_id}" required="true" title="EXP_REPORT_LINES.UNIT_ID">
                        <a:mapping>
                            <a:map from="org_unit_description" to="unit_name"/>
                            <a:map from="unit_id" to="unit_id"/>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="responsibility_center_id"/>
                    <a:field name="responsibility_center_name" autoComplete="true" autoCompleteField="resp_center_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="fnd.fnd_responsibility_centers_lov" title="EXP_REPORT_LINES.RESPONSIBILITY_CENTER_ID">
                        <a:mapping>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="position_id"/>
                    <a:field name="position_name" displayfield="position_name" options="position_ds" returnfield="position_id" valuefield="position_id"/>
                    <a:field name="employee_id"/>
                    <a:field name="employee_name" autoComplete="true" autoCompleteField="emp_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="expm.exp_report_employeelist_cross_com" title="EXP_REPORT_LINES.EMPLOYEE_ID">
                        <a:mapping>
                            <a:map from="name" to="employee_name"/>
                            <a:map from="employee_id" to="employee_id"/>
                            <a:map from="position_primary" to="position_primary"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="ae_number"/>
                    <a:field name="ae_number_hide" autoComplete="true" autoCompleteField="resp_center_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="csh.CSH5010.exployee_account_number" prompt="CSH_PAYMENT_REQUISITION_LNS.AENO" title="CSH_PAYMENT_REQUISITION_LNS.AENO">
                        <a:mapping>
                            <a:map from="account_number" to="ae_number"/>
                            <a:map from="account_number_hide" to="ae_number_hide"/>
                            <a:map from="employee_id" to="ae_employee_id"/>
                            <a:map from="partner_code" to="ae_employee"/>
                            <a:map from="position_primary" to="position_primary"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="ae_employee_id"/>
                    <a:field name="ae_employee" autoComplete="true" autoCompleteField="emp_code_name" lovAutoQuery="false" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="expm.exp_report_employeelist_cross_com?company_id=${/session/@company_id)}" title="EXP_REPORT_LINES.EMPLOYEE_ID">
                        <a:mapping>
                            <a:map from="employeename" to="ae_employee"/>
                            <a:map from="employee_id" to="ae_employee_id"/>
                            <a:map from="position_primary" to="position_primary"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="position_primary"/>
                    <a:field name="currency_name" displayField="currency_name" options="currencylist_ds1" returnField="currency_code" valueField="currency_code"/>
                    <a:field name="currency_code"/>
                    <a:field name="exchange_rate_type"/>
                    <a:field name="exchange_rate_type_name"/>
                    <a:field name="exchange_rate_quotation"/>
                    <a:field name="exchange_rate_quotation_name"/>
                    <a:field name="exchange_rate" required="true"/>
                    <a:field name="line_number" readOnly="true"/>
                    <!-- <a:field name="description" required="true"/> -->
                    <a:field name="description" validator="lineDesValidator"/>
                    <a:field name="city"/>
                    <!-- <a:field name="place" autoComplete="true" autoCompleteField="place_code_name" lovGridHeight="320" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_ID" title="EXP_REQUISITION_LINES.PLACE_ID">
                        <a:mapping>
                            <a:map from="place_desc" to="place"/>
                            <a:map from="place_id" to="place_id"/>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="place_type_desc" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_id"/>
                    <a:field name="place_type" autoComplete="true" autoCompleteField="place_type_code_name" lovGridHeight="300" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_type_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_TYPE_ID" title="EXP_REQUISITION_LINES.PLACE_TYPE_ID">
                        <a:mapping>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="description" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_type_id"/> -->
                    <a:field name="budget_item_id"/>
                    <a:field name="place_from" autoComplete="true" autoCompleteField="place_code_name" lovAutoQuery="false" lovGridHeight="320" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_lov" lovWidth="550" prompt="EXP_POLICY_PLACE.PLACE_FROM" required="false" title="EXP_REQUISITION_LINES.PLACE_ID">
                        <a:mapping>
                            <a:map from="place_desc" to="place_from"/>
                            <a:map from="place_id" to="place_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_id"/>
                    <a:field name="place_type" autoComplete="true" autoCompleteField="place_type_code_name" lovGridHeight="300" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_type_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_TYPE_ID" title="EXP_REQUISITION_LINES.PLACE_TYPE_ID">
                        <a:mapping>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="description" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_type_id"/>
                    <a:field name="place_to" autoComplete="true" autoCompleteField="place_code_name" lovAutoQuery="false" lovGridHeight="320" lovHeight="450" lovService="expm.exp_expense_policy_place_lov" lovWidth="500" prompt="EXP_POLICY_PLACE.PLACE_TO" required="false" title="EXP_REQUISITION_LINES.PLACE_ID">
                        <a:mapping>
                            <a:map from="place_desc" to="place_to"/>
                            <a:map from="place_id" to="place_to_id"/>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="place_type_desc" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="date_from" validator="dateValidate"/>
                    <a:field name="date_to" validator="dateValidate"/>
                    <a:field name="expense_type_id"/>
                    <a:field name="expense_type_code" validator="setVenderRequired"/>
                    <a:field name="expense_type_name" displayfield="expense_type_description" options="exp_expense_type_ds" required="true" returnfield="expense_type_id" valuefield="expense_type_id">
                        <a:mapping>
                            <a:map from="expense_type_code" to="expense_type_code"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="amortization_flag"/>
                    <a:field name="exp_req_item_id"/>
                    <a:field name="rush_flag"/>
                    <a:field name="expense_item_id"/>
                    <a:field name="exp_req_item_name" displayfield="expense_item_description" options="exp_expense_item_ds" required="true" returnfield="exp_req_item_id" tipfield="expense_item_desc" valuefield="expense_item_id">
                        <a:mapping>
                            <a:map from="amortization_flag" to="amortization_flag"/>
                            <a:map from="rush_flag" to="rush_flag"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="benefit_editor" prompt="收益期维护"/>
                    <a:field name="price" required="false" validator="priceValidator"/>
                    <a:field name="primary_quantity" defaultValue="1" required="true"/>
                    <a:field name="report_amount" required="true" validator="expYGZtaxValidator"/>
                    <a:field name="hgi_invoice_number" required="false"/>
                    <a:field name="report_functional_amount"/>
                    <a:field name="period_name" autoComplete="true" autoCompleteField="period_name" lovGridHeight="300" lovHeight="460" lovWidth="500" prompt="EXP_REQUISITION_LINES.PERIOD_NAME" title="EXP_REQUISITION_LINES.PERIOD_NAME">
                        <a:mapping>
                            <a:map from="period_name" to="period_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_flag" checkedvalue="Y" uncheckedvalue="N"/>
                    <a:field name="payee_id"/>
                    <a:field name="contract_header_code" autoComplete="true" autoCompleteField="contract_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_contract_lov" lovWidth="600" prompt="CON_CONTRACT_HEADERS.CONTRACT_NUMBER" title="CON_CONTRACT_HEADERS.CONTRACT_NUMBER">
                        <a:mapping>
                            <a:map from="contract_number" to="contract_header_code"/>
                            <a:map from="contract_header_id" to="contract_header_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="contract_header_id" prompt="PAYMENT_SCHEDULE_LINE_CODE"/>
                    <a:field name="payment_schedule_line_code" autoComplete="true" autoCompleteField="payment_schedule_line_number" lovGridHeight="250" lovHeight="460" lovService="csh.csh_payment_schedule_lov" lovWidth="600" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER">
                        <a:mapping>
                            <a:map from="payment_schedule_line_number" to="payment_schedule_line_code"/>
                            <a:map from="payment_schedule_line_id" to="payment_schedule_line_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_schedule_line_id"/>
                    <a:field name="tax_type_desc" displayField="description" options="tax_type_ds" prompt="FND_TAX_TYPE_CODES.TAX_TYPE_RATE" returnField="tax_type_id" valueField="tax_type_id"/>
                    <a:field name="tax_type_id"/>
                    <a:placeHolder id="dynamicLineFields"/>
                    <a:placeHolder id="dynamicLineFields2"/>
                    <a:placeHolder id="dynamicLineFieldsObj"/>
                    <a:field name="invoice_type" prompt="发票类型"/>
                    <a:field name="invoice_number" prompt="发票号码" validator="expYGZInvoiceLengthValidateFun"/>
                    <a:field name="invoice_status" prompt="发票状态"/>
                    <a:field name="invoice_status_desc" displayField="code_value_name" options="vat_invoice_status_ds" prompt="发票状态" readOnly="true" returnField="invoice_status" valueField="code_value"/>
                    <a:field name="tax_amount" prompt="税额" validator="expYGZtaxValidator"/>
                    <a:field name="sale_amount" prompt="不含税金额" readonly="true" validator="expYGZtaxValidator"/>
                    <!-- <a:field name="tax_rate" prompt="税率" readonly="true" validator="expYGZtaxValidator"/> -->
                    <a:field name="tax_rate" displayField="code_value_name" options="tax_rate_ds" prompt="税率%" returnField="code_value" valueField="code_value"/>
                    <a:field name="usage_type" prompt="用途类型"/>
                    <a:field name="usage_type_desc" displayField="type_name" options="vat_usage_type_ds" prompt="用途类型" returnField="usage_type" valueField="type_code"/>
                    <a:field name="invoice_type_desc" displayField="type_name" options="vat_invoice_type_ds" prompt="发票类型" required="true" returnField="invoice_type" valueField="type_code">
                        <a:mapping>
                            <a:map from="special_invoice" to="special_invoice"/>
                            <a:map from="default_invoice_status" to="invoice_status"/>
                            <a:map from="default_invoice_status_desc" to="invoice_status_desc"/>
                            <a:map from="invoice_number_digit" to="invoice_number_digit"/>
                            <a:map from="invoice_code_digit" to="invoice_code_digit"/>
                            <a:map from="einvoice_flag" to="einvoice_flag"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="invoice_code" prompt="发票代码" validator="expYGZInvoiceLengthValidateFun"/>
                    <a:field name="invoice_date" prompt="发票日期"/>
                    <a:field name="input_tax_structure_detail"/>
                    <a:field name="input_tax_struc_detail_desc" displayField="type_name" options="vat_input_tax_structure_detail_ds" prompt="进项结构明细" returnField="input_tax_structure_detail" valueField="type_code"/>
                    <a:field name="special_invoice" prompt="视同专票"/>
                    <a:field name="invoice_number_digit" prompt="发票编号位数"/>
                    <a:field name="invoice_code_digit" prompt="发票代码位数"/>
                    <a:field name="einvoice_flag" prompt="是否电子发票"/>
                    <!--add by HJ-->
                    <a:field name="income_period_from" prompt="受益期从"/>
                    <a:field name="income_period_to" prompt="受益期至"/>
                    <!-- <a:field name="acceptance_flag" checkedValue="Y" defaultValue="N" uncheckedValue="N"/> -->
                    <a:field name="abroad_flag" checkedValue="Y" defaultValue="N" uncheckedValue="N"/>
                    <a:field name="financial_pay_amount"/>
                    <!-- <a:field name="bank_account_name" autoComplete="true" autoCompleteField="company_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="expm.exp_line_back_account_id" required="false" title="付款银行">
                        <a:mapping>
                            <a:map from="bank_account_id" to="bank_account_id"/>
                            <a:map from="bank_account_name" to="bank_account_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="bank_account_id"/> -->
                    <a:field name="receptionist"/>
                    <a:field name="month_quantity" lovGridHeight="300" lovHeight="430" lovService="gl.GL2010.gld_period_status_lov_mobil" lovWidth="280" prompt="摊销起始期间" required="false" title="PROMPT.PERIOD_NAME_FROM">
                        <a:mapping>
                            <a:map from="period_name" to="month_quantity"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="receptionist_date"/>
                    <a:field name="receptionist_desc" autoComplete="true" autoCompleteField="name" lovAutoQuery="false" lovGridHeight="300" lovHeight="460" lovService="expm.get_exp_report_receptionist_lov" lovWidth="500" title="接待人员">
                        <a:mapping>
                            <a:map from="name" to="receptionist_desc"/>
                            <a:map from="employee_id" to="receptionist"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="ae_number"/>
                    <a:field name="ae_number_hide"/>
                    <a:field name="ae_employee"/>
                    <a:field name="hgi_employee_id"/>
                    <a:field name="hgi_employee" autoComplete="true" autoCompleteField="emp_code_name" lovAutoQuery="false" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="expm.exp_report_employeelist_cross_com?company_id=${/session/@company_id)}" title="EXP_REPORT_LINES.EMPLOYEE_ID">
                        <a:mapping>
                            <a:map from="employeename" to="hgi_employee"/>
                            <a:map from="employee_id" to="hgi_employee_id"/>
                        </a:mapping>
                    </a:field>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="lineupdate"/>
                    <a:event name="beforecreate" handler="canaddaline"/>
                    <a:event name="load" handler="lineLoadFunction"/>
                    <a:event name="remove" handler="removeLine"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="pmtplan_schedules_ds" autoQuery="true" bindName="pmtplan" bindTarget="exp_report_head" model="expm.exp_report_pmtplan_schedules_query" queryUrl="${/request/@context_path}/autocrud/expm.exp_report_pmtplan_schedules_query/query?exp_report_header_id=${/parameter/@exp_report_header_id}" selectable="true" submitUrl="${/request/@context_path}/autocrud/expm.update_exp_rep_pmt_schedules/batch_update">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="payment_schedule_line_id"/>
                    <a:field name="line_num"/>
                    <a:field name="verification_loan"/>
                    <a:field name="company_name" prompt="EXP_REPORT_PMT_SCHEDULES.COMPANY_ID"/>
                    <a:field name="description" prompt="EXP_REPORT_PMT_SCHEDULES.DESCRIPTION"/>
                    <a:field name="currency_name" prompt="EXP_REPORT_PMT_SCHEDULES.CURRENCY" required="true"/>
                    <a:field name="currency"/>
                    <a:field name="due_amount" prompt="EXP_REPORT_PMT_SCHEDULES.DUE_AMOUNT" required="true"/>
                    <a:field name="write_off_amount" prompt="CSH_WRITE_OFF.CSH_WRITE_OFF_AMOUNT"/>
                    <a:field name="schedule_start_date" required="true"/>
                    <a:field name="schedule_due_date" required="true"/>
                    <a:field name="company_short_name" prompt="EXP_REPORT_PMT_SCHEDULES.COMPANY_ID"/>
                    <a:field name="contract_number" autoComplete="true" autoCompleteField="contract_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_contract_report_pmtplan_lov" lovWidth="500" prompt="CON_CONTRACT_HEADERS.CONTRACT_NUMBER" title="CON_CONTRACT_HEADERS.CONTRACT_NUMBER">
                        <a:mapping>
                            <a:map from="contract_number" to="contract_number"/>
                            <a:map from="contract_header_id" to="contract_header_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="contract_header_id"/>
                    <a:field name="line_number" autoComplete="true" autoCompleteField="payment_schedule_line_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_payment_schedule_pmtplan_lov" lovWidth="500" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER">
                        <a:mapping>
                            <a:map from="payment_schedule_line_number" to="line_number"/>
                            <a:map from="payment_schedule_line_id" to="payment_sch_line_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_sch_line_id"/>
                    <a:field name="payee_type" displayField="code_value_name" options="pay_category_ds" required="true" returnField="payee_type_value" valueField="code_value"/>
                    <a:field name="payee_type_value"/>
                    <a:field name="payee_id"/>
                    <a:field name="partner_code"/>
                    <a:field name="vender_type_code"/>
                    <a:field name="payee_partner_name" autoComplete="true" autoCompleteField="code_name" lovGridHeight="320" lovHeight="460" lovWidth="800" required="true" title="EXP_REPORT_LINES.PAYEE_ID">
                        <a:mapping>
                            <a:map from="vender_type_code" to="vender_type_code"/>
                            <a:map from="id" to="payee_id"/>
                            <a:map from="partner_code" to="partner_code"/>
                            <a:map from="description" to="payee_partner_name"/>
                            <a:map from="account_name" to="account_name"/>
                            <a:map from="account_number" to="account_number"/>
                            <a:map from="account_number_hide" to="account_number_hide"/>
                            <a:map from="bank_code" to="bank_code"/>
                            <a:map from="bank_name" to="bank_name"/>
                            <a:map from="bank_location_code" to="bank_location_code"/>
                            <a:map from="bank_location_name" to="bank_location_name"/>
                            <a:map from="province_code" to="province_code"/>
                            <a:map from="province_name" to="province_name"/>
                            <a:map from="city_code" to="city_code"/>
                            <a:map from="city_name" to="city_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_method" displayField="description" lovService="csh.csh_payment_methods_list" lovWidth="500" options="payment_mehtod_ds" prompt="ACP.DESCRIPTION_METHOD" required="true">
                        <a:mapping>
                            <a:map from="description" to="payment_method"/>
                            <a:map from="payment_method_id" to="payment_type_id"/>
                            <a:map from="payment_method_code" to="payment_method_code"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_method_code"/>
                    <a:field name="payment_type_id"/>
                    <a:field name="account_number"/>
                    <a:field name="account_number_hide" autoComplete="true" autoCompleteField="account_number" lovGridHeight="250" lovHeight="400" lovWidth="500" required="true" title="CSH_BANK_BALANCES.BANK_ACCOUNT_ID">
                        <a:mapping>
                            <a:map from="account_number_hide" to="account_number_hide"/>
                            <a:map from="account_number" to="account_number"/>
                            <a:map from="account_name" to="account_name"/>
                            <a:map from="bank_code" to="bank_code"/>
                            <a:map from="bank_name" to="bank_name"/>
                            <a:map from="bank_location_code" to="bank_location_code"/>
                            <a:map from="bank_location_name" to="bank_location_name"/>
                            <a:map from="province_code" to="province_code"/>
                            <a:map from="province_name" to="province_name"/>
                            <a:map from="city_code" to="city_code"/>
                            <a:map from="city_name" to="city_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="bank_code"/>
                    <a:field name="bank_name"/>
                    <a:field name="bank_location_code"/>
                    <a:field name="bank_location_name"/>
                    <a:field name="province_code"/>
                    <a:field name="province_name"/>
                    <a:field name="city_code"/>
                    <a:field name="city_name"/>
                    <a:field name="usedes_name" autoComplete="true" autoCompleteField="code_name" lovGridHeight="300" lovHeight="460" lovService="expm.csh_payment_usedes_vl?expense_report_type_id=${/parameter/@expense_report_type_id}&amp;exp_report_header_id=${/parameter/@exp_report_header_id}" lovWidth="500" required="true" title="CSH_PAYMENT_USEDS.USEDS_CODE">
                        <a:mapping>
                            <a:map from="usedes_code" to="usedes"/>
                            <a:map from="description" to="usedes_name"/>
                            <a:map from="cash_flow_item_id" to="cash_flow_item_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="cash_flow_item_id"/>
                    <a:field name="usedes"/>
                    <a:field name="bank_id"/>
                    <a:field name="account_name" prompt="EXP_EMPLOYEE_ACCOUNTS.BANK_ACCOUNT_NAME" required="true"/>
                    <a:field name="frozen_flag" checkedValue="Y" defaultValue="N" prompt="分期付款" uncheckedValue="N"/>
                    <a:field name="gather_flag_desc" displayField="code_value_name" options="gather_flag_ds" returnField="gather_flag" valueField="code_value"/>
                    <a:field name="gather_flag" defaultValue="1"/>
                    <!-- <a:field name="month_quantity"/> -->
                    <a:field name="bank_statement" validator="venderCodeValidator"/>
                    <a:field name="cheque_number"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="pmtlineupdate"/>
                    <a:event name="submitsuccess" handler="submit_success"/>
                    <a:event name="beforecreate" handler="pmtcanaddaline"/>
                    <!-- <a:event name="add" handler="setpmtinitdata"/> -->
                    <a:event name="remove" handler="remove_record"/>
                    <a:event name="load" handler="pmtLineLoad"/>
                    <a:event name="add" handler="pmtLineAdd"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="head_object">
                <a:datas dataSource="/model/head_object"/>
            </a:dataSet>
            <a:dataSet id="head_dimension">
                <a:datas dataSource="/model/head_dimension"/>
            </a:dataSet>
        </a:dataSets>
        <a:screenBody>
            <a:screenTopToolbar id="exp_rep_mt_standard_top_bar">
                <a:screenTitle/>
                <a:toolbarButton id="createforeq" click="createforereq" text="EXP_REPORT_CREATE.FROMREQ" width="80"/>
                <a:toolbarButton click="savereport" text="HAP_SAVE" width="80"/>
                <!-- <a:toolbarButton id="newreportBtn" click="newreport" text="PROMPT.CREATE" width="80"/> -->
                <!-- <a:toolbarButton id="imgUpload" click="imgUpload" text="影像上传" width="80"/> -->
                <a:toolbarButton id="createytbtn" click="createyt" text="关联预提" width="80"/>
                <!-- <a:toolbarButton id="deleteytbtn" click="deleteyt" text="解除预提" width="80"/> -->
                <!-- <a:toolbarButton id="submitBtn" click="submitreport" text="PROMPT.SUBMIT" width="80"/> -->
                <a:toolbarButton id="submitBtn" click="beforesubmitfun" text="PROMPT.SUBMIT" width="80"/>
                <a:toolbarButton id="hgi_account_check" click="account_check_fun" text="EXP_REPORT_CREATE.FINANCE_REVIEW" width="80"/>
                <a:toolbarButton id="hgi_account_return" click="account_return_fun" text="EXP_REPORT_CREATE.FINANCE_REVIEW_RETURN" width="80"/>
                <!-- <a:toolbarButton id="policy" click="policyFunction" text="PROMPT.VIEW_POLICIES" width="80"/> -->
                <!-- <a:toolbarButton id="seeLog" click="seeLog" text="PROMPT.OVER_BUDGET_TYPE" width="80"/> -->
                <a:toolbarButton id="printBtn" click="printFunction" text="PROMPT.PRINT" width="80"/>
                <a:toolbarButton id="ossUpload" click="ossUpload" text="IMAGE_UPLOAD" width="80"/>
                <!-- <a:toolbarButton id="ossDownload" click="ossDownload" text="查看影像" width="80"/> -->
                <!--                 <a:toolbarButton id="uploadFileBtn" click="uploadFile" text="ATM.UPLOAD_ATTACHMENT" width="80"/>
 -->
                <a:toolbarButton id="seeHisBtn" click="seeHistory" text="WFL_INSTANCE_QUERY.GRID_TITLE" width="80"/>
                <a:toolbarButton id="OASignBtn" click="OASignRendererWindow" text="EXP_REPORT_READONLY_FOR_WBC.ATTACH_KM" width="80"/>
                <a:toolbarButton id="requsitionRef" click="requsitionRefReport" text="REF_TRAVELREQ" width="80"/>
                <a:toolbarButton id="deletereportBtn" click="deletereport" text="HAP_DELETE_ALL_REPORT" width="80"/>
                <a:toolbarButton id="seehelpBtn" click="seehelp" text="PROMPT.HELP" width="80"/>
                <a:toolbarButton id="postScriptBtn" click="postScript" text="EXP_REPORT_READONLY_FOR_WBC.POSTSCRIPT" width="80"/>
            </a:screenTopToolbar>
            <a:form id="exp_rep_mt_standard_head_form" title="EXP_REPORT_CREATE.TITEL">
                <a:box id="exp_rep_mt_standard_normal_box" column="4" style="width:100%">
                    <a:textField name="exp_report_number" bindtarget="exp_report_head"/>
                    <a:textField name="exp_report_type_name" bindtarget="exp_report_head"/>
                    <a:datePicker name="exp_report_data" bindtarget="exp_report_head"/>
                    <a:numberField name="sum_amount" allowDecimals="true" allowFormat="true" bindTarget="exp_report_head"/>
                    <a:textField name="exp_report_employee_name" bindtarget="exp_report_head"/>
                    <!-- add by HJ begin -->
                    <a:textField name="company_name" id="head_company_name" bindTarget="exp_report_head" prompt="EXP_REPORT_CREATE.COMPANY"/>
                    <a:textField name="unit_name" id="unit_name" bindTarget="exp_report_head" prompt="EXP_REPORT_CREATE.DEPARTMENT"/>
                    <!-- add by HJ end -->
                    <a:comboBox name="exp_report_position" bindtarget="exp_report_head"/>
                    <a:textField name="exp_report_currency_name" bindtarget="exp_report_head"/>
                    <a:numberField name="exp_report_attach_id" allowDecimals="false" bindtarget="exp_report_head"/>
                    <a:textField name="exp_report_create_by" bindtarget="exp_report_head"/>
                    <!-- <a:comboBox name="exp_report_payment_method" bindtarget="exp_report_head"/> -->
                    <a:textField name="exp_report_status" bindtarget="exp_report_head">
                        <a:events>
                            <a:event name="commit" handler="headcommitpayee"/>
                        </a:events>
                    </a:textField>
                    <a:comboBox name="ae_period_name" id="ae_period_name_id" bindTarget="exp_report_head" prompt="CSH_PAYMENT_REQUISITION_HDS.PERIOD_NAME"/>
                    <!-- <a:numberField name="ae_employee_num" allowDecimals="false"  bindTarget="exp_report_head" prompt="EMPLOYEE_NUM"   /> -->
                    <a:placeHolder id="dynamicHeadColumn"/>
                    <a:placeHolder id="dynamicHeadObject"/>
                    <!-- <a:checkBox name="vat_special_invoice_include" bindtarget="exp_report_head"/> -->
                    <a:checkBox name="previev_flag" id="previev_flag_check_box" bindTarget="exp_report_head"/>
                    <!-- <a:textField name="preview_exp_report_number" bindTarget="exp_report_head" prompt="关联的预提报销单"/> -->
                    <a:label name="preview_exp_report_number" id="preview_exp_report_number_id" bindTarget="exp_report_head" prompt="关联预提" renderer="reqNumRenderer"/>
                    <a:lov name="exp_report_rate_type_name" id="exp_req_create_exc_rate_type_lov" bindTarget="exp_report_head" hidden="true"/>
                    <a:comboBox name="exp_report_rate_quotation_name" id="exp_req_create_exc_rate_quo_cb" bindTarget="exp_report_head" readOnly="true"/>
                    <a:textField name="exp_report_rate" id="exp_req_create_exc_rate_tf" bindTarget="exp_report_head" readOnly="true"/>
                </a:box>
                <a:box id="exp_rep_mt_standard_ta_box" style="width:100%">
                    <a:textArea name="exp_report_description" id="exp_rep_mt_standard_desc_ta" bindtarget="exp_report_head" height="40"/>
                </a:box>
            </a:form>
            <a:tabPanel id="line_tab" marginHeight="325" marginWidth="35" minHeight="250">
                <a:tabs>
                    <a:tab prompt="HEC.EXP_REPORT_LINE_INFO" width="150">
                        <a:grid id="grid" bindTarget="exp_report_lines" marginHeight="377" minHeight="210" navBar="true" style="margin-top:5px;margin-left:5px;">
                            <a:toolBar>
                                <a:button id="addButton_update" click="createLineRecord" icon="${/request/@context_path}/images/add.gif" text="HAP_NEW"/>
                                <a:button id="deleteButton" type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="line_number" align="center" width="50"/>
                                <a:column name="company_name" align="center" editor="company_combox" width="120"/>
                                <a:column name="hgi_employee" align="center" editor="company_combox" prompt="ACP_ACP_REQUISITION_HDS.EMPLOYEE_ID"/>
                                <a:column name="unit_name" align="center" editor="company_combox" width="120"/>
                                <a:column name="responsibility_center_name" align="center" editor="company_combox" width="120"/>
                                <a:column name="expense_type_name" align="center" editor="type_combox" width="120"/>
                                <a:column name="exp_req_item_name" align="center" editor="type_combox" width="120"/>
                                <a:column name="benefit_editor" align="center" prompt="EXP_REPORT_CREATE.DBP" renderer="benefitEditorRenderer" width="120"/>
                                <!-- <a:column name="price" align="right" prompt="EXP_REPORT_CREATE.PRICE" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="primary_quantity" align="right" prompt="EXP_REPORT_CREATE.UNIT" width="50"/> -->
                                <!-- <a:column name="report_amount" align="right" editor="numberfield" renderer="Aurora.formatMoney" width="100"/> -->
                                <a:column name="month_quantity" align="center" editor="company_combox" prompt="报销月份" width="80"/>
                                <a:column name="date_from" align="center" editor="datapicker_grid_dp" renderer="Aurora.formatDate" width="100"/>
                                <a:column name="date_to" align="center" editor="datapicker_grid_dp" renderer="Aurora.formatDate" width="100"/>
                                <a:column name="place_from" align="center" editor="company_combox" width="100"/>
                                <a:column name="place_to" align="center" editor="company_combox" width="100"/>
                                <a:column name="report_amount" align="right" editorFunction="report_amount_fun" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="hgi_invoice_number" align="center" editor="HGIquantitynumberfield" prompt="VAT_INVOICE.INVOICE_NUMBER"/>
                                <!-- <a:column name="ae_number" align="center" editor="company_combox" prompt="CSH_PAYMENT_REQUISITION_LNS.AENO" width="100"/> -->
                                <a:column name="ae_number_hide" align="center" editor="company_combox" prompt="CSH_PAYMENT_REQUISITION_LNS.AENO" width="100"/>
                                <a:column name="ae_employee" align="center" editor="company_combox" prompt="EXP_REPORT_HEADERS.CARDHOLDER"/>
                                <a:column name="abroad_flag" editor="fnd_calendar_grid_dp" prompt="是否境外"/>
                                <a:column name="receptionist_date" align="center" editor="datapicker_grid_dp" prompt="招待日期" renderer="Aurora.formatDate"/>
                                <a:column name="invoice_type_desc" align="center" editor="type_combox" width="100"/>
                                <a:column name="invoice_code" align="center" editor="description_grid_tf" width="100"/>
                                <a:column name="invoice_number" align="center" editor="description_grid_tf" width="100"/>
                                <a:column name="invoice_date" align="center" editor="datapicker_grid_dp" renderer="Aurora.formatDate" width="100"/>
                                <a:column name="invoice_status_desc" align="center" width="100"/>
                                <a:column name="tax_amount" align="right" editor="numberfield" renderer="Aurora.formatMoney" width="100"/>
                                <!-- <a:column name="tax_rate" align="right" renderer="expYGZtaxRateRenderer" width="50"/> -->
                                <a:column name="tax_rate" align="right" editor="type_combox" width="50"/>
                                <a:column name="sale_amount" align="right" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="currency_name" align="center" editor="type_combox" prompt="EXP_REPORT_CREATE.CURRENTCY"/>
                                <a:column name="exchange_rate" align="center" editor="quantitynumberfield" prompt="EXP_REPORT_CREATE.EXCHANGE_RATE"/>
                                <a:column name="report_functional_amount" align="right" prompt="EXP_REPORT_CREATE.AMOUNT_IN_HKD" renderer="Aurora.formatMoney" width="100"/>
                                <!--add by HJ-->
                                <a:column name="income_period_from" align="center" editor="datapicker_grid_dp" renderer="Aurora.formatDate" width="120"/>
                                <a:column name="income_period_to" align="center" editor="datapicker_grid_dp" renderer="Aurora.formatDate" width="120"/>
                                <!-- <a:column name="usage_type_desc" align="center" editor="type_combox" width="100"/> -->
                                <!-- <a:column name="input_tax_struc_detail_desc" align="center" editor="type_combox" width="100"/> -->
                                <!-- <a:column name="period_name" align="center" editor="company_combox" width="80"/> -->
                                <!-- <a:column name="employee_name" align="center" editor="company_combox" width="120"/> -->
                                <!-- <a:column name="position_name" align="center" editor="type_combox" width="120"/> -->
                                <a:column name="receptionist_desc" align="center" editor="receptionist_desc_tf" prompt="我方最高级别接待人员" width="150"/>
                                <a:column name="line_customer_name" align="center" prompt="SYS_USER.CUSTOMER_ID" renderer="customerInfoRenderer" width="100"/>
                                <a:placeHolder id="dynamicLineColumnObj"/>
                                <a:placeHolder id="dynamicLineColumn"/>
                                <a:placeHolder id="dynamicLineColumn2"/>
                                <a:column name="description" align="left" editor="description_grid_tf" width="150"/>
                                <!-- <a:column name="description"  align="left" width="200"/> -->
                                <!--客户、供应商-->
                                <a:column name="line_vender_name" align="center" editor="payee_name" prompt="EXP_REPORT_CREATE.SUPPLIER" width="100"/>
                                <!-- <a:column name="acceptance_flag" align="center" editor="paymentflag" prompt="验收标识" width="50"/> -->
                                <a:column name="financial_pay_amount" align="center" editor="quantitynumberfield" prompt="尾款金额" width="100"/>
                                <a:column name="acceptance_doc" align="center" prompt="关联验收单据" renderer="acceptanceRenderer" width="80"/>
                                <a:column name="invoiceInfoRenderer" align="center" prompt="发票信息" renderer="invoiceInfoRenderer" width="60"/>
                                <!-- <a:column name="bank_account_name" id="bank_account_name" align="center" editor="company_combox" prompt="付款银行" width="120"/> -->
                            </a:columns>
                            <a:editors>
                                <a:textField id="org_unit_level_code_grid_tf" typecase="upper"/>
                                <a:textField id="description_grid_tf"/>
                                <a:textField id="receptionist_desc_tf"/>
                                <a:placeHolder id="numberfield_holder"/>
                                <a:textField id="HGIquantitynumberfield"/>
                                <a:numberField id="quantitynumberfield" allowDecimals="true" allowNegative="true" decimalPrecision="4"/>
                                <a:comboBox id="type_combox"/>
                                <a:lov id="company_combox" lovGridHeight="250" lovHeight="500" lovWidth="600"/>
                                <a:lov id="company_combox1" editable="false" lovGridHeight="250" lovHeight="450" lovWidth="500"/>
                                <a:checkBox id="paymentflag"/>
                                <a:lov id="payee_name" lovGridHeight="250" lovHeight="450" lovWidth="500"/>
                                <a:checkBox id="fnd_calendar_grid_dp"/>
                                <a:datePicker id="datapicker_grid_dp"/>
                                <a:lov id=" vender_lov"/>
                            </a:editors>
                            <a:events>
                                <a:event name="cellclick" handler="gridcellclick"/>
                            </a:events>
                        </a:grid>
                    </a:tab>
                    <a:tab prompt="HEC.EXP_REPORT_PMT_LINE_INFO" width="150">
                        <a:grid id="pmt_grid" bindTarget="pmtplan_schedules_ds" marginHeight="377" minHeight="210" navBar="true" style="margin-top:5px;margin-left:5px;">
                            <a:toolBar>
                                <!-- <a:button type="add"/> -->
                                <a:button id="addPmtButton" click="createPmtRecord" icon="${/request/@context_path}/images/add.gif" text="HAP_NEW"/>
                                <a:button id="deletePmtButton" type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="line_num" align="center" prompt="CSH_CASH_PLAN_LINES.LINE_NUMBER" renderer="line_number" width="50"/>
                                <a:column name="verification_loan" align="center" prompt="EXP_REPORT_PMTPLAN_SCHEDULES.VERIFICATION_LOAN" renderer="edit_function_grop" width="80"/>
                                <a:column name="write_off_amount" align="right" renderer="Aurora.formatMoney" width="100"/>
                                <!-- <a:column name="description" align="left" editor="pmt_tf" width="150"/> -->
                                <a:column name="due_amount" align="right" editor="pmt_nf" renderer="Aurora.formatMoney" width="100"/>
                                <!-- <a:column name="month_quantity" align="center" editor="pmt_nf" prompt="报销月数" width="80"/> -->
                                <a:column name="payee_type" align="left" editor="pmt_combox" prompt="EXP_REPORT_HEADERS.PAYEE_CATEGORY" width="120"/>
                                <a:column name="payee_partner_name" align="left" editor="pmt_lov" prompt="ACP_INVOICE_HEADERS.PAYEE_ID" width="120"/>
                                <!-- <a:column name="account_number" align="left" editor="pmt_lov" prompt="EXP_EMPLOYEE.BANK_ACCOUNT" width="120"/> -->
                                <a:column name="account_number_hide" align="left" editor="pmt_lov" prompt="EXP_EMPLOYEE.BANK_ACCOUNT" width="120"/>
                                <a:column name="account_name" align="left" prompt="CSH_BANK_BALANCES.BANK_ACCOUNT_ID" width="120"/>
                                <a:column name="payment_method" align="left" editor="pmt_lov" prompt="EXP_REPORT_HEADERS.PAYMENT_METHOD" width="120"/>
                                <a:column name="cheque_number" align="left" editor="pmt_tf" prompt="EXP_REPORT_CREATE.CHEQUE_NUMBER" width="150"/>
                                <a:column name="usedes_name" align="left" editor="pmt_lov" prompt="CSH_PAYMENT_USEDS.USEDS_CODE" width="120"/>
                                <!-- <a:column name="gather_flag_desc" align="center" prompt="TRAVEL_PLAN_TYPE.CENTRALIZED_CLEARING_FLAG" width="120"/> -->
                                <!-- <a:column name="contract_number" align="left" editor="pmt_lov" width="120"/> -->
                                <!-- <a:column name="line_number" align="left" editor="pmt_lov" width="120"/> -->
                                <a:column name="bank_id" align="center" prompt="CSH_PAYMENT.BANK_ACCOUNT_CODE" renderer="bankAssign" width="80"/>
                                <a:column name="bank_statement" align="left" editor="pmt_tf" prompt="银行附言" width="150"/>
                                <!-- <a:column name="frozen_flag" align="center" editorFunction="frozen_flag_editor" width="50"/> -->
                                <a:column name="schedule_due_date" align="left" editor="schedule_due_date_dp" prompt="EXP_REPORT_PMT_SCHEDULES.SCHEDULE_DUE_DATE" renderer="Aurora.formatDate"/>
                            </a:columns>
                            <a:editors>
                                <a:comboBox id="pmt_combox"/>
                                <a:textField id="pmt_tf"/>
                                <a:lov id="pmt_lov" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                                <a:datePicker id="schedule_start_date_dp"/>
                                <a:datePicker id="schedule_due_date_dp"/>
                                <a:checkBox id="pmt_checkbox"/>
                                <a:numberField id="pmt_nf"/>
                            </a:editors>
                            <a:events>
                                <a:event name="cellclick" handler="pmtGridcellclick"/>
                            </a:events>
                        </a:grid>
                    </a:tab>
                </a:tabs>
            </a:tabPanel>
        </a:screenBody>
        <script><![CDATA[
            function init() {
                $('pmt_grid').hideColumn('month_quantity');
                $('grid').hideColumn('abroad_flag');
                $('grid').hideColumn('financial_pay_amount');
                if ('${/model/head_data/record/@req_required_flag}' == 'Y') {
                    $('addButton_update').disable();
                }
                if ('${/model/head_data/record/@mobil_flag}'=='Y'){
                    $('addButton_update').disable();
                    $('deleteButton').disable();
                    $('deletePmtButton').disable();
                    $('addPmtButton').disable();
                    
                }

                var t = $('exp_report_head').getAt(0);
                var preview_flag=t.get('previev_flag');//add by lq 加载时根据预提标志
                // alert(preview_flag);
                if(preview_flag=="Y"){
                   Ext.get('createytbtn').hide();
                   //Ext.get('deleteytbtn').hide();
                }else{
                   Ext.get('createytbtn').show();
                   //Ext.get('deleteytbtn').show();
                }//end add
                var r = t.getMeta();
                var f1 = r.getField('exp_report_rate_type_name');
                var f2 = r.getField('exp_report_rate_quotation_name');
                var f3 = r.getField('exp_report_rate');

                //初始化收款方查询lov
                var payee_category = t.get('exp_report_payee_category');
                var exp_report_payee_name = t.getField('exp_report_payee_name');
                if (payee_category == null || payee_category == undefined || payee_category == '') {
                    exp_report_payee_name.setReadOnly(true);
                    exp_report_payee_name.setLovService('');
                } else if (payee_category == 'EMPLOYEE') {
                    exp_report_payee_name.setReadOnly(false);
                    exp_report_payee_name.setLovService('expm.exp_employee_req_lov');
                    exp_report_payee_name.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                } else if (payee_category == 'VENDER') {
                    exp_report_payee_name.setReadOnly(false);
                    exp_report_payee_name.setTitle('${l:VENDER_SEARCH}');
                    exp_report_payee_name.setLovService('expm.exp_vender_req_lov');
                } else {
                    exp_report_payee_name.setReadOnly(false);
                    exp_report_payee_name.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                    exp_report_payee_name.setLovService('expm.exp_customer_req_lov');
                }

                if (t.get('exp_report_currency_code') != t.get('functional_currency_code')) {
                    var rateMethodCode = '${/model/exchange_type/record/@rate_method_code}';
                    var meta = t.getMeta();
                    if (rateMethodCode == 'DAILY' || rateMethodCode == 'FIXED') {
                        meta.getField('exp_report_rate_type_name').setRequired(true);
                        meta.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        meta.getField('exp_report_rate').setReadOnly(true);
                    } else {
                        meta.getField('exp_report_rate_quotation_name').setReadOnly(false);
                        meta.getField('exp_report_rate_quotation_name').setRequired(true);
                        meta.getField('exp_report_rate_type_name').setReadOnly(false);
                        meta.getField('exp_report_rate_type_name').setRequired(true);
                    }
                    if (exp_report_header_id_bak == '') {
                        t.set('exp_report_rate_type_name', '${/model/exchange_type/record/@type_name}');
                        t.set('exp_report_rate_type', '${/model/exchange_type/record/@value_code}');
                        getExchangeRate({
                            fromCur: t.get('functional_currency_code'),
                            toCur: t.get('exp_report_currency_code'),
                            exchangeRateType: '${/model/exchange_type/record/@value_code}',
                            exchangeDate: t.get('exp_report_data'),
                            periodName: t.get('period_name')
                        });
                    }

                } else {
                    f1.setReadOnly(true);
                    f2.setReadOnly(true);
                    f3.setReadOnly(true);
                    f3.setRequired(true);
                    t.set('exp_report_rate', 1, false);
                }
                if (t.get('exp_report_payee_category') == 'EMPLOYEE') {
                    if (exp_report_header_id_bak == '') {
                        t.set('exp_report_payee_id', '${/parameter/@employee_id}');
                        t.set('exp_report_payee_name', t.get('exp_report_employee_name'));
                    }
                }
                if (exp_report_header_id_bak != '') {
                    r.getField('exp_report_data').setReadOnly(true);
                    r.getField('exp_report_payment_method').setReadOnly(true);
                    r.getField('exp_report_position').setReadOnly(true);
                    r.getField('exp_report_payee_category_name').setReadOnly(true);
                    r.getField('exp_report_payee_name').setReadOnly(true);
                    for (var fieldName in t.data) {
                        if (fieldName != "exp_report_description" && fieldName != "exp_report_attach_id"  && fieldName != "vat_special_invoice_include" && fieldName != "previev_flag") {

                            r.getField(fieldName).setReadOnly(true);
                        }
                    }
                    f1 = r.getField('exp_report_payee_name');
                    var payee_category = t.get('exp_report_payee_category');
                    if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_req_lov');
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.exp_vender_req_lov');
                    } else {
                        f1.setLovService('expm.exp_customer_req_lov');
                    }
                } else {
                    f1 = r.getField('exp_report_payee_name');
                    f1.setReadOnly(false);
                    var payee_category = t.get('exp_report_payee_category');
                    if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_req_lov');
                        f1.setMapping([{
                            from: 'employee_id',
                            to: 'exp_report_payee_id'
                        }, {
                            from: 'name',
                            to: 'payee_name'
                        }, {
                            from: 'code_name',
                            to: 'exp_report_payee_name'
                        }]);
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.exp_vender_req_lov');
                        f1.setMapping([{
                            from: 'vender_id',
                            to: 'exp_report_payee_id'
                        }, {
                            from: 'vender_name',
                            to: 'payee_name'
                        }, {
                            from: 'code_name',
                            to: 'exp_report_payee_name'
                        }]);
                    } else {
                        f1.setLovService('expm.exp_customer_req_lov');
                        f1.setMapping([{
                            from: 'customer_id',
                            to: 'exp_report_payee_id'
                        }, {
                            from: 'customer_name',
                            to: 'payee_name'
                        }, {
                            from: 'code_name',
                            to: 'exp_report_payee_name'
                        }]);
                    }
                    Ext.get('deletereportBtn').hide();
                    // Ext.get('uploadFileBtn').hide();
                    //oss上传，下载
                    Ext.get('ossUpload').hide();
                    Ext.get('seeHisBtn').hide();
                    Ext.get('OASignBtn').hide();
                    Ext.get('requsitionRef').hide();
                    //Ext.get('seeLog').hide();
                    Ext.get('printBtn').hide();
                    Ext.get('submitBtn').hide();
                    Ext.get('hgi_account_return').hide();
                    Ext.get('hgi_account_check').hide();
                    // Ext.get('policy').hide();
                   // Ext.get('imgUpload').hide();
                    //Ext.get('ossDownload').hide();
                    Ext.get('createytbtn').hide();
                    //Ext.get('deleteytbtn').hide();
                    Ext.get('postScriptBtn').hide();
                }
                //add by lq 20190727 只有状态为S的情况不显示财务查验（伪提交标志）
                var hgi_account_flag='${/parameter/@hgi_account_flag}';
                var hgi_count='${/model/account_set/record/@account_set}';
                if (hgi_account_flag=='Y'){
                Ext.get('hgi_account_check').hide();
                Ext.get('hgi_account_check').remove();
                Ext.get('deletereportBtn').hide();
                Ext.get('deletereportBtn').remove();
                }else{
                    //非HGI显示正常的提交，HGI里判断当前登录人非财务人员显示伪提交按钮，财务人员显示正常的提交按钮
                    if(hgi_count==0){
                        //非HGI账套
                        Ext.get('hgi_account_check').hide();
                        Ext.get('hgi_account_check').remove();
                        
                        Ext.get('hgi_account_return').hide();
                        Ext.get('hgi_account_return').remove();                        
                    }else{
                        Ext.get('printBtn').hide();
                        Ext.get('printBtn').remove();
                        //HGI账套
                       var hgi_account_employee='${/model/hgi_account_employee/record/@hgi_account_employee}'; 
                       if (hgi_account_employee==0){
                        //伪提交
                        Ext.get('submitBtn').hide();
                        Ext.get('submitBtn').remove();
                        Ext.get('hgi_account_return').hide();
                        Ext.get('hgi_account_return').remove();
                       }else{
                        //正常提交
                        Ext.get('hgi_account_check').hide();
                        Ext.get('hgi_account_check').remove();
                        if (hgi_account_flag=='N'){
                            Ext.get('hgi_account_return').hide();
                            Ext.get('hgi_account_return').remove();
                        }
                       }
                    }
                }
                var hidename = '';
                if ('${/model/policy_enabled/record/@policy_enabled}' == 'Y') {
                    hidename = 'city';
                } else {
                    hidename = 'place';
                }
                var columns = $('grid').columns;
                for (var i = 0,
                    l = columns.length;i < l;i++) {
                    var colname = columns[i].name;
                    if (colname == hidename) {
                        $('grid').hideColumn(colname);
                    }
                }
                lineNum = $('exp_report_head').getAt(0).get('line_number');
                lineNum = lineNum > 0 ? lineNum : 0;
                getpmtdate();
                $('grid').hideColumn('financial_pay_amount');
                $('grid').hideColumn('acceptance_doc');
                //add by wxj 20190114 手机费餐费报销单、日常交通费报销单、业务招待费报销单预提标识隐藏
                var documentTypeCode = '${/model/head_data/record/@exp_report_type_code}';
                if (documentTypeCode == 'BX0060' || documentTypeCode == 'BX0080' || documentTypeCode == 'BX0020') {
                    Ext.get('previev_flag_check_box').hide();
                    Ext.get('previev_flag_check_box_prompt').hide();
                    Ext.get('preview_exp_report_number_id').hide();
                    Ext.get('preview_exp_report_number_id_prompt').hide();
                }
                //add by lq 20190530 假如不为HGI Corporate Card报销单则隐藏所属期间字段\
                if(documentTypeCode == 'HGIBX0100'){
                    Ext.get('ae_period_name_id').show();
                }else{
                    Ext.get('ae_period_name_id').hide();
                    Ext.get('ae_period_name_id_prompt').hide();
                }
            }
            init();

            /* new function() {
                if ('${/model/check_log_count/record/@check_count}' > 0) {
                    $('seeLog').el.setStyle('color', 'yellow');
                } else {
                    $('seeLog').el.setStyle('color', '');
                }
            }(); */

           //根据币种隐藏某些字段
           function headGridHideColumnInit(){
               $('grid').hideColumn('month_quantity');
               var currency_code_ex='${/model/head_data/record/@exp_report_currency_code}';
               var fun_currency_code='${/model/currency_code_path/record/@functional_currency_code}';
               if(currency_code_ex === fun_currency_code){
                   $('exp_req_create_exc_rate_type_lov').hide();
                       $('exp_req_create_exc_rate_quo_cb').hide(); 		
                       $('exp_req_create_exc_rate_tf').hide();
                       $('grid').hideColumn('exchange_rate');
                       $('grid').hideColumn('report_functional_amount'); 
                       $('grid').hideColumn('currency_name');
               }else if(currency_code_ex == 'OTHER'){
                       $('exp_req_create_exc_rate_type_lov').hide();
                       $('exp_req_create_exc_rate_quo_cb').hide(); 		
                       $('exp_req_create_exc_rate_tf').hide();
                   
               }else if(currency_code_ex!=fun_currency_code&&currency_code_ex!='OTHER'){
                       $('exp_req_create_exc_rate_type_lov').hide();
                       $('exp_req_create_exc_rate_quo_cb').hide(); 		
                       //$('exp_req_create_exc_rate_tf').hide();
                       $('grid').hideColumn('exchange_rate');
                       $('grid').hideColumn('currency_name');
               }
               
               //根据单据类型判断是否显示供应商字段
               var exp_report_type_code_head='${/model/head_data/record/@exp_report_type_code}';               
               var no_supplier = [];
			   var records = $('no_supplier').getAll();
                    for (var i = 0;i < records.length;i++) {
                    	no_supplier.add(records[i].data.code_value);
                    }
               if (no_supplier.indexOf(exp_report_type_code_head) == -1){
               }else{
                   $('grid').hideColumn('line_vender_name');
               }
               //只有Corporate Card类报销单增加时间从时间到地点从地点到的字段别的单据类型都隐藏
                    var type_code1='${/model/report_type_code/record/@exp_type_code}';
                    if(type_code1!='HGIBX0100'){
                        $('grid').hideColumn('date_from');
                        $('grid').hideColumn('date_to');
                        $('grid').hideColumn('place_from');
                        $('grid').hideColumn('place_to');
                    }
                    //end add
               
               //add by lyt 2019.5.20HGI账套显示隐藏的字段 报销单头隐藏预提标识、关联预提,显示部门
               //报销单行 显示发票号码、币种、单价、数量、汇率、本币报销金额
               if('${/model/account_set/record/@account_set}'==1){
                   var type_code='${/model/report_type_code/record/@exp_type_code}';
                    Ext.get('previev_flag_check_box').hide();
                    Ext.get('previev_flag_check_box_prompt').hide();
                    Ext.get('preview_exp_report_number_id').hide();
                    Ext.get('preview_exp_report_number_id_prompt').hide(); 
                    Ext.get('createytbtn').hide(); 
                    Ext.get('createforeq').hide(); 
					Ext.get('seehelpBtn').hide();
                  	Ext.get('createforeq').remove();
                  	//HGI的CP报销单显示关联差旅申请
                  	if(type_code!='HGIBX0100'){
                    Ext.get('requsitionRef').hide();
                  	}
                    // $('grid').showColumn('currency_name');
                    // $('grid').showColumn('exchange_rate');
                    // $('grid').showColumn('report_functional_amount'); 
                    
                    $('grid').hideColumn('invoiceInfoRenderer');
                    
                    $('pmt_grid').hideColumn('bank_statement');
                    
                    //$('grid').hideColumn('primary_quantity');
                    //如果是通用报销单和Petty Cash报销单
                    var type_code='${/model/report_type_code/record/@exp_type_code}';
/*                     if(type_code!='HGIBX0090'){
                        $('pmt_grid').hideColumn('cheque_number');
                    } */
                    
                    $('grid').hideColumn('line_vender_name');
               }else{
                    $('grid').hideColumn('price');
                    $('grid').hideColumn('primary_quantity');
                    $('grid').hideColumn('hgi_invoice_number');
                    $('pmt_grid').hideColumn('cheque_number');
               }
               //add by lq 20190530 判断当前账套的本位币币种和当前币种，如果相同则隐藏汇率、本位币等字段
               var currency_code_ex='${/model/head_data/record/@exp_report_currency_code}';
               var fun_currency_code='${/model/currency_code_path/record/@functional_currency_code}';
               //console.log(currency_code_ex);
               if(currency_code_ex == fun_currency_code){
                       $('exp_req_create_exc_rate_type_lov').hide();
                       $('exp_req_create_exc_rate_quo_cb').hide(); 		
                       $('exp_req_create_exc_rate_tf').hide();
                       $('grid').hideColumn('exchange_rate');
                       $('grid').hideColumn('report_functional_amount'); 
                       $('grid').hideColumn('currency_name');
               }else if(currency_code_ex == 'OTHER'){
                       $('exp_req_create_exc_rate_type_lov').hide();
                       $('exp_req_create_exc_rate_quo_cb').hide(); 		
                       $('exp_req_create_exc_rate_tf').hide();
                   
               }else if(currency_code_ex!=fun_currency_code&&currency_code_ex!='OTHER'){
                       $('exp_req_create_exc_rate_type_lov').hide();
                       $('exp_req_create_exc_rate_quo_cb').hide(); 		
                       //$('exp_req_create_exc_rate_tf').hide();
                       $('grid').hideColumn('exchange_rate');
                       $('grid').hideColumn('currency_name');
               }
               
               //如果是HGIBX0010 HGIBX0020 HGIBX0030 HGIBX0040 HGIBX0050 HGIBX0060 HGIBX0070 HGIBX0080 隐藏核销借款按钮
               var doc_type_code='${/model/report_type_code/record/@exp_type_code}';
               if(doc_type_code=='HGIBX0010' ||
               doc_type_code=='HGIBX0020' ||
               doc_type_code=='HGIBX0030' ||
               doc_type_code=='HGIBX0040' ||
               doc_type_code=='HGIBX0050' ||
               doc_type_code=='HGIBX0060' ||
               doc_type_code=='HGIBX0070' ||
               doc_type_code=='HGIBX0080'   ){
                   $('pmt_grid').hideColumn('verification_loan'); 
                   $('pmt_grid').hideColumn('write_off_amount');
               }
           }
           headGridHideColumnInit();
        ]]></script>
        <script purpose="auto_resize"><![CDATA[
            function expRepMTStandardInitSize() {
                //描述宽度
                var labelWidth = 75;
                //标签宽度,5 = 3padding + 2border-spacing
                var tagWidth = 150 + 5;
                //页面宽度、高度
                var vw = $A.getViewportWidth();
                //留白宽度
                var marginWidth = 35 ;
                //自适应宽度
                var autoWidth = vw - marginWidth;
                //Form内部宽度，-2border
                var formInnerWidth = autoWidth - 2;
                //所占列数
                var colSpan = 4;
                //设置组件的自适应宽度
                Ext.get('exp_rep_mt_standard_head_form').setWidth(autoWidth + 4);
				$('line_tab').setWidth(autoWidth + 4);
                $('grid').setWidth(autoWidth + 4 - 17);
                $('pmt_grid').setWidth(autoWidth + 4 - 17);
                //设置TextArea的自适应宽度,别问我最后那个6是哪里来的，试出来的
                Ext.get('exp_rep_mt_standard_desc_ta').setWidth(formInnerWidth - (formInnerWidth / colSpan - labelWidth - tagWidth) - labelWidth - 6);
            }
            //Ext.fly(window).on('resize', expRepMTStandardInitSize);
            expRepMTStandardInitSize();
        ]]></script>
    </a:view>
    <a:view-config>
        <c:batch-config source="/model/head_dimension" targetId="dynamicHeadColumn">
            <a:lov name="${@dimension_code}" bindTarget="exp_report_head_dimension" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
        </c:batch-config>
        <c:create-config targetId="dynamicHeadFields">
            <p:loop source="/model/head_dimension">
                <c:process-config>
                    <a:field name="${@dimension_code}" autoComplete="true" autoCompleteField="code_name" defaultValue="${@value_description}" lovGridHeight="320" lovHeight="450" lovService="expm.EXP2110.exp_rep_ref_dimension_dvc_lov?dimension_id=${@dimension_id}&amp;enabled_flag=Y" lovWidth="500" prompt="${@description}" required="true" title="${@description}">
                        <a:mapping>
                            <a:map from="dimension_value_code" to="dimension_value_code"/>
                            <a:map from="dimension_value_id" to="${@dimension_code1}"/>
                            <a:map from="description" to="${@dimension_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@dimension_code1}" defaultValue="${@default_dim_value_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="dynamicHeadObject">
            <p:loop source="/model/head_object">
                <p:switch test="@expense_object_method">
                    <p:case value="VALUE_LIST">
                        <c:process-config>
                            <a:lov name="${@expense_object_type_code}" bindTarget="exp_report_head_object" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="SQL_TEXT">
                        <c:process-config>
                            <a:lov name="${@expense_object_type_code}" bindTarget="exp_report_head_object" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="DESC_TEXT">
                        <c:process-config>
                            <a:textField name="${@expense_object_type_code}" bindTarget="exp_report_head_object"/>
                        </c:process-config>
                    </p:case>
                </p:switch>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="dynamicHeadObjects">
            <p:loop source="/model/head_object">
                <c:process-config>
                    <a:field name="${@expense_object_type_code}" defaultValue="${@default_object_desc}" lovGridHeight="320" lovHeight="450" lovUrl="${/request/@context_path}/modules/expm/public/exp_req_ref_obj_sql_query_lov.screen?expense_object_type_id=${@expense_object_type_id}" lovWidth="500" prompt="${@description}" required="${@required_flag}" title="${@description}">
                        <a:mapping>
                            <a:map from="id" to="${@forname}"/>
                            <a:map from="description" to="${@expense_object_type_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@forname}" defaultValue="${@default_object_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:batch-config source="/model/line_dimension" targetId="dynamicLineColumn">
            <a:column name="${@dimension_code}" align="center" editor="company_combox" prompt="${@description}"/>
        </c:batch-config>
        <c:create-config targetId="dynamicLineFields">
            <p:loop source="/model/line_dimension">
                <c:process-config>
                    <a:field name="${@dimension_code}" defaultValue="${@value_description}" lovGridHeight="320" lovHeight="450" lovService="expm.EXP2110.exp_rep_ref_dimension_dvc_lov?dimension_id=${@dimension_id}&amp;enabled_flag=Y" lovWidth="500" prompt="${@description}" required="true" title="${@description}">
                        <a:mapping>
                            <a:map from="dimension_value_code" to="dimension_value_code"/>
                            <a:map from="dimension_value_id" to="${@dimension_code1}"/>
                            <a:map from="description" to="${@dimension_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@dimension_code1}" defaultValue="${@default_dim_value_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:batch-config source="/model/line_dimension2" targetId="dynamicLineColumn2">
            <a:column name="${@bank_account_name2}" align="center" editor="company_combox" prompt="付款银行"/>
        </c:batch-config>
        <c:create-config targetId="dynamicLineFields2">
            <p:loop source="/model/line_dimension2">
                <c:process-config>
                    <a:field name="${@bank_account_name2}" lovGridHeight="320" lovHeight="450" lovService="expm.exp_line_back_account_id" lovWidth="500" prompt="付款银行" required="false" title="付款银行">
                        <a:mapping>
                            <a:map from="bank_account_id" to="${@bank_account_id2}"/>
                            <a:map from="bank_account_name" to="${@bank_account_name2}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@bank_account_id2}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="dynamicLineColumnObj">
            <p:loop source="/model/line_object">
                <p:switch test="@expense_object_method">
                    <p:case value="VALUE_LIST">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="company_combox1"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="SQL_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="company_combox1"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="DESC_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="description_grid_tf"/>
                        </c:process-config>
                    </p:case>
                </p:switch>
            </p:loop>
        </c:create-config>
        <!--   <c:create-config targetId="dynamicLineFieldsObj">
            <p:loop source="/model/line_object">
                <c:process-config>
                    <a:field name="${@expense_object_type_code}" defaultValue="${@default_object_desc}" lovGridHeight="320" lovHeight="450" lovUrl="${/request/@context_path}/modules/expm/public/exp_req_ref_obj_sql_query_lov.screen?expense_object_type_id=${@expense_object_type_id}" lovWidth="500" prompt="${@description}" required="${@required_flag}" title="${@description}">
                        <a:mapping>
                            <a:map from="field_id" to="${@field_id}"/>
                            <a:map from="description" to="${@expense_object_type_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@field_id}"/>
                    </c:process-config>
            </p:loop>
        </c:create-config> -->
        <c:create-config targetId="dynamicLineFieldsObj">
            <p:loop source="/model/line_object">
                <c:process-config>
                    <a:field name="${@expense_object_type_code}" defaultValue="${@default_object_desc}" lovGridHeight="320" lovHeight="450" lovUrl="${/request/@context_path}/modules/expm/public/exp_req_ref_obj_sql_query_lov.screen?expense_object_type_id=${@expense_object_type_id}" lovWidth="500" prompt="${@description}" required="${@required_flag}" title="${@description}">
                        <a:mapping>
                            <a:map from="id" to="${@forname}"/>
                            <a:map from="description" to="${@expense_object_type_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@forname}" defaultValue="${@default_object_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="numberfield_holder">
            <p:switch test="/model/head_data/record/@adjustment_flag">
                <p:case value="Y">
                    <c:process-config>
                        <a:numberField id="numberfield" allowNegative="true" decimalPrecision="3"/>
                    </c:process-config>
                </p:case>
                <p:case>
                    <c:process-config>
                        <!-- add by lyt 2019.3.25 报销单允许填写负数金额-->
                        <a:numberField id="numberfield" allowNegative="true" decimalPrecision="3"/>
                    </c:process-config>
                </p:case>
            </p:switch>
        </c:create-config>
    </a:view-config>
</a:screen>
